/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.domain;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Map;

import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.NotBlank;
import org.springframework.data.annotation.Transient;
import org.springframework.data.mongodb.core.index.CompoundIndex;
import org.springframework.data.mongodb.core.index.CompoundIndexes;
import org.springframework.data.mongodb.core.mapping.Document;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

@Document
@JsonIgnoreProperties(ignoreUnknown = true)
@CompoundIndexes(value = {
        @CompoundIndex(name = "segment_label_indx", def = "{'assessmentId':1, 'label':1}", unique = true),
        @CompoundIndex(name = "segment_position_indx", def = "{'assessmentId':1, 'position':1}", unique = true)
})
public class Segment extends AssessmentChild implements Serializable, TenantedByAssessment {

    private static final long serialVersionUID = 1693202958911228485L;

    private static final int MAX_LABEL_LEN = 20;

    @NotBlank(message = "segment.label.required")
    @Size(max = MAX_LABEL_LEN, message = "segment.label.length")
    private String label;

    @NotNull(message = "segment.position.required")
    @Min(value = 0, message = "segment.position.required")
    private Integer position;

    @NotNull(message = "segment.minOpItems.required")
    private Integer minOpItems;

    @NotNull(message = "segment.maxOpItems.required")
    private Integer maxOpItems;

    @NotNull(message = "segment.minFtItems.required")
    private Integer minFtItems;

    @NotNull(message = "segment.maxFtItems.required")
    private Integer maxFtItems;

    @NotBlank(message = "segment.itemSelectionAlgorithmId.required")
    private String itemSelectionAlgorithmId;

    private Map<String, String> itemSelectionParameters;

    private String itemPoolId;

    @Transient
    private transient ItemSelectionAlgorithm itemSelectionAlgorithm;

    public String getLabel() {
        return this.label;
    }

    public void setLabel(final String aLabel) {
        this.label = aLabel;
    }

    public int getPosition() {
        return this.position;
    }

    public void setPosition(final int aPosition) {
        this.position = aPosition;
    }

    public Integer getMinOpItems() {
        return this.minOpItems;
    }

    public void setMinOpItems(final Integer aMinOpItems) {
        this.minOpItems = aMinOpItems;
    }

    public Integer getMaxOpItems() {
        return this.maxOpItems;
    }

    public void setMaxOpItems(final Integer aMaxOpItems) {
        this.maxOpItems = aMaxOpItems;
    }

    public Integer getMinFtItems() {
        return this.minFtItems;
    }

    public void setMinFtItems(final Integer aMinFtItems) {
        this.minFtItems = aMinFtItems;
    }

    public Integer getMaxFtItems() {
        return this.maxFtItems;
    }

    public void setMaxFtItems(final Integer aMaxFtItems) {
        this.maxFtItems = aMaxFtItems;
    }

    public String getItemSelectionAlgorithmId() {
        return this.itemSelectionAlgorithmId;
    }

    public void setItemSelectionAlgorithmId(final String aItemSelectionAlgorithmId) {
        this.itemSelectionAlgorithmId = aItemSelectionAlgorithmId;
    }

    public ItemSelectionAlgorithm getItemSelectionAlgorithm() {
        return this.itemSelectionAlgorithm;
    }

    public void setItemSelectionAlgorithm(final ItemSelectionAlgorithm aItemSelectionAlgorithm) {
        this.itemSelectionAlgorithm = aItemSelectionAlgorithm;
    }

    public int getItemSelectionParameterCount() {
        return this.itemSelectionParameters == null ? 0 : this.itemSelectionParameters.size();
    }

    public Map<String, String> getItemSelectionParameters() {
        return this.itemSelectionParameters;
    }

    public void setItemSelectionParameters(final Map<String, String> aItemSelectionParameters) {
        this.itemSelectionParameters = aItemSelectionParameters;
    }

    public String getItemPoolId() {
        return this.itemPoolId;
    }

    public void setItemPoolId(final String aItemPoolId) {
        this.itemPoolId = aItemPoolId;
    }

    /**
     * Trims the item selection parameter values when the type is FLOAT or INTEGER
     */
    public void trimItemSelectionValues() {
        if (this.itemSelectionAlgorithm != null && this.itemSelectionParameters != null) {
            for (final ItemSelectionAlgorithmParameter parameter : this.itemSelectionAlgorithm.getScalarParameters()) {
                if (ItemSelectionType.FLOAT == parameter.getItemSelectionType() || ItemSelectionType.INTEGER == parameter.getItemSelectionType()) {
                    final String paramValue = this.itemSelectionParameters.get(parameter.getParameterName());
                    this.itemSelectionParameters.put(parameter.getParameterName(), new BigDecimal(paramValue).stripTrailingZeros().toPlainString());
                }
            }
        }
    }
}
