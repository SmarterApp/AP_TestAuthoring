/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.rest;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.mockito.Mockito.atLeast;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.authoring.testauth.domain.PublishingStatus.PUBLISHED;

import java.nio.charset.Charset;
import java.util.List;
import java.util.Map;

import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import org.opentestsystem.authoring.testauth.domain.AdaptiveItemLocation;
import org.opentestsystem.authoring.testauth.domain.Approval;
import org.opentestsystem.authoring.testauth.domain.ApprovalStatus;
import org.opentestsystem.authoring.testauth.domain.Assessment;
import org.opentestsystem.authoring.testauth.domain.BlueprintElement;
import org.opentestsystem.authoring.testauth.domain.DomainFactory;
import org.opentestsystem.authoring.testauth.domain.FileGroup;
import org.opentestsystem.authoring.testauth.domain.GridFile;
import org.opentestsystem.authoring.testauth.domain.Item;
import org.opentestsystem.authoring.testauth.domain.ItemLocation;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionAlgorithm;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionAlgorithmType;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionPurpose;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionType;
import org.opentestsystem.authoring.testauth.domain.PsychometricRecord;
import org.opentestsystem.authoring.testauth.domain.Publication;
import org.opentestsystem.authoring.testauth.domain.PublishingRecord;
import org.opentestsystem.authoring.testauth.domain.PublishingStatus;
import org.opentestsystem.authoring.testauth.domain.Segment;
import org.opentestsystem.authoring.testauth.domain.SimulationRecord;
import org.opentestsystem.authoring.testauth.domain.Subject;
import org.opentestsystem.authoring.testauth.persistence.AssessmentRepository;
import org.opentestsystem.authoring.testauth.persistence.GridFsRepository;
import org.opentestsystem.authoring.testauth.persistence.PublishingRecordRepository;
import org.opentestsystem.authoring.testauth.service.ApprovalService;
import org.opentestsystem.authoring.testauth.service.AssessmentService;
import org.opentestsystem.authoring.testauth.service.BlueprintElementService;
import org.opentestsystem.authoring.testauth.service.FileGroupService;
import org.opentestsystem.authoring.testauth.service.ItemSelectionAlgorithmService;
import org.opentestsystem.authoring.testauth.service.ItemService;
import org.opentestsystem.authoring.testauth.service.PublicationService;
import org.opentestsystem.authoring.testauth.service.PublishingRecordService;
import org.opentestsystem.authoring.testauth.service.SegmentService;
import org.opentestsystem.authoring.testauth.service.SubjectService;
import org.opentestsystem.authoring.testspecbank.client.TestSpecBankClientInterface;
import org.opentestsystem.authoring.testspecbank.client.domain.TestSpecBankClientObj;
import org.opentestsystem.shared.docs.annotation.ApiDocExample;
import org.opentestsystem.shared.progman.client.ProgManClient;
import org.opentestsystem.shared.progman.client.domain.Tenant;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.mongodb.DBObject;
import com.mongodb.gridfs.GridFSFile;

public class FileGroupControllerTest extends AbstractRestEmbeddedMongoTest {

    private static final String BASE_URL = "/fileGroup";

    @Autowired
    private FileGroupService fileGroupService;

    @Autowired
    private PublicationService publicationService;

    @Autowired
    private SubjectService subjectService;

    @Autowired
    private AssessmentService assessmentService;
    @Autowired
    private AssessmentRepository assessmentRepository;

    @Autowired
    private PublishingRecordService publishingRecordService;

    @Autowired
    private SegmentService segmentService;

    @Autowired
    private BlueprintElementService blueprintElementService;

    @Autowired
    private ItemService itemService;

    @Autowired
    private ItemSelectionAlgorithmService itemSelectionAlgorithmService;

    @Autowired
    private ApprovalService approvalService;

    @Autowired
    private PublishingRecordRepository publishingRecordRepository;

    @Autowired
    private transient GridFsRepository gridFsRepository;

    @Autowired
    private ProgManClient progManClient;

    @Autowired
    private TestSpecBankClientInterface testSpecBankClient;

    private Assessment savedAssessment;
    private ItemSelectionAlgorithm savedAlgorithm;
    private final Tenant tenant1 = buildTenant("id1", "tenant1", "description1");

    private FileGroup savedSimulationFileGroup;
    private GridFSFile gridFsFile1;
    private GridFSFile gridFsFile2;
    private GridFSFile gridFsFile3;
    private List<GridFile> gridFiles;
    private SimulationRecord savedSimulationRecord;
    private Map<String, Object> simulationRecordParams;
    private PsychometricRecord savedPsychometricRecord;
    private Map<String, Object> psychometricRecordParams;

    @ApiDocExample(rank = -1)
    @Before
    public void setupTestData() {
        final Subject savedSubject = this.subjectService.saveSubject(DomainFactory.manufactureValidSubject("ABB"));
        final Publication savedPublication = this.publicationService.savePublication(DomainFactory.manufactureValidPublication(savedSubject.getTenantId(), ImmutableSet.of(savedSubject)));
        this.savedAssessment = this.assessmentService.saveAssessment(DomainFactory.manufactureValidAssessment(savedSubject, savedPublication));
        this.savedSimulationRecord = this.fileGroupService.saveSimulationRecord(DomainFactory.manufactureValidSimulationRecord(this.savedAssessment.getId()));

        final ItemSelectionAlgorithm algorithm = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.BOOLEAN);
        algorithm.setItemSelectionAlgorithmType(ItemSelectionAlgorithmType.ADAPTIVE);
        this.savedAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithm);

        this.gridFiles = Lists.newArrayList();
        final String sampleGridFile1 = "sample grid file data 1";
        final String sampleGridFile2 = "sample grid file data 2";
        final String sampleGridFile3 = "sample grid file data 3";
        final DBObject metadata = null;
        this.gridFsFile1 = this.gridFsRepository.save(sampleGridFile1.getBytes(Charset.forName("UTF-8")), "Grid File Name 1", "plain/text", metadata);
        this.gridFsFile2 = this.gridFsRepository.save(sampleGridFile2.getBytes(Charset.forName("UTF-8")), "Grid File Name 2", "plain/text", metadata);
        this.gridFsFile3 = this.gridFsRepository.save(sampleGridFile3.getBytes(Charset.forName("UTF-8")), "Grid File Name 3", "plain/text", metadata);
        this.gridFiles.add(getGridFile(this.gridFsFile1));
        this.gridFiles.add(getGridFile(this.gridFsFile2));
        this.gridFiles.add(getGridFile(this.gridFsFile3));

        this.savedSimulationFileGroup = this.fileGroupService.saveFileGroup(DomainFactory.manufactureValidSimulationFileGroup(this.savedSimulationRecord.getId(), this.gridFiles));

        this.simulationRecordParams = buildSimulationRecordMap();
        this.savedSimulationRecord = callPOSTRestService(BASE_URL + "/simulationRecord", this.simulationRecordParams, SimulationRecord.class);
    }

    @ApiDocExample(rank = 1)
    @Test
    public void saveSimulationFileGroup() throws InterruptedException {
        assertThat(this.mongoTemplate.findAll(FileGroup.class).size(), is(equalTo(1)));
        assertThat(this.savedSimulationFileGroup, is(notNullValue()));
    }

    @ApiDocExample(rank = 2)
    @Test
    public void updateFileGroup() throws InterruptedException {
        assertThat(this.savedSimulationFileGroup, is(notNullValue()));
        this.savedSimulationFileGroup.setName("New File Group Name");
        final FileGroup updatedFileGroup = callPUTRestService(BASE_URL + "/" + this.savedSimulationFileGroup.getId(), buildParamObject(this.savedSimulationFileGroup), FileGroup.class);
        assertThat(updatedFileGroup, is(notNullValue()));
        assertThat(updatedFileGroup.getName(), is(equalTo("New File Group Name")));
    }

    @ApiDocExample(rank = 3)
    @Test
    public void testRemoveFileGroup() throws InterruptedException {
        final Map<String, Object> fileGroup = buildSimulationFileGroupMap(2);
        final FileGroup savedFileGroup2 = callPOSTRestService(BASE_URL, fileGroup, FileGroup.class);
        assertThat(savedFileGroup2, is(notNullValue()));
        assertThat(this.mongoTemplate.findAll(FileGroup.class).size(), is(equalTo(2)));

        callDeleteRestService(BASE_URL + "/" + this.savedSimulationFileGroup.getId());

        final FileGroup fetchedFileGroup = callGETRestService(BASE_URL + "/" + this.savedSimulationFileGroup.getId(), FileGroup.class);
        assertThat(fetchedFileGroup, is(nullValue()));

        final FileGroup fetchedFileGroup2 = callGETRestService(BASE_URL + "/" + savedFileGroup2.getId(), FileGroup.class);
        assertThat(fetchedFileGroup2, is(notNullValue()));
        assertThat(fetchedFileGroup2.getName(), is("name 2"));
    }

    @ApiDocExample(rank = 4)
    @Test
    public void findFileGroup() throws InterruptedException {
        final FileGroup fetchedFileGroup = callGETRestService(BASE_URL + "/" + this.savedSimulationFileGroup.getId(), FileGroup.class);
        assertThat(fetchedFileGroup, is(notNullValue()));
    }

    @ApiDocExample(rank = 5)
    @SuppressWarnings("unchecked")
    @Test
    public void findFileGroups() throws InterruptedException {
        final SearchResponse<FileGroup> response = callGETRestService(BASE_URL, SearchResponse.class);
        assertThat(response.getSearchResults().size(), is(1));
    }

    @ApiDocExample(rank = 6)
    @Test
    public void findSimulationRecordByAssessmentId() throws InterruptedException {
        final SimulationRecord fetchedSimulationRecord = callGETRestService(BASE_URL + "/simulationRecord/" + this.savedAssessment.getId(), SimulationRecord.class);
        assertThat(fetchedSimulationRecord, is(notNullValue()));
    }

    @ApiDocExample(rank = 7)
    @Test
    public void saveSimulationRecord() throws InterruptedException {
        callPOSTRestService(BASE_URL + "/simulationRecord", buildSimulationRecordMap(), SimulationRecord.class);
        assertThat(this.mongoTemplate.findAll(SimulationRecord.class).size(), is(equalTo(4)));
    }

    @ApiDocExample(rank = 8)
    @Test
    public void updateSimulationRecord() throws InterruptedException {
        this.simulationRecordParams.put("id", this.savedSimulationRecord.getId());
        final DateTime newUpdateTime = new DateTime();
        this.simulationRecordParams.put("lastUploadDate", newUpdateTime);
        final SimulationRecord updatedSimulationRecord = callPUTRestService(BASE_URL + "/simulationRecord/" + this.savedSimulationRecord.getId(), this.simulationRecordParams, SimulationRecord.class);
        assertThat(updatedSimulationRecord, is(notNullValue()));
        assertThat(updatedSimulationRecord, is(not(this.savedSimulationRecord)));
    }

    @ApiDocExample(rank = 9)
    @Test
    public void findPsychometricRecordByPublishingRecordId() throws InterruptedException {
        when(this.progManClient.getTenantById(Mockito.anyString())).thenReturn(this.tenant1);
        when(this.testSpecBankClient.publishTestSpecification((TestSpecBankClientObj) Mockito.anyObject())).thenReturn(new TestSpecBankClientObj());

        final PublishingRecord savedPublishingRecord = this.publishingRecordService.retrieveCurrentPublishingRecord(this.savedAssessment.getId());
        saveGoodMinimalSegmentAndItemData();
        saveGoodMinimalBlueprintData();

        changePublishingStatusToPublished(this.publishingRecordService.retrievePublishingRecordWithAllowablePurposes(this.savedAssessment.getId()));
        callPOSTRestService(BASE_URL + "/psychometricRecord", buildPsychometricRecordMap(savedPublishingRecord.getId()), PsychometricRecord.class);

        final PsychometricRecord fetchedPsychometricRecord = callGETRestService(BASE_URL + "/psychometricRecord/" + savedPublishingRecord.getId(), PsychometricRecord.class);
        assertThat(fetchedPsychometricRecord, is(notNullValue()));
    }

    @ApiDocExample(rank = 10)
    @Test
    public void savePsychometricRecord() throws InterruptedException {
        when(this.progManClient.getTenantById(Mockito.anyString())).thenReturn(this.tenant1);
        when(this.testSpecBankClient.publishTestSpecification((TestSpecBankClientObj) Mockito.anyObject())).thenReturn(new TestSpecBankClientObj());

        saveGoodMinimalSegmentAndItemData();
        saveGoodMinimalBlueprintData();

        changePublishingStatusToPublished(this.publishingRecordService.retrievePublishingRecordWithAllowablePurposes(this.savedAssessment.getId()));

        assertThat(this.mongoTemplate.findAll(PsychometricRecord.class).size(), is(equalTo(1)));
    }

    @ApiDocExample(rank = 11)
    @Test
    public void updatePsychometricRecord() throws InterruptedException {
        when(this.progManClient.getTenantById(Mockito.anyString())).thenReturn(this.tenant1);
        when(this.testSpecBankClient.publishTestSpecification((TestSpecBankClientObj) Mockito.anyObject())).thenReturn(new TestSpecBankClientObj());

        final PublishingRecord savedPublishingRecord = this.publishingRecordService.retrieveCurrentPublishingRecord(this.savedAssessment.getId());
        saveGoodMinimalSegmentAndItemData();
        saveGoodMinimalBlueprintData();

        changePublishingStatusToPublished(this.publishingRecordService.retrievePublishingRecordWithAllowablePurposes(this.savedAssessment.getId()));

        this.psychometricRecordParams = buildPsychometricRecordMap(savedPublishingRecord.getId());
        this.savedPsychometricRecord = callPOSTRestService(BASE_URL + "/psychometricRecord", this.psychometricRecordParams, PsychometricRecord.class);

        this.psychometricRecordParams.put("id", this.savedPsychometricRecord.getId());
        final DateTime newUpdateTime = new DateTime();
        this.psychometricRecordParams.put("lastUploadDate", newUpdateTime);
        final PsychometricRecord updatedPsychometricRecord = callPUTRestService(BASE_URL + "/psychometricRecord/" + this.savedPsychometricRecord.getId(), this.psychometricRecordParams,
                PsychometricRecord.class);
        assertThat(updatedPsychometricRecord, is(notNullValue()));
        assertThat(updatedPsychometricRecord, is(not(this.savedPsychometricRecord)));
    }

    @ApiDocExample(rank = 12)
    @SuppressWarnings("unchecked")
    @Test
    public void getPsychometricRecordVersionsTest() throws InterruptedException {
        when(this.progManClient.getTenantById(Mockito.anyString())).thenReturn(this.tenant1);
        when(this.testSpecBankClient.publishTestSpecification((TestSpecBankClientObj) Mockito.anyObject())).thenReturn(new TestSpecBankClientObj());

        saveGoodMinimalSegmentAndItemData();
        saveGoodMinimalBlueprintData();

        PublishingRecord updatedPublishingRecord = changePublishingStatusToPublished(this.publishingRecordService.retrievePublishingRecordWithAllowablePurposes(this.savedAssessment.getId()));
        this.publishingRecordService.savePublishingRecord(updatedPublishingRecord, false);

        updatedPublishingRecord = changePublishingStatusToPublished(this.publishingRecordService.retrievePublishingRecordWithAllowablePurposes(this.savedAssessment.getId()));
        this.publishingRecordService.savePublishingRecord(updatedPublishingRecord, false);

        changePublishingStatusToPublished(this.publishingRecordService.retrievePublishingRecordWithAllowablePurposes(this.savedAssessment.getId()));

        final List<String> fetchedPsychometricRecordVersions = callGETRestService(BASE_URL + "/psychometricRecordVersions/" + this.savedAssessment.getId(), List.class);
        assertThat(fetchedPsychometricRecordVersions, is(notNullValue()));
        assertThat(fetchedPsychometricRecordVersions.size(), is(3));
    }

    @ApiDocExample(rank = 13)
    @SuppressWarnings("unchecked")
    @Test
    public void searchPsychometricRecordFileGroupsByVersionTest() throws InterruptedException {
        when(this.progManClient.getTenantById(Mockito.anyString())).thenReturn(this.tenant1);
        when(this.testSpecBankClient.publishTestSpecification((TestSpecBankClientObj) Mockito.anyObject())).thenReturn(new TestSpecBankClientObj());

        saveGoodMinimalSegmentAndItemData();
        saveGoodMinimalBlueprintData();

        final PublishingRecord updatedPublishingRecord = changePublishingStatusToPublished(this.publishingRecordService.retrievePublishingRecordWithAllowablePurposes(this.savedAssessment.getId()));

        final Map<String, String> params = Maps.newHashMap();
        params.put("assessmentId", this.savedAssessment.getId());
        params.put("version", "1.0");
        SearchResponse<FileGroup> response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getSearchResults().size(), is(1));
        assertThat(this.mongoTemplate.findAll(PsychometricRecord.class).size(), is(equalTo(1)));

        this.publishingRecordService.savePublishingRecord(updatedPublishingRecord, false);
        changePublishingStatusToPublished(this.publishingRecordService.retrievePublishingRecordWithAllowablePurposes(this.savedAssessment.getId()));

        params.clear();
        params.put("assessmentId", this.savedAssessment.getId());
        params.put("version", "1.1");
        response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getSearchResults().size(), is(1));
        assertThat(this.mongoTemplate.findAll(PsychometricRecord.class).size(), is(equalTo(2)));

        params.clear();
        params.put("assessmentId", this.savedAssessment.getId());
        params.put("version", "1.2");
        response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getSearchResults().size(), is(1));
        assertThat(this.mongoTemplate.findAll(PsychometricRecord.class).size(), is(equalTo(2)));
    }

    @ApiDocExample(rank = -1)
    @SuppressWarnings("unchecked")
    @Test
    public void searchFileGroups() {
        this.savedAssessment.setLocked(true);
        this.savedAssessment = this.assessmentRepository.save(this.savedAssessment);

        for (int i = 2; i < 11; i++) {
            callPOSTRestService(BASE_URL, buildSimulationFileGroupMap(i), FileGroup.class);
        }
        assertThat(this.mongoTemplate.findAll(FileGroup.class).size(), is(10));

        final Map<String, String> params = Maps.newHashMap();
        params.put("name", "name 10");

        SearchResponse<FileGroup> response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getReturnCount(), is(1));
        assertThat(response.getSearchResults().size(), is(1));

        params.clear();
        params.put("name", "name 3");
        response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getReturnCount(), is(1));
        assertThat(response.getSearchResults().size(), is(1));

        params.clear();
        params.put("name", "name 42");
        response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getReturnCount(), is(0));
        assertThat(response.getSearchResults().size(), is(0));

        params.clear();
        params.put("simulationRecordId", this.savedSimulationRecord.getId());
        response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getReturnCount(), is(9));
        assertThat(response.getSearchResults().size(), is(9));
    }

    private Map<String, Object> buildSimulationFileGroupMap(final int uniqueId) {
        final FileGroup fileGroup = DomainFactory.manufactureValidSimulationFileGroup(this.savedAssessment.getId(), this.gridFiles);
        fileGroup.setSimulationRecordId(this.savedSimulationRecord.getId());
        fileGroup.setName("name " + uniqueId);
        fileGroup.setCreateDate(new DateTime());
        fileGroup.setGridFiles(this.gridFiles);
        return buildParamObject(fileGroup);
    }

    private Map<String, Object> buildSimulationRecordMap() {
        final SimulationRecord simulationRecord = PODAM_FACTORY.manufacturePojo(SimulationRecord.class);
        simulationRecord.setId(null);
        simulationRecord.setAssessmentId(this.savedAssessment.getId());
        simulationRecord.setVersion("1.0");
        simulationRecord.setLastUploadDate(new DateTime());
        return buildParamObject(simulationRecord);
    }

    private Map<String, Object> buildPsychometricRecordMap(final String publishingRecordId) {
        final PsychometricRecord psychometricRecord = PODAM_FACTORY.manufacturePojo(PsychometricRecord.class);
        psychometricRecord.setId(null);
        psychometricRecord.setPublishingRecordId(publishingRecordId);
        psychometricRecord.setVersion("1.0");
        psychometricRecord.setLastUploadDate(new DateTime());
        return buildParamObject(psychometricRecord);
    }

    private PublishingRecord changePublishingStatusToPublished(final PublishingRecord publishingRecord) {
        PublishingRecord updatedPublishingRecord = this.publishingRecordService.savePublishingRecord(publishingRecord, false);
        assertThat(updatedPublishingRecord.getPublishingStatus(), is(PublishingStatus.AWAITING_APPROVAL));
        getApprovedApprovals(updatedPublishingRecord.getId());

        // update from awaiting approval to published
        updatedPublishingRecord = this.publishingRecordService.retrieveCurrentPublishingRecord(updatedPublishingRecord.getAssessmentId());

        verify(this.progManClient, atLeast(1)).getTenantById(this.savedAssessment.getTenantId());

        if (updatedPublishingRecord.getPublishingStatus() != PUBLISHED) {
            updatedPublishingRecord.setPublishingStatus(PUBLISHED);
            updatedPublishingRecord = this.publishingRecordRepository.save(updatedPublishingRecord);
        }

        return updatedPublishingRecord;
    }

    private GridFile getGridFile(final GridFSFile gridFsFile) {
        final GridFile gridFile = new GridFile();
        gridFile.setFileName(gridFsFile.getFilename());
        gridFile.setGridFsId(gridFsFile.getId().toString());
        return gridFile;
    }

    private void saveGoodMinimalSegmentAndItemData() {
        final Segment savedSegment = this.segmentService.createSegment(DomainFactory.manufactureValidSegment(this.savedAssessment.getId(), this.savedAlgorithm, 1));
        final Item item = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        item.setId(null);
        final List<ItemLocation> itemLocationList = Lists.newArrayList();
        itemLocationList.add(new AdaptiveItemLocation(savedSegment.getId(), null, 0, 0));
        item.setItemLocation(itemLocationList);
        this.itemService.saveItem(item);
    }

    private void saveGoodMinimalBlueprintData() {
        final List<Segment> segments = segmentService.findSegmentListByAssessmentId(this.savedAssessment.getId());
        segmentService.loadReferenceData(segments);
        final BlueprintElement bpe = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), segments);
        bpe.setGrade(this.savedAssessment.getGrade()[0]);
        bpe.setLevel("1");
        bpe.setStandardKey("CC-ELA-v1");
        bpe.setTextDescription("textDescription");
        bpe.setActive(true);
        this.blueprintElementService.saveBlueprintElement(null, bpe);
    }

    private List<Approval> getApprovedApprovals(final String publishingRecordId) {
        final List<Approval> initialApprovals = this.approvalService.createInitialApprovals(publishingRecordId);

        for (final Approval approval : initialApprovals) {
            approval.setStatus(ApprovalStatus.APPROVED);
            approval.setMessage("approval message");
            this.approvalService.updateApproval(approval);
        }
        return initialApprovals;
    }
}
