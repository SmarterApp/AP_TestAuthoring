/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.rest;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.MatcherAssert.assertThat;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.AdaptiveItemLocation;
import org.opentestsystem.authoring.testauth.domain.Assessment;
import org.opentestsystem.authoring.testauth.domain.DomainFactory;
import org.opentestsystem.authoring.testauth.domain.Item;
import org.opentestsystem.authoring.testauth.domain.ItemLocation;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionAlgorithm;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionPurpose;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionType;
import org.opentestsystem.authoring.testauth.domain.Publication;
import org.opentestsystem.authoring.testauth.domain.Subject;
import org.opentestsystem.authoring.testauth.service.AssessmentService;
import org.opentestsystem.authoring.testauth.service.ItemSelectionAlgorithmService;
import org.opentestsystem.authoring.testauth.service.PublicationService;
import org.opentestsystem.authoring.testauth.service.SegmentService;
import org.opentestsystem.authoring.testauth.service.SubjectService;
import org.opentestsystem.shared.docs.annotation.ApiDocExample;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.client.RestOperations;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Maps;

public class ItemControllerTest extends AbstractRestEmbeddedMongoTest {

    private static final String BASE_URL = "/item";
    private Map<String, Object> itemParams;
    private Item savedItem;
    private String savedAssessmentId;
    private String savedSegmentId;

    @Autowired
    private RestOperations restTemplate;

    @Autowired
    private SubjectService subjectService;

    @Autowired
    private PublicationService publicationService;

    @Autowired
    private AssessmentService assessmentService;

    @Autowired
    private ItemSelectionAlgorithmService itemSelectionAlgorithmService;

    @Autowired
    private SegmentService segmentService;

    @SuppressWarnings("unchecked")
    @ApiDocExample(rank = -1)
    @Before
    public void setupTestData() throws InterruptedException {
        final Subject savedSubject = this.subjectService.saveSubject(DomainFactory.manufactureValidSubject("ABB"));
        final Publication savedPublication = this.publicationService.savePublication(PODAM_FACTORY.manufacturePojo(Publication.class));
        final Assessment savedAssessment = this.assessmentService.saveAssessment(DomainFactory.manufactureValidAssessment(savedSubject, savedPublication));
        this.savedAssessmentId = savedAssessment.getId();

        final ItemSelectionAlgorithm algorithm = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.BOOLEAN);
        final ItemSelectionAlgorithm savedAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithm);
        this.segmentService.createSegment(DomainFactory.manufactureValidSegment(this.savedAssessmentId, savedAlgorithm, 1));

        final Map<String, String> requestParams = ImmutableMap.of("assessmentId", this.savedAssessmentId);
        final SearchResponse<LinkedHashMap<String, String>> segmentSearchResponse = callGETRestService("/segment" + buildQueryString(requestParams), SearchResponse.class);
        assertThat(segmentSearchResponse.getReturnCount(), is(equalTo(1)));
        assertThat(segmentSearchResponse.getSearchResults().size(), is(equalTo(1)));
        final List<LinkedHashMap<String, String>> segmentList = segmentSearchResponse.getSearchResults();
        this.savedSegmentId = segmentList.get(0).get("id");

        this.itemParams = buildItemParams(0);
        this.savedItem = callPOSTRestService(BASE_URL, this.itemParams, Item.class);
        assertThat(this.mongoTemplate.findAll(Item.class).size(), is(equalTo(1)));
        assertThat(this.savedItem, is(notNullValue()));
    }

    @ApiDocExample(rank = 1)
    @Test
    public void findItem() throws InterruptedException {
        final Item fetchedItem = callGETRestService(BASE_URL + "/" + this.savedItem.getId(), Item.class);
        assertThat(fetchedItem, is(notNullValue()));
    }

    @ApiDocExample(rank = 2)
    @SuppressWarnings("unchecked")
    @Test
    public void findItems() throws InterruptedException {
        final SearchResponse<Item> response = callGETRestService(BASE_URL, SearchResponse.class);
        assertThat(1, is(equalTo(response.getSearchResults().size())));
    }

    @ApiDocExample(rank = 3)
    @SuppressWarnings("unchecked")
    @Test
    public void searchItemBySegmentId() {
        final Map<String, String> item = Maps.newHashMap();
        item.put("assessmentId", this.savedAssessmentId);
        final SearchResponse<Item> response = callGETRestService(BASE_URL + buildQueryString(item), SearchResponse.class);
        assertThat(response.getReturnCount(), is(equalTo(1)));
        assertThat(1, is(equalTo(response.getSearchResults().size())));
    }

    @ApiDocExample(rank = 3)
    @SuppressWarnings("unchecked")
    @Test
    public void searchItemType() {
        final Map<String, String> item = Maps.newHashMap();
        item.put("interactionType", "multipleChoice");
        final SearchResponse<Item> response = callGETRestService(BASE_URL + buildQueryString(item), SearchResponse.class);
        assertThat(response.getReturnCount(), is(equalTo(1)));
        assertThat(1, is(equalTo(response.getSearchResults().size())));
    }

    @ApiDocExample(rank = 4)
    @SuppressWarnings("unchecked")
    @Test
    public void searchItemByStandardKey() {
        final Map<String, String> item = Maps.newHashMap();
        item.put("primaryStandard", "standard-key-0");
        final SearchResponse<Item> response = callGETRestService(BASE_URL + buildQueryString(item), SearchResponse.class);
        assertThat(response.getReturnCount(), is(equalTo(1)));
        assertThat(1, is(equalTo(response.getSearchResults().size())));
    }

    @ApiDocExample(rank = 5)
    @Test
    public void savedItemTest() throws InterruptedException {
        this.itemParams = buildItemParams(1);
        this.savedItem = callPOSTRestService(BASE_URL, this.itemParams, Item.class);
        assertThat(this.mongoTemplate.findAll(Item.class).size(), is(equalTo(2)));
        assertThat(this.savedItem, is(notNullValue()));
    }

    @ApiDocExample(rank = 6)
    @Test
    public void updateItem() throws InterruptedException {
        this.itemParams.put("id", this.savedItem.getId());
        this.itemParams.put("textDescription", "new textDescription");

        final ArrayList<ItemLocation> location = new ArrayList<ItemLocation>();

        this.itemParams.put("itemLocations", location);
        final Item updatedItem = callPUTRestService(BASE_URL + "/" + this.savedItem.getId(), this.itemParams, Item.class);
        assertThat(updatedItem, is(notNullValue()));
        assertThat(updatedItem.getPrimaryStandard(), is(equalTo("standard-key-0")));
    }


    @ApiDocExample(rank = -1)
    @SuppressWarnings("unchecked")
    @Test
    public void searchItems() {
        for (int i = 1; i < 11; i++) {
            callPOSTRestService(BASE_URL, buildItemParams(i), Item.class);
        }
        List<Item> items = this.mongoTemplate.findAll(Item.class);
        assertThat(items.size(), is(equalTo(11)));

        final Map<String, String> searchParams = Maps.newHashMap();

        searchParams.put("intendedGrade", "10");
        SearchResponse<Item> response = callGETRestService(BASE_URL + buildQueryString(searchParams), SearchResponse.class);
        assertThat(response.getReturnCount(), is(equalTo(1)));
        assertThat(1, is(equalTo(response.getSearchResults().size())));

        searchParams.put("intendedGrade", "3");
        response = callGETRestService(BASE_URL + buildQueryString(searchParams), SearchResponse.class);
        assertThat(response.getReturnCount(), is(equalTo(1)));
        assertThat(response.getSearchResults().size(), is(equalTo(1)));

        searchParams.put("intendedGrade", "invalid");
        response = callGETRestService(BASE_URL + buildQueryString(searchParams), SearchResponse.class);
        assertThat(response.getReturnCount(), is(equalTo(0)));
        assertThat(response.getSearchResults().size(), is(equalTo(0)));

        searchParams.put("intendedGrade", "");
        // search pageable default size is 10
        response = callGETRestService(BASE_URL + buildQueryString(searchParams), SearchResponse.class);
        assertThat(response.getReturnCount(), is(equalTo(10)));
        assertThat(response.getSearchResults().size(), is(equalTo(10)));

        searchParams.clear();
        // search pageable default size is 10
        response = callGETRestService(BASE_URL + buildQueryString(searchParams), SearchResponse.class);
        assertThat(response.getReturnCount(), is(equalTo(10)));
        assertThat(response.getSearchResults().size(), is(equalTo(10)));
    }

    private Map<String, Object> buildItemParams(final int uniqueId) {
        final Item i = new Item();
        i.setAssessmentId(this.savedAssessmentId);
        i.setVersion(Integer.toString(uniqueId));
        i.setIntendedGrade(Integer.toString(uniqueId));
        i.setTibIdentifier("tibIdentifier" + uniqueId);
        i.setPrimaryStandard("standard-key-" + uniqueId);
        i.setStatus("status-" + uniqueId);
        i.setInteractionType("multipleChoice");

        HashMap<String, Object> metadata = new HashMap<String, Object>();
        metadata.put("intendedGrade", Integer.toString(uniqueId));
        i.setAllIncludedMetadata(metadata);

        final AdaptiveItemLocation ail = new AdaptiveItemLocation();
        ail.setSegmentId(this.savedSegmentId);
        ail.setItemGroupId(Item.NO_GROUP_KEY);
        ail.setFormPartitionId(null);

        i.addItemLocation(ail);
        return buildParamObject(i);
    }
}
