/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.integration;

import static org.hamcrest.CoreMatchers.containsString;
import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.Assert.fail;

import java.util.List;

import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.DomainFactory;
import org.opentestsystem.authoring.testauth.domain.Form;
import org.opentestsystem.authoring.testauth.persistence.FormRepository;
import org.opentestsystem.authoring.testauth.rest.AbstractRestEmbeddedMongoTest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DuplicateKeyException;

public class FormRepositoryTest extends AbstractRestEmbeddedMongoTest {

    @Autowired
    private FormRepository formRepository;

    @Test
    public void saveFormTest() {
        final Form form = manufactureValidFormPojo("1");
        final Form savedForm = this.formRepository.save(form);
        assertThat(savedForm, is(notNullValue()));
        assertThat(savedForm.getId(), is(notNullValue()));
    }

    @Test
    public void saveDuplicateFormTest() {
        final Form form = manufactureValidFormPojo("1");
        this.formRepository.save(form);

        final Form duplicateForm = manufactureValidFormPojo("1");
        try {
            this.formRepository.save(duplicateForm);
            fail("should have thrown exception");
        } catch (final DuplicateKeyException e) {
            assertThat(e.getMessage(), containsString("form_indx"));
        }
    }

    @Test
    public void findFormTest() {
        final Form form = manufactureValidFormPojo("1");
        final Form savedForm = this.formRepository.save(form);

        final Form foundForm = this.formRepository.findOne(savedForm.getId());
        assertThat(savedForm.getId(), is(equalTo(foundForm.getId())));
        assertThat(savedForm, is(equalTo(foundForm)));
    }

    @Test
    public void findByAssessmentIdTest() {
        final Form form = manufactureValidFormPojo("1", "name", "language");
        final Form savedForm1 = this.formRepository.save(form);

        final Form form2 = manufactureValidFormPojo("1", "name2", "language2");
        final Form savedForm2 = this.formRepository.save(form2);

        final List<Form> retrievedForms = this.formRepository.findAllByAssessmentId("1");
        assertThat(retrievedForms.get(0), is(equalTo(savedForm1)));
        assertThat(retrievedForms.get(1), is(equalTo(savedForm2)));
    }

    @Test
    public void removeFormTest() {
        final Form form = manufactureValidFormPojo("1");
        final Form savedForm = this.formRepository.save(form);

        this.formRepository.delete(form);
        final Form foundForm = this.formRepository.findOne(savedForm.getId());
        assertThat(foundForm, is(nullValue()));
    }

    private Form manufactureValidFormPojo(final String assessmentId) {
        return manufactureValidFormPojo(assessmentId, "item1", "item2");
    }

    private Form manufactureValidFormPojo(final String assessmentId, final String name, final String language) {
        return DomainFactory.manufactureValidFormPojo(assessmentId, name, language);
    }
}
