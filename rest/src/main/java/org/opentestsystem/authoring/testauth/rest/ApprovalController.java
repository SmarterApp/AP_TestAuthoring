/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.rest;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.opentestsystem.authoring.testauth.domain.Approval;
import org.opentestsystem.authoring.testauth.domain.ApprovalStatus;
import org.opentestsystem.authoring.testauth.service.ApprovalService;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.access.annotation.Secured;
import org.springframework.security.access.prepost.PostAuthorize;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import com.google.common.collect.Lists;

@Controller
public class ApprovalController {

    @Autowired
    private ApprovalService approvalService;

    @RequestMapping(value = "/approval/{approvalId}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Approval Read" })
    @PostAuthorize("hasPermission(returnObject, 'ROLE_Approval Read')")
    @ResponseBody
    public Approval findApprovalById(@PathVariable final String approvalId) {
        return this.approvalService.getApproval(approvalId);
    }

    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "/approval/{approvalId}", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Approval Modify" })
    @PreAuthorize("hasPermission(#assessment, 'ROLE_Approval Modify')")
    @ResponseBody
    public Approval updateApproval(@RequestBody @Valid final Approval approval, final HttpServletResponse response) {
        return this.approvalService.updateApproval(approval);
    }

    @RequestMapping(value = "/approval", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Approval Read" })
    @PostAuthorize("hasPermission(returnObject, 'ROLE_Approval Read')")
    @ResponseBody
    public SearchResponse<Approval> searchApproval(final HttpServletRequest request, final HttpServletResponse response) {
        return this.approvalService.searchApprovals(request.getParameterMap());
    }

    @ResponseStatus(HttpStatus.NO_CONTENT)
    @RequestMapping(value = "/approval/{assessmentId}", method = RequestMethod.DELETE)
    @Secured({ "ROLE_Approval Modify" })
    @PreAuthorize("hasPermission(#assessment, 'ROLE_Approval Modify')")
    public void removeApprovaByAssessmentId(@PathVariable final String assessmentId) {
        this.approvalService.removeByAssessmentId(assessmentId);
    }

    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "/approval/current/{publishingRecordId}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Approval Modify" })
    @PreAuthorize("hasPermission(#publishingRecordId, 'publishingRecord', 'ROLE_Test Modify')")
    @ResponseBody
    public List<Approval> findLatestApprovalsByPublishingRecordId(@PathVariable final String publishingRecordId) {
        return this.approvalService.retrieveLatestApprovals(publishingRecordId);
    }

    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "/approval/isAdminUser", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Approval Read" })
    // NOTE: Intentionally no @Preauthorize, this is a non tenanted endpoint
    @ResponseBody
    public boolean isAdminUser() {
        return this.approvalService.isAdminUser();
    }

    @RequestMapping(value = "/approval/approvalStatuses", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Approval Read" })
    // NOTE: Intentionally no @Preauthorize, this is a non tenanted endpoint
    @ResponseBody
    public List<ApprovalStatus> getApprovalStatuses() {
        return Lists.newArrayList(ApprovalStatus.values());
    }
}
