/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.domain;

import java.io.Serializable;

import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;
import org.hibernate.validator.constraints.NotBlank;
import org.opentestsystem.authoring.testauth.validation.AbstractDomainValidator;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

@JsonIgnoreProperties(ignoreUnknown = true)
public class ComputationRuleParameter implements Serializable {
    private static final long serialVersionUID = 1693202958911228485L;

    private static final int SIXTY = 60;
    private static final int NON_MAGIC_2K = 2000;

    @NotBlank(message = "computationRule.parameters.parameterName.required")
    @Size(max = SIXTY, message = "computationRule.parameters.parameterName.length")
    private String parameterName;
    @NotNull(message = "computationRule.parameters.computationRuleType.required")
    private ComputationRuleType computationRuleType;
    @Size(max = NON_MAGIC_2K, message = "computationRule.parameters.description.length")
    private String description;
    private String defaultValue;
    @Size(max = AbstractDomainValidator.MAX_PARSEABLE_LENGTH, message = "computationRule.parameters.minimumValue.length")
    private String minimumValue;
    @Size(max = AbstractDomainValidator.MAX_PARSEABLE_LENGTH, message = "computationRule.parameters.maximumValue.length")
    private String maximumValue;
    @NotNull(message = "computationRule.parameters.computationRuleMultiplicityType.required")
    private ComputationRuleMultiplicityType computationRuleMultiplicityType;
    private DictionaryIndexType dictionaryIndexType;
    @Min(value = 1, message = "computationRule.parameters.position.min")
    private int position;

    public String getParameterName() {
        return this.parameterName;
    }

    public void setParameterName(final String aParameterName) {
        this.parameterName = aParameterName;
    }

    public ComputationRuleType getComputationRuleType() {
        return this.computationRuleType;
    }

    public void setComputationRuleType(final ComputationRuleType aComputationRuleType) {
        this.computationRuleType = aComputationRuleType;
    }

    public String getDescription() {
        return this.description;
    }

    public void setDescription(final String aDescription) {
        this.description = aDescription;
    }

    public String getDefaultValue() {
        return this.defaultValue;
    }

    public void setDefaultValue(final String aDefaultValue) {
        this.defaultValue = aDefaultValue;
    }

    public String getMinimumValue() {
        return this.minimumValue;
    }

    public void setMinimumValue(final String aMinimumValue) {
        this.minimumValue = aMinimumValue;
    }

    public String getMaximumValue() {
        return this.maximumValue;
    }

    public void setMaximumValue(final String aMaximumValue) {
        this.maximumValue = aMaximumValue;
    }

    public ComputationRuleMultiplicityType getComputationRuleMultiplicityType() {
        return this.computationRuleMultiplicityType;
    }

    public void setComputationRuleMultiplicityType(final ComputationRuleMultiplicityType aComputationRuleMultiplicityType) {
        if (aComputationRuleMultiplicityType == ComputationRuleMultiplicityType.SCALAR) {
            this.dictionaryIndexType = null;
        }
        this.computationRuleMultiplicityType = aComputationRuleMultiplicityType;
    }

    public DictionaryIndexType getDictionaryIndexType() {
        return this.dictionaryIndexType;
    }

    public void setDictionaryIndexType(final DictionaryIndexType aDictionaryIndexType) {
        this.dictionaryIndexType = aDictionaryIndexType;
    }

    public int getPosition() {
        return this.position;
    }

    public void setPosition(final int aPosition) {
        this.position = aPosition;
    }

    @Override
    public boolean equals(final Object obj) {
        return EqualsBuilder.reflectionEquals(this, obj);
    }

    @Override
    public String toString() {
        return ToStringBuilder.reflectionToString(this, ToStringStyle.SHORT_PREFIX_STYLE);
    }

    @Override
    public int hashCode() {
        return HashCodeBuilder.reflectionHashCode(this);
    }
}
