/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.rest;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.MatcherAssert.assertThat;

import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.Assessment;
import org.opentestsystem.authoring.testauth.domain.DomainFactory;
import org.opentestsystem.authoring.testauth.domain.ItemMetadataConfig;
import org.opentestsystem.authoring.testauth.domain.Publication;
import org.opentestsystem.authoring.testauth.domain.Subject;
import org.opentestsystem.authoring.testauth.service.AssessmentService;
import org.opentestsystem.authoring.testauth.service.PublicationService;
import org.opentestsystem.authoring.testauth.service.SubjectService;
import org.opentestsystem.shared.docs.annotation.ApiDocExample;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.Sets;

public class ItemMetadataConfigControllerTest extends AbstractRestEmbeddedMongoTest {

    private static final String BASE_URL = "/itemMetadataConfig";

    @Autowired
    private PublicationService publicationService;

    @Autowired
    private SubjectService subjectService;

    @Autowired
    private AssessmentService assessmentService;

    private Assessment savedAssessment;

    @ApiDocExample(rank = -1)
    @Before
    public void setupTestData() {
        final Subject savedSubject = this.subjectService.saveSubject(DomainFactory.manufactureValidSubject("eng"));
        final Publication savedPublication = this.publicationService.savePublication(PODAM_FACTORY.manufacturePojo(Publication.class));
        this.savedAssessment = this.assessmentService.saveAssessment(DomainFactory.manufactureValidAssessment(savedSubject, savedPublication));
    }

    @ApiDocExample(rank = 1)
    @Test
    public void saveItemMetadataConfig() throws InterruptedException {
        final ItemMetadataConfig savedItemMetadataConfig = callPOSTRestService(BASE_URL, buildParamObject(buildItemMetadataConfigMap()), ItemMetadataConfig.class);
        final ItemMetadataConfig retrievedItemMetadataConfig = this.mongoTemplate.findById(savedItemMetadataConfig.getId(), ItemMetadataConfig.class);

        assertThat(retrievedItemMetadataConfig, is(notNullValue()));
        assertThat(retrievedItemMetadataConfig.getItemMetadataReckonSet().iterator().next(), is(equalTo(savedItemMetadataConfig.getItemMetadataReckonSet().iterator().next())));
    }

    @ApiDocExample(rank = 2)
    @Test
    public void updateItemMetadataConfig() throws InterruptedException {
        final ItemMetadataConfig savedItemMetadataConfig = callPOSTRestService(BASE_URL, buildParamObject(buildItemMetadataConfigMap()), ItemMetadataConfig.class);
        assertThat(savedItemMetadataConfig, is(notNullValue()));

        savedItemMetadataConfig.setItemMetadataReckonSet(Sets.newHashSet("new-metadata-field"));
        final ItemMetadataConfig updatedItemMetadataConfig = callPUTRestService(BASE_URL + "/" + savedItemMetadataConfig.getId(), buildParamObject(savedItemMetadataConfig),
                ItemMetadataConfig.class);

        assertThat(updatedItemMetadataConfig, is(notNullValue()));
        assertThat(updatedItemMetadataConfig.getItemMetadataReckonSet().iterator().next(), is(equalTo("new-metadata-field")));
    }

    @ApiDocExample(rank = 3)
    @Test
    public void findItemMetadataConfigByAssessmentId() throws InterruptedException {
        final ItemMetadataConfig savedItemMetadataConfig1 = callPOSTRestService(BASE_URL, buildParamObject(buildItemMetadataConfigMap()), ItemMetadataConfig.class);

        final ItemMetadataConfig fetchedItemMetadataConfig = callGETRestService(BASE_URL + "/assessmentId/" + savedItemMetadataConfig1.getAssessmentId(), ItemMetadataConfig.class);
        assertThat(fetchedItemMetadataConfig, is(notNullValue()));
    }

    private Map<String, Object> buildItemMetadataConfigMap() {
        final ItemMetadataConfig itemMetadataConfig = DomainFactory.manufactureValidItemMetadataConfig(this.savedAssessment.getId(), "itemMetadataField1", "itemMetadataField2");
        return buildParamObject(itemMetadataConfig);
    }

}
