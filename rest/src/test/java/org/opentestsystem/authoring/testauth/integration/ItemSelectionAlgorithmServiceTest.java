/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.integration;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.Assert.fail;

import java.util.Map;

import javax.validation.ConstraintViolationException;

import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.DomainFactory;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionAlgorithm;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionAlgorithmParameter;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionAlgorithmType;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionParameterElement;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionPurpose;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionType;
import org.opentestsystem.authoring.testauth.rest.AbstractRestEmbeddedMongoTest;
import org.opentestsystem.authoring.testauth.service.ItemSelectionAlgorithmService;
import org.opentestsystem.shared.exception.LocalizedException;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;

public class ItemSelectionAlgorithmServiceTest extends AbstractRestEmbeddedMongoTest {

    @Autowired
    private ItemSelectionAlgorithmService itemSelectionAlgorithmService;

    @Test
    public void saveNewItemSelectionAlgorithmTest() {
        final ItemSelectionAlgorithm itemSelectionAlgorithmToSave = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.BOOLEAN);
        final ItemSelectionAlgorithm savedItemSelectionAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(itemSelectionAlgorithmToSave);
        assertThat(savedItemSelectionAlgorithm, is(notNullValue()));
        final ItemSelectionAlgorithm retrievedItemSelectionAlgorithm = this.itemSelectionAlgorithmService.getItemSelectionAlgorithm(savedItemSelectionAlgorithm.getId());
        assertThat(retrievedItemSelectionAlgorithm, is(notNullValue()));
    }

    @Test
    public void saveExistingItemSelectionAlgorithmTest() {
        final ItemSelectionAlgorithm itemSelectionAlgorithmToSave = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.BOOLEAN);
        itemSelectionAlgorithmToSave.setId(null);
        final ItemSelectionAlgorithm savedItemSelectionAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(itemSelectionAlgorithmToSave);
        assertThat(savedItemSelectionAlgorithm, is(notNullValue()));
        final ItemSelectionAlgorithm retrievedItemSelectionAlgorithm = this.itemSelectionAlgorithmService.getItemSelectionAlgorithm(savedItemSelectionAlgorithm.getId());
        assertThat(retrievedItemSelectionAlgorithm, is(notNullValue()));
        retrievedItemSelectionAlgorithm.setItemSelectionAlgorithmType(ItemSelectionAlgorithmType.FIXEDFORM);
        final ItemSelectionAlgorithm resavedItemSelectionAlgorithm = this.itemSelectionAlgorithmService.updateItemSelectionAlgorithm(retrievedItemSelectionAlgorithm);
        assertThat(resavedItemSelectionAlgorithm, is(notNullValue()));
        assertThat(resavedItemSelectionAlgorithm.getItemSelectionAlgorithmType(), is(equalTo(ItemSelectionAlgorithmType.FIXEDFORM)));
    }

    @Test
    public void saveNonUniqueItemSelectionAlgorithmTest() {
        final ItemSelectionAlgorithm itemSelectionAlgorithmToSave = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.BOOLEAN);
        itemSelectionAlgorithmToSave.setId(null);
        final ItemSelectionAlgorithm savedItemSelectionAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(itemSelectionAlgorithmToSave);
        assertThat(savedItemSelectionAlgorithm, is(notNullValue()));

        final ItemSelectionAlgorithm newItemSelectionAlgorithm = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.BOOLEAN);
        newItemSelectionAlgorithm.setName(savedItemSelectionAlgorithm.getName());
        newItemSelectionAlgorithm.setVersion(savedItemSelectionAlgorithm.getVersion());

        try {
            this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(newItemSelectionAlgorithm);
            fail("should have thrown exception");
        } catch (final LocalizedException e) {
            assertThat(e.getMessage(), is("itemSelectionAlgorithm.already.exists"));
        }
    }

    @Test
    public void saveItemSelectionAlgorithmWithMissingFieldsTest() {
        final ItemSelectionAlgorithm itemSelectionAlgorithmToSave = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.BOOLEAN);
        itemSelectionAlgorithmToSave.setId(null);
        itemSelectionAlgorithmToSave.setName(null); // NotBlank
        itemSelectionAlgorithmToSave.setVersion(""); // NotBlank
        itemSelectionAlgorithmToSave.setItemSelectionAlgorithmType(null); // NotNull
        try {
            this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(itemSelectionAlgorithmToSave);
            fail("should have thrown exception");
        } catch (final ConstraintViolationException e) {
            assertThat(e.getConstraintViolations().size(), is(3));
            assertThat(getConstraintViolation(e, "NotBlank").size(), is(2));
            assertThat(getConstraintViolation(e, "NotNull").size(), is(1));
            assertThat(getConstraintViolation(e, "Size").size(), is(0));
        }
    }

    @Test
    public void saveItemSelectionAlgorithmWithDuplicateParametersTest() {
        final ItemSelectionAlgorithm algorithmToSave = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.BOOLEAN);
        algorithmToSave.setParameters(DomainFactory.manufactureValidItemSelectionAlgorithmParameters(ItemSelectionPurpose.SCALAR, ItemSelectionType.BOOLEAN, 5));

        algorithmToSave.getParameters().get(0).setParameterName("name1");
        algorithmToSave.getParameters().get(1).setParameterName("nameX");
        algorithmToSave.getParameters().get(2).setParameterName("name1");
        algorithmToSave.getParameters().get(3).setParameterName("name2");
        algorithmToSave.getParameters().get(4).setParameterName("name2");

        try {
            this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithmToSave);
            fail("should have thrown exception");
        } catch (final ConstraintViolationException e) {
            assertThat(e.getConstraintViolations().size(), is(1));
            assertThat(getConstraintViolation(e, "itemSelectionAlgorithm.parameters.parameterName.duplicates").size(), is(1));
        }
    }

    @Test
    public void saveItemSelectionAlgorithmWithDuplicateParameterPositionTest() {
        final ItemSelectionAlgorithm algorithmToSave = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.BOOLEAN);
        algorithmToSave.setParameters(DomainFactory.manufactureValidItemSelectionAlgorithmParameters(ItemSelectionPurpose.SCALAR, ItemSelectionType.BOOLEAN, 5));
        algorithmToSave.getParameters().get(4).setPosition(4);

        try {
            this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithmToSave);
            fail("should have thrown exception");
        } catch (final ConstraintViolationException e) {
            assertThat(e.getConstraintViolations().size(), is(1));
            assertThat(getConstraintViolation(e, "itemSelectionAlgorithm.parameters.position.duplicates").size(), is(1));
        }
    }

    @Test
    public void saveItemSelectionAlgorithmWithIncompleteParametersTest() {
        final ItemSelectionAlgorithm algorithmToSave = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.BOOLEAN);
        algorithmToSave.getParameters().clear();
        algorithmToSave.getParameters().add(new ItemSelectionAlgorithmParameter());

        try {
            this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithmToSave);
            fail("should have thrown exception");
        } catch (final ConstraintViolationException e) {
            assertThat(e.getConstraintViolations().size(), is(5));
            assertThat(getConstraintViolation(e, "NotNull").size(), is(2));
            assertThat(getConstraintViolation(e, "NotBlank").size(), is(2));
            assertThat(getConstraintViolation(e, "Min").size(), is(1));
        }
    }

    @Test
    public void saveItemSelectionAlgorithmWithIncompleteIntegerParametersTest() {
        final ItemSelectionAlgorithm algorithmToSave = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.INTEGER);
        algorithmToSave.setParameters(DomainFactory.manufactureValidItemSelectionAlgorithmParameters(ItemSelectionPurpose.SCALAR, ItemSelectionType.INTEGER, 1));
        algorithmToSave.getParameters().get(0).setDefaultValue(null);
        algorithmToSave.getParameters().get(0).setMinimumValue("");
        algorithmToSave.getParameters().get(0).setMaximumValue(null);

        try {
            this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithmToSave);
            fail("should have thrown exception");
        } catch (final ConstraintViolationException e) {
            assertThat(e.getConstraintViolations().size(), is(1));
        }
    }

    @Test
    public void saveItemSelectionAlgorithmWithUnparseableIntegerParametersTest() {
        final ItemSelectionAlgorithm algorithmToSave = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.INTEGER);
        algorithmToSave.setParameters(DomainFactory.manufactureValidItemSelectionAlgorithmParameters(ItemSelectionPurpose.SCALAR, ItemSelectionType.INTEGER, 1));
        algorithmToSave.getParameters().get(0).setDefaultValue("abc");
        algorithmToSave.getParameters().get(0).setMinimumValue("11.45");
        algorithmToSave.getParameters().get(0).setMaximumValue("1.2");
        algorithmToSave.getParameters().get(0).setItemSelectionList(ImmutableList.of(PODAM_FACTORY.manufacturePojo(ItemSelectionParameterElement.class)));

        try {
            this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithmToSave);
            fail("should have thrown exception");
        } catch (final ConstraintViolationException e) {
            assertThat(e.getConstraintViolations().size(), is(4));
            assertThat(getConstraintViolation(e, "itemSelectionAlgorithm.parameters.defaultValue.parseable.number").size(), is(1));
            assertThat(getConstraintViolation(e, "itemSelectionAlgorithm.parameters.minimumValue.parseable.number").size(), is(1));
            assertThat(getConstraintViolation(e, "itemSelectionAlgorithm.parameters.maximumValue.parseable.number").size(), is(1));
            assertThat(getConstraintViolation(e, "itemSelectionAlgorithm.parameters.itemSelectionList.required.empty").size(), is(1));
        }
    }

    @Test
    public void saveItemSelectionAlgorithmWithLargeIntegerParametersTest() {
        final ItemSelectionAlgorithm algorithmToSave = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.INTEGER);
        algorithmToSave.setParameters(DomainFactory.manufactureValidItemSelectionAlgorithmParameters(ItemSelectionPurpose.SCALAR, ItemSelectionType.INTEGER, 1));
        algorithmToSave.getParameters().get(0).setDefaultValue("999999999999999999");
        algorithmToSave.getParameters().get(0).setMinimumValue("0");
        algorithmToSave.getParameters().get(0).setMaximumValue("999999999999999999");

        final ItemSelectionAlgorithm savedItemSelectionAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithmToSave);
        assertThat(savedItemSelectionAlgorithm, is(notNullValue()));
        assertThat(savedItemSelectionAlgorithm.getParameters().get(0).getDefaultValue(), is("999999999999999999"));
        assertThat(savedItemSelectionAlgorithm.getParameters().get(0).getMinimumValue(), is("0"));
        assertThat(savedItemSelectionAlgorithm.getParameters().get(0).getMaximumValue(), is("999999999999999999"));
    }

    @Test
    public void saveItemSelectionAlgorithmWithLargeFloatParametersTest() {
        final ItemSelectionAlgorithm algorithmToSave = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.FLOAT);
        algorithmToSave.setParameters(DomainFactory.manufactureValidItemSelectionAlgorithmParameters(ItemSelectionPurpose.SCALAR, ItemSelectionType.FLOAT, 1));
        algorithmToSave.getParameters().get(0).setDefaultValue("999999999999999999");
        algorithmToSave.getParameters().get(0).setMinimumValue("0");
        algorithmToSave.getParameters().get(0).setMaximumValue("999999999999999999");

        final ItemSelectionAlgorithm savedItemSelectionAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithmToSave);
        assertThat(savedItemSelectionAlgorithm, is(notNullValue()));
        assertThat(savedItemSelectionAlgorithm.getParameters().get(0).getDefaultValue(), is("999999999999999999"));
        assertThat(savedItemSelectionAlgorithm.getParameters().get(0).getMinimumValue(), is("0"));
        assertThat(savedItemSelectionAlgorithm.getParameters().get(0).getMaximumValue(), is("999999999999999999"));
    }

    @Test
    public void saveItemSelectionAlgorithmWithIntegerParametersThatAreTooLongTest() {
        final ItemSelectionAlgorithm algorithmToSave = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.INTEGER);
        algorithmToSave.setParameters(DomainFactory.manufactureValidItemSelectionAlgorithmParameters(ItemSelectionPurpose.SCALAR, ItemSelectionType.INTEGER, 1));
        algorithmToSave.getParameters().get(0).setDefaultValue("123456789012345678901");
        algorithmToSave.getParameters().get(0).setMinimumValue("0");
        algorithmToSave.getParameters().get(0).setMaximumValue("123456789012345678901");

        try {
            this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithmToSave);
            fail("should have thrown exception");
        } catch (final ConstraintViolationException e) {
            assertThat(e.getConstraintViolations().size(), is(2));
            assertThat(getConstraintViolation(e, "Size").size(), is(1));
            assertThat(getConstraintViolation(e, "itemSelectionAlgorithm.parameters.defaultValue.length.max").size(), is(1));
        }
    }

    @Test
    public void saveItemSelectionAlgorithmWithUnparseableFloatParametersTest() {
        final ItemSelectionAlgorithm algorithmToSave = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.FLOAT);
        algorithmToSave.setParameters(DomainFactory.manufactureValidItemSelectionAlgorithmParameters(ItemSelectionPurpose.SCALAR, ItemSelectionType.FLOAT, 1));
        algorithmToSave.getParameters().get(0).setDefaultValue("abc");
        algorithmToSave.getParameters().get(0).setMinimumValue("1.3a4");
        algorithmToSave.getParameters().get(0).setMaximumValue("1.a");
        algorithmToSave.getParameters().get(0).setItemSelectionList(ImmutableList.of(PODAM_FACTORY.manufacturePojo(ItemSelectionParameterElement.class)));

        try {
            this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithmToSave);
            fail("should have thrown exception");
        } catch (final ConstraintViolationException e) {
            assertThat(e.getConstraintViolations().size(), is(4));
            assertThat(getConstraintViolation(e, "itemSelectionAlgorithm.parameters.defaultValue.parseable.number").size(), is(1));
            assertThat(getConstraintViolation(e, "itemSelectionAlgorithm.parameters.minimumValue.parseable.number").size(), is(1));
            assertThat(getConstraintViolation(e, "itemSelectionAlgorithm.parameters.maximumValue.parseable.number").size(), is(1));
            assertThat(getConstraintViolation(e, "itemSelectionAlgorithm.parameters.itemSelectionList.required.empty").size(), is(1));
        }
    }

    @Test
    public void saveItemSelectionAlgorithmWithInvalidMinMaxFloatParametersTest() {
        final ItemSelectionAlgorithm algorithmToSave = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.FLOAT);
        algorithmToSave.setParameters(DomainFactory.manufactureValidItemSelectionAlgorithmParameters(ItemSelectionPurpose.SCALAR, ItemSelectionType.FLOAT, 1));
        algorithmToSave.getParameters().get(0).setDefaultValue("11");
        algorithmToSave.getParameters().get(0).setMinimumValue("12");
        algorithmToSave.getParameters().get(0).setMaximumValue("11");

        try {
            this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithmToSave);
            fail("should have thrown exception");
        } catch (final ConstraintViolationException e) {
            assertThat(e.getConstraintViolations().size(), is(1));
            assertThat(getConstraintViolation(e, "itemSelectionAlgorithm.parameters.minimumValue.lessthan.max").size(), is(1));
        }
    }

    @Test
    public void saveItemSelectionAlgorithmWithLargeDefaultNotInMinMaxRangeParametersTest() {
        final ItemSelectionAlgorithm algorithmToSave = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.INTEGER);
        algorithmToSave.setParameters(DomainFactory.manufactureValidItemSelectionAlgorithmParameters(ItemSelectionPurpose.SCALAR, ItemSelectionType.INTEGER, 1));
        algorithmToSave.getParameters().get(0).setDefaultValue("999999999999999999");
        algorithmToSave.getParameters().get(0).setMinimumValue("1");
        algorithmToSave.getParameters().get(0).setMaximumValue("999999999999999998");

        try {
            this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithmToSave);
            fail("should have thrown exception");
        } catch (final ConstraintViolationException e) {
            assertThat(e.getConstraintViolations().size(), is(1));
            assertThat(getConstraintViolation(e, "itemSelectionAlgorithm.parameters.defaultValue.within.minmax").size(), is(1));
        }
    }

    @Test
    public void saveItemSelectionAlgorithmWithValidMinMaxFloatParametersTest() {
        final ItemSelectionAlgorithm algorithmToSave = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.FLOAT);
        algorithmToSave.setParameters(DomainFactory.manufactureValidItemSelectionAlgorithmParameters(ItemSelectionPurpose.SCALAR, ItemSelectionType.FLOAT, 1));
        algorithmToSave.getParameters().get(0).setDefaultValue("11");
        algorithmToSave.getParameters().get(0).setMinimumValue("11");
        algorithmToSave.getParameters().get(0).setMaximumValue("12");

        final ItemSelectionAlgorithm savedItemSelectionAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithmToSave);
        assertThat(savedItemSelectionAlgorithm, is(notNullValue()));
    }

    @Test
    public void saveItemSelectionAlgorithmWithInvalidBooleanParametersTest() {
        final ItemSelectionAlgorithm algorithmToSave = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.BOOLEAN);
        algorithmToSave.setParameters(DomainFactory.manufactureValidItemSelectionAlgorithmParameters(ItemSelectionPurpose.SCALAR, ItemSelectionType.BOOLEAN, 1));
        algorithmToSave.getParameters().get(0).setDefaultValue("1");
        algorithmToSave.getParameters().get(0).setMinimumValue("2");
        algorithmToSave.getParameters().get(0).setMaximumValue("3");
        algorithmToSave.getParameters().get(0).setItemSelectionList(ImmutableList.of(PODAM_FACTORY.manufacturePojo(ItemSelectionParameterElement.class)));

        try {
            this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithmToSave);
            fail("should have thrown exception");
        } catch (final ConstraintViolationException e) {
            assertThat(e.getConstraintViolations().size(), is(4));
            assertThat(getConstraintViolation(e, "itemSelectionAlgorithm.parameters.defaultValue.parseable.boolean").size(), is(1));
            assertThat(getConstraintViolation(e, "itemSelectionAlgorithm.parameters.minimumValue.required.empty").size(), is(1));
            assertThat(getConstraintViolation(e, "itemSelectionAlgorithm.parameters.maximumValue.required.empty").size(), is(1));
            assertThat(getConstraintViolation(e, "itemSelectionAlgorithm.parameters.itemSelectionList.required.empty").size(), is(1));
        }
    }

    @Test
    public void saveItemSelectionAlgorithmWithInvalidListParametersTest() {
        final ItemSelectionAlgorithm algorithmToSave = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.LIST);
        algorithmToSave.setParameters(DomainFactory.manufactureValidItemSelectionAlgorithmParameters(ItemSelectionPurpose.SCALAR, ItemSelectionType.LIST, 1));
        algorithmToSave.getParameters().get(0).setDefaultValue("1");
        algorithmToSave.getParameters().get(0).setMinimumValue("2");
        algorithmToSave.getParameters().get(0).setMaximumValue("3");
        algorithmToSave.getParameters().get(0).setItemSelectionList(null);

        try {
            this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithmToSave);
            fail("should have thrown exception");
        } catch (final ConstraintViolationException e) {
            assertThat(e.getConstraintViolations().size(), is(3));
            assertThat(getConstraintViolation(e, "itemSelectionAlgorithm.parameters.minimumValue.required.empty").size(), is(1));
            assertThat(getConstraintViolation(e, "itemSelectionAlgorithm.parameters.maximumValue.required.empty").size(), is(1));
            assertThat(getConstraintViolation(e, "itemSelectionAlgorithm.parameters.itemSelectionList.required").size(), is(1));
        }
    }

    @Test
    public void saveItemSelectionAlgorithmWithInvalidListParameterElementsTest() {
        final ItemSelectionAlgorithm algorithmToSave = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.LIST);
        algorithmToSave.setParameters(DomainFactory.manufactureValidItemSelectionAlgorithmParameters(ItemSelectionPurpose.SCALAR, ItemSelectionType.LIST, 1));
        algorithmToSave.getParameters().get(0).setItemSelectionList(ImmutableList.of(new ItemSelectionParameterElement(), new ItemSelectionParameterElement()));

        try {
            this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithmToSave);
            fail("should have thrown exception");
        } catch (final ConstraintViolationException e) {
            assertThat(e.getConstraintViolations().size(), is(4));
            assertThat(getConstraintViolation(e, "itemSelectionAlgorithm.parameters.itemSelectionList.name.required").size(), is(1));
            assertThat(getConstraintViolation(e, "itemSelectionAlgorithm.parameters.itemSelectionList.position.invalid").size(), is(1));
            assertThat(getConstraintViolation(e, "itemSelectionAlgorithm.parameters.itemSelectionList.position.duplicates").size(), is(1));
            assertThat(getConstraintViolation(e, "itemSelectionAlgorithm.parameters.defaultValue.required.contains").size(), is(1));
        }
    }

    @Test
    public void saveItemSelectionAlgorithmWithDuplicateListParameterElementsTest() {
        final ItemSelectionAlgorithm algorithmToSave = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.LIST);
        algorithmToSave.setParameters(DomainFactory.manufactureValidItemSelectionAlgorithmParameters(ItemSelectionPurpose.SCALAR, ItemSelectionType.LIST, 1));

        algorithmToSave.getParameters().get(0).setItemSelectionList(DomainFactory.manufactureValidItemSelectionParameterElements(6));
        algorithmToSave.getParameters().get(0).getItemSelectionList().get(0).setName("name1");
        algorithmToSave.getParameters().get(0).getItemSelectionList().get(1).setName("name2");
        algorithmToSave.getParameters().get(0).getItemSelectionList().get(2).setName(null);
        algorithmToSave.getParameters().get(0).getItemSelectionList().get(3).setName("name1");
        algorithmToSave.getParameters().get(0).getItemSelectionList().get(4).setName("name2");
        algorithmToSave.getParameters().get(0).getItemSelectionList().get(5).setName("name3");

        try {
            this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithmToSave);
            fail("should have thrown exception");
        } catch (final ConstraintViolationException e) {
            assertThat(e.getConstraintViolations().size(), is(3));
            assertThat(getConstraintViolation(e, "itemSelectionAlgorithm.parameters.itemSelectionList.name.required").size(), is(1));
            assertThat(getConstraintViolation(e, "itemSelectionAlgorithm.parameters.defaultValue.required.contains").size(), is(1));
            assertThat(getConstraintViolation(e, "itemSelectionAlgorithm.parameters.itemSelectionList.name.duplicates").size(), is(1));
        }
    }

    @Test
    public void saveItemSelectionAlgorithmWithDuplicateListParameterElementsPositionTest() {
        final ItemSelectionAlgorithm algorithmToSave = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.LIST);
        algorithmToSave.setParameters(DomainFactory.manufactureValidItemSelectionAlgorithmParameters(ItemSelectionPurpose.SCALAR, ItemSelectionType.LIST, 1));

        algorithmToSave.getParameters().get(0).setItemSelectionList(DomainFactory.manufactureValidItemSelectionParameterElements(6));
        algorithmToSave.getParameters().get(0).getItemSelectionList().get(4).setPosition(1);

        try {
            this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithmToSave);
            fail("should have thrown exception");
        } catch (final ConstraintViolationException e) {
            assertThat(e.getConstraintViolations().size(), is(1));
            assertThat(getConstraintViolation(e, "itemSelectionAlgorithm.parameters.itemSelectionList.position.duplicates").size(), is(1));
        }
    }

    @Test
    public void saveItemSelectionAlgorithmWithInvalidDefaultListParameterTest() {
        final ItemSelectionAlgorithm algorithmToSave = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.LIST);
        algorithmToSave.setParameters(DomainFactory.manufactureValidItemSelectionAlgorithmParameters(ItemSelectionPurpose.SCALAR, ItemSelectionType.LIST, 1));
        algorithmToSave.getParameters().get(0).setItemSelectionList(DomainFactory.manufactureValidItemSelectionParameterElements(6));
        algorithmToSave.getParameters().get(0).setDefaultValue("not-in-list");

        try {
            this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithmToSave);
            fail("should have thrown exception");
        } catch (final ConstraintViolationException e) {
            assertThat(e.getConstraintViolations().size(), is(1));
            assertThat(getConstraintViolation(e, "itemSelectionAlgorithm.parameters.defaultValue.required.contains").size(), is(1));
        }
    }

    @Test
    public void saveItemSelectionAlgorithmWithValidDefaultListParameterTest() {
        final ItemSelectionAlgorithm algorithmToSave = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.LIST);
        algorithmToSave.setParameters(DomainFactory.manufactureValidItemSelectionAlgorithmParameters(ItemSelectionPurpose.SCALAR, ItemSelectionType.LIST, 1));

        final ItemSelectionAlgorithm savedAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithmToSave);
        assertThat(savedAlgorithm, is(not(nullValue())));
    }

    @Test
    public void saveItemSelectionAlgorithmWithOutOfRangeListParameterElementsPositionTest() {
        final ItemSelectionAlgorithm algorithmToSave = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.LIST);
        algorithmToSave.setParameters(DomainFactory.manufactureValidItemSelectionAlgorithmParameters(ItemSelectionPurpose.SCALAR, ItemSelectionType.LIST, 1));
        algorithmToSave.getParameters().get(0).setItemSelectionList(DomainFactory.manufactureValidItemSelectionParameterElements(6));
        algorithmToSave.getParameters().get(0).getItemSelectionList().get(4).setPosition(11);

        try {
            this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithmToSave);
            fail("should have thrown exception");
        } catch (final ConstraintViolationException e) {
            assertThat(e.getConstraintViolations().size(), is(1));
            assertThat(getConstraintViolation(e, "itemSelectionAlgorithm.parameters.itemSelectionList.position.invalid").size(), is(1));
        }
    }

    @Test
    public void saveItemSelectionAlgorithmWithFloatParameterTrimmingTest() {
        final ItemSelectionAlgorithm algorithmToSave = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.FLOAT);
        algorithmToSave.setParameters(DomainFactory.manufactureValidItemSelectionAlgorithmParameters(ItemSelectionPurpose.SCALAR, ItemSelectionType.FLOAT, 1));
        algorithmToSave.getParameters().get(0).setDefaultValue("0001.100");
        algorithmToSave.getParameters().get(0).setMinimumValue("0.8765432198765435");
        algorithmToSave.getParameters().get(0).setMaximumValue("000987654.321000");

        final ItemSelectionAlgorithm savedAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithmToSave);
        assertThat(savedAlgorithm.getParameters().get(0).getDefaultValue(), is("1.1"));
        assertThat(savedAlgorithm.getParameters().get(0).getMinimumValue(), is("0.8765432198765435"));
        assertThat(savedAlgorithm.getParameters().get(0).getMaximumValue(), is("987654.321"));
    }

    @Test
    public void saveItemSelectionAlgorithmWithIntegerParameterTrimmingTest() {
        final ItemSelectionAlgorithm algorithmToSave = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.INTEGER);
        algorithmToSave.setParameters(DomainFactory.manufactureValidItemSelectionAlgorithmParameters(ItemSelectionPurpose.SCALAR, ItemSelectionType.INTEGER, 1));
        algorithmToSave.getParameters().get(0).setDefaultValue("000987654321000");
        algorithmToSave.getParameters().get(0).setMinimumValue("0001000");
        algorithmToSave.getParameters().get(0).setMaximumValue("00999999999900");

        final ItemSelectionAlgorithm savedAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithmToSave);
        assertThat(savedAlgorithm.getParameters().get(0).getDefaultValue(), is("987654321000"));
        assertThat(savedAlgorithm.getParameters().get(0).getMinimumValue(), is("1000"));
        assertThat(savedAlgorithm.getParameters().get(0).getMaximumValue(), is("999999999900"));
    }

    @Test
    public void deleteItemSelectionAlgorithmTest() {
        final ItemSelectionAlgorithm itemSelectionAlgorithmToSave = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.BOOLEAN);
        final ItemSelectionAlgorithm savedItemSelectionAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(itemSelectionAlgorithmToSave);
        assertThat(savedItemSelectionAlgorithm, is(notNullValue()));
        final ItemSelectionAlgorithm retrievedItemSelectionAlgorithm = this.itemSelectionAlgorithmService.getItemSelectionAlgorithm(savedItemSelectionAlgorithm.getId());
        assertThat(retrievedItemSelectionAlgorithm, is(notNullValue()));

        this.itemSelectionAlgorithmService.removeItemSelectionAlgorithm(retrievedItemSelectionAlgorithm.getId());
        final ItemSelectionAlgorithm reRetrievedItemSelectionAlgorithm = this.itemSelectionAlgorithmService.getItemSelectionAlgorithm(savedItemSelectionAlgorithm.getId());
        assertThat(reRetrievedItemSelectionAlgorithm, is(nullValue()));
    }

    @Test
    public void getItemSelectionAlgorithm() {
        final ItemSelectionAlgorithm itemSelectionAlgorithmToSave = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.BOOLEAN);
        final ItemSelectionAlgorithm savedItemSelectionAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(itemSelectionAlgorithmToSave);
        assertThat(savedItemSelectionAlgorithm, is(not(nullValue())));

        assertThat(this.itemSelectionAlgorithmService.getItemSelectionAlgorithm(savedItemSelectionAlgorithm.getId()), is(not(nullValue())));
        assertThat(this.itemSelectionAlgorithmService.getItemSelectionAlgorithm("invalid-id"), is(nullValue()));
    }

    @Test
    public void searchItemSelectionAlgorithms() {
        final ItemSelectionAlgorithm itemSelectionAlgorithmToSave = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.BOOLEAN);
        final ItemSelectionAlgorithm savedItemSelectionAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(itemSelectionAlgorithmToSave);
        assertThat(savedItemSelectionAlgorithm, is(not(nullValue())));

        final ItemSelectionAlgorithm itemSelectionAlgorithmToSave2 = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.BOOLEAN);
        final ItemSelectionAlgorithm savedItemSelectionAlgorithm2 = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(itemSelectionAlgorithmToSave2);
        assertThat(savedItemSelectionAlgorithm2, is(not(nullValue())));

        final Map<String, String[]> params = ImmutableMap.of("name", new String[] { savedItemSelectionAlgorithm.getName() });
        final SearchResponse<ItemSelectionAlgorithm> searchResponse = this.itemSelectionAlgorithmService.searchItemSelectionAlgorithms(params);
        assertThat(searchResponse.getReturnCount(), is(1));
        assertThat(searchResponse.getSearchResults().size(), is(1));
    }
}
