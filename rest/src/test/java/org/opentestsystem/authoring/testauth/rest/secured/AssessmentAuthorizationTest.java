/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.rest.secured;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.nio.charset.Charset;
import java.util.List;
import java.util.Map;

import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.Assessment;
import org.opentestsystem.authoring.testauth.domain.AssessmentType;
import org.opentestsystem.authoring.testauth.domain.DomainFactory;
import org.opentestsystem.authoring.testauth.domain.FileGroup;
import org.opentestsystem.authoring.testauth.domain.GridFile;
import org.opentestsystem.authoring.testauth.domain.PerformanceLevel;
import org.opentestsystem.authoring.testauth.domain.Permissions;
import org.opentestsystem.authoring.testauth.domain.Publication;
import org.opentestsystem.authoring.testauth.domain.Subject;
import org.opentestsystem.authoring.testauth.persistence.GridFsRepository;
import org.opentestsystem.authoring.testauth.rest.AbstractSecuredRestEmbeddedMongoTest;
import org.opentestsystem.authoring.testauth.service.AssessmentService;
import org.opentestsystem.authoring.testauth.service.FileGroupService;
import org.opentestsystem.authoring.testauth.service.PerformanceLevelService;
import org.opentestsystem.authoring.testauth.service.PublicationService;
import org.opentestsystem.authoring.testauth.service.SubjectService;
import org.opentestsystem.shared.docs.annotation.ApiDocExample;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.Lists;
import com.google.common.collect.Sets;
import com.mongodb.DBObject;
import com.mongodb.gridfs.GridFSFile;

public class AssessmentAuthorizationTest extends AbstractSecuredRestEmbeddedMongoTest {
    private static final String ASSESSMENT_URL = "/assessment";
    private static final String FILE_GROUP_URL = "/fileGroup";
    private static final String PERFORMANCE_LEVEL_URL = "/performanceLevel";

    @Autowired
    private AssessmentService assessmentService;

    @Autowired
    private SubjectService subjectService;

    @Autowired
    private PublicationService publicationService;

    @Autowired
    private FileGroupService fileGroupService;

    @Autowired
    private PerformanceLevelService performanceLevelService;

    @Autowired
    private transient GridFsRepository gridFsRepository;

    private List<Permissions> permissions;
    private Assessment savedAssessment;
    private Subject savedSubject;
    private Publication savedPublication;

    private FileGroup savedFileGroup;
    private List<GridFile> gridFiles;
    private PerformanceLevel savedPerformanceLevel;

    @ApiDocExample(rank = -1)
    @Before
    public void setupTestData() {
        this.permissions = Lists.newArrayList();
        this.savedSubject = this.subjectService.saveSubject(DomainFactory.manufactureValidSubject("ABB"));
        final Publication publication = PODAM_FACTORY.manufacturePojo(Publication.class);
        publication.setId(null);
        publication.setSubjectIds(Sets.newHashSet(this.savedSubject.getId()));
        this.savedPublication = this.publicationService.savePublication(publication);
    }

    void setupAssessment(final int uniqueId) {
        this.savedAssessment = saveSampleAssessment(uniqueId);
    }

    void setupFileGroup(final int uniqueId) {
        this.gridFiles = Lists.newArrayList();
        final String sampleGridFile1 = "sample grid file data 1";
        final String sampleGridFile2 = "sample grid file data 2";
        final String sampleGridFile3 = "sample grid file data 3";
        final DBObject metadata = null;
        final GridFSFile gridFsFile1 = this.gridFsRepository.save(sampleGridFile1.getBytes(Charset.forName("UTF-8")), "Grid File Name 1", "plain/text", metadata);
        final GridFSFile gridFsFile2 = this.gridFsRepository.save(sampleGridFile2.getBytes(Charset.forName("UTF-8")), "Grid File Name 2", "plain/text", metadata);
        final GridFSFile gridFsFile3 = this.gridFsRepository.save(sampleGridFile3.getBytes(Charset.forName("UTF-8")), "Grid File Name 3", "plain/text", metadata);
        this.gridFiles.add(getGridFile(gridFsFile1));
        this.gridFiles.add(getGridFile(gridFsFile2));
        this.gridFiles.add(getGridFile(gridFsFile3));

        this.savedFileGroup = saveSampleFileGroup(uniqueId);
    }

    void setupPerformanceLevel(final int uniqueId) {
        this.savedPerformanceLevel = saveSamplePerformanceLevel(uniqueId);
    }

    /**************************************** Test ****************************************/
    @Test
    public void testTestRead() {
        setupAssessment(1);
        this.permissions.add(Permissions.TEST_READ);
        setUserWithRoles(this.permissions);
        final Assessment fetchedAssessment = callGETRestService(ASSESSMENT_URL + "/" + this.savedAssessment.getId(), Assessment.class);
        assertThat(fetchedAssessment, is(notNullValue()));
        assertThat(fetchedAssessment.getId(), is(notNullValue()));
    }

    @Test
    public void testTestModify() {
        this.permissions.add(Permissions.TEST_MODIFY);
        setUserWithRoles(this.permissions);
        final Map<String, Object> assessmentParams = buildAssessmentMap(0);
        assessmentParams.put("id", assessmentParams.get("id"));
        assessmentParams.put("description", "updated Assessment description");
        final Assessment updatedAssessment = callPUTRestService(ASSESSMENT_URL + "/" + assessmentParams.get("id"), assessmentParams, Assessment.class);
        assertThat(updatedAssessment, is(notNullValue()));
        assertThat(updatedAssessment.getDescription(), is(equalTo("updated Assessment description")));
    }

    @Test
    public void testTestReadFail() {
        setupAssessment(2);
        this.permissions.add(Permissions.TEST_MODIFY);
        setUserWithRoles(this.permissions);
        final Assessment fetchedAssessment = callGETRestService(ASSESSMENT_URL + "/" + this.savedAssessment.getId(), Assessment.class, status().isUnauthorized());
        assertThat(fetchedAssessment, is(notNullValue()));
        assertThat(fetchedAssessment.getId(), is(nullValue()));
    }

    @Test
    public void testTestModifyFail() {
        this.permissions.add(Permissions.TEST_READ);
        setUserWithRoles(this.permissions);
        final Map<String, Object> assessmentParams = buildAssessmentMap(0);
        assessmentParams.put("id", assessmentParams.get("id"));
        assessmentParams.put("description", "updated Assessment description");
        final Assessment updatedAssessment = callPUTRestService(ASSESSMENT_URL + "/" + assessmentParams.get("id"), assessmentParams, Assessment.class, status().isUnauthorized());
        assertThat(updatedAssessment, is(notNullValue()));
        assertThat(updatedAssessment.getId(), is(nullValue()));
    }

    /**************************************** Result Upload ****************************************/
    @Test
    public void testResultUploadRead() {
        setupFileGroup(1);
        this.permissions.add(Permissions.RESULT_UPLOAD_READ);
        setUserWithRoles(this.permissions);
        final FileGroup fetchedFileGroup = callGETRestService(FILE_GROUP_URL + "/" + this.savedFileGroup.getId(), FileGroup.class);
        assertThat(fetchedFileGroup, is(notNullValue()));
        assertThat(fetchedFileGroup.getId(), is(notNullValue()));
    }

    @Test
    public void testResultUploadModify() {
        setupFileGroup(2);
        this.permissions.add(Permissions.RESULT_UPLOAD_MODIFY);
        setUserWithRoles(this.permissions);
        final Map<String, Object> fileGroupParams = buildFileGroupMap(0);
        fileGroupParams.put("id", fileGroupParams.get("id"));
        fileGroupParams.put("name", "New File Group Name");
        final FileGroup updatedFileGroup = callPUTRestService(FILE_GROUP_URL + "/" + fileGroupParams.get("id"), fileGroupParams, FileGroup.class);
        assertThat(updatedFileGroup, is(notNullValue()));
        assertThat(updatedFileGroup.getName(), is(equalTo("New File Group Name")));
    }

    @Test
    public void testResultUploadReadFail() {
        setupFileGroup(3);
        this.permissions.add(Permissions.RESULT_UPLOAD_MODIFY);
        setUserWithRoles(this.permissions);
        final FileGroup fetchedFileGroup = callGETRestService(FILE_GROUP_URL + "/" + this.savedFileGroup.getId(), FileGroup.class, status().isUnauthorized());
        assertThat(fetchedFileGroup, is(notNullValue()));
        assertThat(fetchedFileGroup.getId(), is(nullValue()));
    }

    @Test
    public void testResultUploadModifyFail() {
        setupFileGroup(4);
        this.permissions.add(Permissions.RESULT_UPLOAD_READ);
        setUserWithRoles(this.permissions);
        final Map<String, Object> fileGroupParams = buildFileGroupMap(0);
        fileGroupParams.put("id", fileGroupParams.get("id"));
        fileGroupParams.put("name", "New File Group Name");
        final FileGroup updatedFileGroup = callPUTRestService(FILE_GROUP_URL + "/" + fileGroupParams.get("id"), fileGroupParams, FileGroup.class, status().isUnauthorized());
        assertThat(updatedFileGroup, is(notNullValue()));
        assertThat(updatedFileGroup.getId(), is(nullValue()));
    }

    /**************************************** Performance Level ****************************************/
    @Test
    public void testPerformanceLevelRead() {
        setupPerformanceLevel(1);
        this.permissions.add(Permissions.PERFORMANCE_LEVEL_READ);
        setUserWithRoles(this.permissions);
        final PerformanceLevel fetchedPerformanceLevel = callGETRestService(PERFORMANCE_LEVEL_URL + "/" + this.savedPerformanceLevel.getId(), PerformanceLevel.class);
        assertThat(fetchedPerformanceLevel, is(notNullValue()));
        assertThat(fetchedPerformanceLevel.getId(), is(notNullValue()));
    }

    @Test
    public void testPerformanceLevelModify() {
        this.permissions.add(Permissions.PERFORMANCE_LEVEL_MODIFY);
        setUserWithRoles(this.permissions);
        final Map<String, Object> performanceLevelParams = buildPerformanceLevelMap(0);
        performanceLevelParams.put("id", performanceLevelParams.get("id"));
        performanceLevelParams.put("blueprintReferenceName", "BP Reference Name");
        final PerformanceLevel updatedPerformanceLevel = callPUTRestService(PERFORMANCE_LEVEL_URL + "/" + performanceLevelParams.get("id"), performanceLevelParams, PerformanceLevel.class);
        assertThat(updatedPerformanceLevel, is(notNullValue()));
        assertThat(updatedPerformanceLevel.getBlueprintReferenceName(), is(equalTo("BP Reference Name")));
    }

    @Test
    public void testPerformanceLevelReadFail() {
        setupPerformanceLevel(2);
        this.permissions.add(Permissions.PERFORMANCE_LEVEL_MODIFY);
        setUserWithRoles(this.permissions);
        final PerformanceLevel fetchedPerformanceLevel = callGETRestService(PERFORMANCE_LEVEL_URL + "/" + this.savedPerformanceLevel.getId(), PerformanceLevel.class, status().isUnauthorized());
        assertThat(fetchedPerformanceLevel, is(notNullValue()));
        assertThat(fetchedPerformanceLevel.getId(), is(nullValue()));
    }

    @Test
    public void testPerformanceLevelModifyFail() {
        this.permissions.add(Permissions.PERFORMANCE_LEVEL_READ);
        setUserWithRoles(this.permissions);
        final Map<String, Object> performanceLevelParams = buildPerformanceLevelMap(0);
        performanceLevelParams.put("id", performanceLevelParams.get("id"));
        performanceLevelParams.put("blueprintReferenceName", "BP Reference Name");
        final PerformanceLevel updatedPerformanceLevel = callPUTRestService(PERFORMANCE_LEVEL_URL + "/" + performanceLevelParams.get("id"), performanceLevelParams, PerformanceLevel.class, status()
                .isUnauthorized());
        assertThat(updatedPerformanceLevel, is(notNullValue()));
        assertThat(updatedPerformanceLevel.getId(), is(nullValue()));
    }

    /**************************************************************************************/

    private Assessment saveSampleAssessment(final int uniqueId) {
        final Assessment assessment = PODAM_FACTORY.manufacturePojo(Assessment.class);
        assessment.setId(null);
        assessment.setTenantId("id_12345");
        assessment.setName("test" + uniqueId);
        assessment.setAdministration("administration" + uniqueId);
        assessment.setLocked(false);
        assessment.setLabel("test" + uniqueId);
        assessment.setPublicationId(this.savedPublication.getId());
        assessment.setSubjectId(this.savedSubject.getId());
        assessment.setType(AssessmentType.INTERIM);
        return this.assessmentService.saveAssessment(assessment);
    }

    private FileGroup saveSampleFileGroup(final int uniqueId) {
        final FileGroup fileGroup = PODAM_FACTORY.manufacturePojo(FileGroup.class);
        fileGroup.setSimulationRecordId("simulation-record-id");
        fileGroup.setName("name " + uniqueId);
        fileGroup.setCreateDate(new DateTime());
        fileGroup.setGridFiles(this.gridFiles);
        return this.fileGroupService.saveFileGroup(fileGroup);
    }

    private GridFile getGridFile(final GridFSFile gridFsFile) {
        final GridFile gridFile = new GridFile();
        gridFile.setFileName(gridFsFile.getFilename());
        gridFile.setGridFsId(gridFsFile.getId().toString());
        return gridFile;
    }

    private PerformanceLevel saveSamplePerformanceLevel(final int uniqueId) {
        return this.performanceLevelService.savePerformanceLevel(null, DomainFactory.manufactureValidPerformanceLevel("assessment-id-" + uniqueId));
    }

    private Map<String, Object> buildAssessmentMap(final int uniqueId) {
        return buildParamObject(saveSampleAssessment(uniqueId));
    }

    private Map<String, Object> buildFileGroupMap(final int uniqueId) {
        return buildParamObject(saveSampleFileGroup(uniqueId));
    }

    private Map<String, Object> buildPerformanceLevelMap(final int uniqueId) {
        return buildParamObject(saveSamplePerformanceLevel(uniqueId));
    }
}
