/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.domain;

import java.io.Serializable;
import java.util.List;

import javax.validation.constraints.NotNull;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;
import org.hibernate.validator.constraints.NotBlank;
import org.joda.time.DateTime;
import org.opentestsystem.authoring.testauth.publish.domain.Purpose;
import org.springframework.data.annotation.Transient;
import org.springframework.data.mongodb.core.index.CompoundIndex;
import org.springframework.data.mongodb.core.index.CompoundIndexes;
import org.springframework.data.mongodb.core.mapping.Document;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

@Document
@JsonIgnoreProperties(ignoreUnknown = true)
@CompoundIndexes(value = { @CompoundIndex(name = "publishing_version_index", def = "{'assessmentId':1, 'version':1}", unique = true) })
public class PublishingRecord extends AssessmentChild implements Serializable, TenantedByAssessment {
    private static final long serialVersionUID = 1L;

    @NotNull(message = "publishing.purpose.required")
    private Purpose[] purpose;
    @NotBlank(message = "publishing.version.required")
    private String version;
    @NotNull(message = "publishing.status.required")
    private PublishingStatus publishingStatus;
    private DateTime lastUpdatedDate;
    private String errorMessageText;
    @Transient
    private transient List<ValidationResult<Approval>> validationResultList;

    public Purpose[] getPurpose() {
        Purpose[] rVal = null;
        if (this.purpose != null) {
            rVal = this.purpose.clone();
        }
        return rVal;
    }

    public void setPurpose(final Purpose[] purposeArray) {
        if (purposeArray == null) {
            this.purpose = null;
        } else {
            this.purpose = purposeArray.clone();
        }
    }

    public String getVersion() {
        return this.version;
    }

    public void setVersion(final String aVersion) {
        this.version = aVersion;
    }

    public PublishingStatus getPublishingStatus() {
        return this.publishingStatus;
    }

    public void setPublishingStatus(final PublishingStatus aPublishingStatus) {
        this.publishingStatus = aPublishingStatus;
    }

    public DateTime getLastUpdatedDate() {
        return this.lastUpdatedDate;
    }

    public void setLastUpdatedDate(final DateTime aLastUpdatedDate) {
        this.lastUpdatedDate = aLastUpdatedDate;
    }

    public String getErrorMessageText() {
        return this.errorMessageText;
    }

    public void setErrorMessageText(final String anErrorMessageText) {
        this.errorMessageText = anErrorMessageText;
    }

    public List<ValidationResult<Approval>> getValidationResultList() {
        return this.validationResultList;
    }

    public void setValidationResultList(final List<ValidationResult<Approval>> validationResultList) {
        this.validationResultList = validationResultList;
    }

    @Override
    public boolean equals(final Object obj) {
        return EqualsBuilder.reflectionEquals(this, obj);
    }

    @Override
    public String toString() {
        return ToStringBuilder.reflectionToString(this, ToStringStyle.SHORT_PREFIX_STYLE);
    }

    @Override
    public int hashCode() {
        return HashCodeBuilder.reflectionHashCode(this);
    }

}
