/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.integration;

import static org.hamcrest.CoreMatchers.containsString;
import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.Assert.fail;

import java.util.List;

import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.ReportingMeasure;
import org.opentestsystem.authoring.testauth.persistence.ReportingMeasureRepository;
import org.opentestsystem.authoring.testauth.rest.AbstractRestEmbeddedMongoTest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DuplicateKeyException;

import com.google.common.collect.Lists;

public class ReportingMeasureRepositoryTest extends AbstractRestEmbeddedMongoTest {

    @Autowired
    private ReportingMeasureRepository reportingMeasureRepository;

    @Test
    public void saveReportingMeasureTest() {
        final ReportingMeasure reportingMeasure = manufactureValidReportingMeasurePojo("1");
        final ReportingMeasure savedReportingMeasure = this.reportingMeasureRepository.save(reportingMeasure);
        assertThat(savedReportingMeasure, is(notNullValue()));
        assertThat(savedReportingMeasure.getId(), is(notNullValue()));
    }

    @Test
    public void saveDuplicateReportingMeasureTest() {
        final ReportingMeasure reportingMeasure = manufactureValidReportingMeasurePojo("1");
        this.reportingMeasureRepository.save(reportingMeasure);

        final ReportingMeasure duplicateReportingMeasure = manufactureValidReportingMeasurePojo("1");
        try {
            this.reportingMeasureRepository.save(duplicateReportingMeasure);
            fail("should have thrown exception");
        } catch (final DuplicateKeyException e) {
            assertThat(e.getMessage(), containsString("reporting_measure_indx"));
        }
    }

    @Test
    public void findReportingMeasureTest() {
        final ReportingMeasure reportingMeasure = manufactureValidReportingMeasurePojo("1");
        final ReportingMeasure savedReportingMeasure = this.reportingMeasureRepository.save(reportingMeasure);

        final ReportingMeasure foundReportingMeasure = this.reportingMeasureRepository.findOne(savedReportingMeasure.getId());
        assertThat(savedReportingMeasure.getId(), is(equalTo(foundReportingMeasure.getId())));
        assertThat(savedReportingMeasure, is(equalTo(foundReportingMeasure)));
    }

    @Test
    public void findByAssessmentIdTest() {
        final ReportingMeasure reportingMeasure = manufactureValidReportingMeasurePojo("1", "blueprintReferenceId");
        final ReportingMeasure savedReportingMeasure1 = this.reportingMeasureRepository.save(reportingMeasure);

        final ReportingMeasure reportingMeasure2 = manufactureValidReportingMeasurePojo("1", "blueprintReferenceId2");
        final ReportingMeasure savedReportingMeasure2 = this.reportingMeasureRepository.save(reportingMeasure2);

        final List<ReportingMeasure> retrievedReportingMeasures = this.reportingMeasureRepository.findAllByAssessmentId("1");
        assertThat(retrievedReportingMeasures.get(0), is(equalTo(savedReportingMeasure1)));
        assertThat(retrievedReportingMeasures.get(1), is(equalTo(savedReportingMeasure2)));
    }

    @Test
    public void removeReportingMeasureTest() {
        final ReportingMeasure reportingMeasure = manufactureValidReportingMeasurePojo("1");
        final ReportingMeasure savedReportingMeasure = this.reportingMeasureRepository.save(reportingMeasure);

        this.reportingMeasureRepository.delete(reportingMeasure);
        final ReportingMeasure foundReportingMeasure = this.reportingMeasureRepository.findOne(savedReportingMeasure.getId());
        assertThat(foundReportingMeasure, is(nullValue()));
    }

    private ReportingMeasure manufactureValidReportingMeasurePojo(final String assessmentId) {
        return manufactureValidReportingMeasurePojo(assessmentId, "blueprintReferenceId1");
    }

    private ReportingMeasure manufactureValidReportingMeasurePojo(final String assessmentId, final String blueprintReferenceId) {
        final ReportingMeasure reportingMeasure = PODAM_FACTORY.manufacturePojo(ReportingMeasure.class);
        reportingMeasure.setId(null);
        reportingMeasure.setAssessmentId(assessmentId);
        reportingMeasure.setBlueprintReferenceId(blueprintReferenceId);
        reportingMeasure.setBlueprintReferenceName(null);
        reportingMeasure.setScoringRuleIdList(Lists.newArrayList("1", "2"));
        reportingMeasure.setScoringRuleList(null);
        return reportingMeasure;
    }
}
