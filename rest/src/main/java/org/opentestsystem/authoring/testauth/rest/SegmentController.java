/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.rest;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.opentestsystem.authoring.testauth.domain.Segment;
import org.opentestsystem.authoring.testauth.service.SegmentService;
import org.opentestsystem.authoring.testauth.validation.SegmentValidator;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.opentestsystem.shared.web.AbstractRestController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.access.annotation.Secured;
import org.springframework.security.access.prepost.PostAuthorize;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

/**
 * Used to retrieve segment info
 */
@Controller
public class SegmentController extends AbstractRestController {

    @Autowired
    private SegmentService segmentService;

    @Autowired
    private SegmentValidator segmentValidator;

    @InitBinder("segment")
    public void initBinder(final WebDataBinder binder) {
        binder.setValidator(this.segmentValidator);
    }

    /**
     * Gets segmentService by segmentId.
     * 
     * @param segment id.
     * @return segment object.
     */
    @RequestMapping(value = "/segment/{segmentId}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Test Read" })
    @PostAuthorize("hasPermission(returnObject, 'ROLE_Test Read')")
    @ResponseBody
    public Segment findSegmentById(@PathVariable final String segmentId) {
        return this.segmentService.getSegment(segmentId);
    }

    /**
     * Creates segment.
     * 
     * @param segment to be saved.
     * @param response HttpServletResponse.
     * @return segment newly created segment object.
     */
    @ResponseStatus(HttpStatus.CREATED)
    @RequestMapping(value = "/segment", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Test Modify" })
    @PreAuthorize("hasPermission(#segment, 'ROLE_Test Modify')")
    @ResponseBody
    public Segment saveSegment(@RequestBody @Valid final Segment segment, final HttpServletResponse response) {
        return this.segmentService.createSegment(segment);
    }

    /**
     * Updates segment.
     * 
     * @param segment to be saved.
     * @param response HttpServletResponse.
     * @return segment updated segment object.
     */
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "/segment/{segmentId}", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Test Modify" })
    @PreAuthorize("hasPermission(#segment, 'ROLE_Test Modify')")
    @ResponseBody
    public Segment updateSegment(@PathVariable final String segmentId, @RequestBody @Valid final Segment segment, final HttpServletResponse response) {
        return this.segmentService.updateSegment(segment);
    }

    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "/segment", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Test Modify" })
    @PreAuthorize("hasPermission(#segment, 'ROLE_Test Modify')")
    @ResponseBody
    public List<Segment> updateSegmentList(@RequestBody final List<Segment> segmentList) {
        return this.segmentService.saveSegmentList(segmentList, true);
    }

    /**
     * Removes segment.
     * 
     * @param segmentId segment Id.
     */
    @RequestMapping(value = "/segment/{segmentId}", method = RequestMethod.DELETE)
    @Secured({ "ROLE_Test Modify" })
    @PreAuthorize("hasPermission(#segmentId, 'segment', 'ROLE_Test Modify')")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    public void removeSegmentById(@PathVariable final String segmentId) {
        this.segmentService.removeSegment(segmentId);
    }

    @RequestMapping(value = "/segment", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Test Read" })
    @PostAuthorize("hasPermission(returnObject, 'ROLE_Test Read')")
    @ResponseBody
    public SearchResponse<Segment> searchSegment(final HttpServletRequest request, final HttpServletResponse response) {
        final SearchResponse<Segment> searchResponse = this.segmentService.searchSegments(request.getParameterMap());
        this.segmentService.loadReferenceData(searchResponse.getSearchResults());
        return searchResponse;
    }
}
