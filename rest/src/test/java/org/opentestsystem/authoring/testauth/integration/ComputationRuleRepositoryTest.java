/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.integration;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;

import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.ComputationRule;
import org.opentestsystem.authoring.testauth.domain.ComputationRuleParameter;
import org.opentestsystem.authoring.testauth.persistence.ComputationRuleRepository;
import org.opentestsystem.authoring.testauth.rest.AbstractRestEmbeddedMongoTest;
import org.springframework.beans.factory.annotation.Autowired;

public class ComputationRuleRepositoryTest extends AbstractRestEmbeddedMongoTest {

    @Autowired
    private ComputationRuleRepository computationRuleRepository;

    @Test
    public void saveComputationRuleTest() {
        final ComputationRule computationRule = PODAM_FACTORY.manufacturePojo(ComputationRule.class);
        computationRule.getParameters().clear();
        computationRule.getParameters().add(PODAM_FACTORY.manufacturePojo(ComputationRuleParameter.class));
        computationRule.getParameters().get(0).setPosition(1);
        final ComputationRule savedComputationRule = this.computationRuleRepository.save(computationRule);
        assertThat(savedComputationRule, is(notNullValue()));
        assertThat(savedComputationRule.getId(), is(notNullValue()));
    }

    @Test
    public void findComputationRuleTest() {
        final ComputationRule computationRule = PODAM_FACTORY.manufacturePojo(ComputationRule.class);
        computationRule.getParameters().clear();
        computationRule.getParameters().add(PODAM_FACTORY.manufacturePojo(ComputationRuleParameter.class));
        computationRule.getParameters().get(0).setPosition(1);
        final ComputationRule savedComputationRule = this.computationRuleRepository.save(computationRule);
        assertThat(savedComputationRule, is(notNullValue()));
        final ComputationRule foundComputationRule = this.computationRuleRepository.findOne(savedComputationRule.getId());
        assertThat(savedComputationRule.getId(), is(equalTo(foundComputationRule.getId())));
        assertThat(savedComputationRule, is(equalTo(foundComputationRule)));
    }

    @Test
    public void removeComputationRuleTest() {
        final ComputationRule computationRule = PODAM_FACTORY.manufacturePojo(ComputationRule.class);
        computationRule.getParameters().clear();
        computationRule.getParameters().add(PODAM_FACTORY.manufacturePojo(ComputationRuleParameter.class));
        computationRule.getParameters().get(0).setPosition(1);
        final ComputationRule savedComputationRule = this.computationRuleRepository.save(computationRule);
        this.computationRuleRepository.delete(computationRule);
        final ComputationRule foundComputationRule = this.computationRuleRepository.findOne(savedComputationRule.getId());
        assertThat(foundComputationRule, is(nullValue()));
    }
}
