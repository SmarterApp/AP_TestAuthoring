/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.domain;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.joda.time.DateTime;
import org.opentestsystem.authoring.testauth.publish.domain.Purpose;

import uk.co.jemos.podam.api.PodamFactory;
import uk.co.jemos.podam.api.PodamFactoryImpl;

import com.google.common.collect.Lists;
import com.google.common.collect.Sets;

public class DomainFactory {
    protected static final PodamFactory PODAM_FACTORY = new PodamFactoryImpl();

    public static Subject manufactureValidSubject(final String abbreviation) {
        final Subject subject = PODAM_FACTORY.manufacturePojo(Subject.class);
        subject.setId(null);
        subject.setAbbreviation(abbreviation);
        return subject;
    }

    public static Assessment manufactureValidAssessment(final Subject subject, final Publication publication) {
        final Assessment assessment = PODAM_FACTORY.manufacturePojo(Assessment.class);
        assessment.setId(null);
        assessment.setTenantId("1");
        assessment.setSubjectId(subject.getId());
        assessment.setLabel("label");
        assessment.setAdministration("administration");
        assessment.setPublicationId(publication.getId());
        assessment.setLocked(false);
        assessment.setBlueprintSynced(false);
        assessment.setType(AssessmentType.FORMATIVE);
        return assessment;
    }

    public static BlueprintElement manufactureValidBlueprintElement(final String assessmentId, final Collection<Segment> segments) {
        final BlueprintElement blueprintElement = PODAM_FACTORY.manufacturePojo(BlueprintElement.class);
        blueprintElement.setAssessmentId(assessmentId);
        blueprintElement.setParentKey(null);
        blueprintElement.getBlueprintElementValueMap().clear();

        for (final Segment segment : segments) {
            blueprintElement.getBlueprintElementValueMap().put(segment.getId(), new BlueprintElementValue(0, 0, 0, 0));
            blueprintElement.getBlueprintElementValueMap().get(segment.getId()).setItemSelectionParameters(new HashMap<String, String>());
            for (final ItemSelectionAlgorithmParameter param : segment.getItemSelectionAlgorithm().getBlueprintParameters()) {
                blueprintElement.getBlueprintElementValueMap().get(segment.getId()).getItemSelectionParameters().put(param.getParameterName(), param.getDefaultValue());
            }
        }

        return blueprintElement;
    }

    public static Item manufactureValidItem(final String assessmentId) {
        final Item item = PODAM_FACTORY.manufacturePojo(Item.class);
        item.setAssessmentId(assessmentId);
        item.setStatus("OP");
        item.setItemLocation(new ArrayList<ItemLocation>(0));
        Map<String, Object> metadata = new HashMap<String, Object>();
        metadata.put("Status", "OP");
        item.setAllIncludedMetadata(metadata);
        return item;
    }

    public static ItemGroup manufactureValidAdaptiveItemGroup(final String segmentId) {
        final ItemGroup itemGroup = PODAM_FACTORY.manufacturePojo(ItemGroup.class);
        itemGroup.setId(null);
        itemGroup.setLocationType(ItemGroupLocationType.SEGMENT);
        itemGroup.setLocationId(segmentId);
        itemGroup.setMaxitems(Math.abs(itemGroup.getMaxitems()));
        itemGroup.setMaxResponses(Math.abs(itemGroup.getMaxResponses()));
        return itemGroup;
    }

    public static ItemGroup manufactureValidFixedFormItemGroup(final String partitionId) {
        final ItemGroup itemGroup = PODAM_FACTORY.manufacturePojo(ItemGroup.class);
        itemGroup.setId(null);
        itemGroup.setLocationType(ItemGroupLocationType.FORM_PARTITION);
        itemGroup.setLocationId(partitionId);
        return itemGroup;
    }

    public static Enemy manufactureValidEnemy(final String assessmentId, final String objectId1, final EnemyType objectType1, final String objectId2, final EnemyType objectType2) {
        final Enemy enemy = PODAM_FACTORY.manufacturePojo(Enemy.class);
        enemy.setId(null);
        enemy.setAssessmentId(assessmentId);
        enemy.setObjectId1(objectId1);
        enemy.setObjectType1(objectType1);
        enemy.setObject1(null);
        enemy.setObjectId2(objectId2);
        enemy.setObjectType2(objectType2);
        enemy.setObject2(null);
        return enemy;
    }

    public static Form manufactureValidForm(final String assessmentId) {
        final Form form = new Form();
        form.setId(null);
        form.setName("form-" + System.currentTimeMillis());
        form.setLanguage("eng");
        form.setAssessmentId(assessmentId);
        return form;
    }

    public static ItemMetadataConfig manufactureValidItemMetadataConfig(final String assessmentId, final String... itemMetadataFields) {
        final ItemMetadataConfig itemMetadataConfig = new ItemMetadataConfig();
        itemMetadataConfig.setId(null);
        itemMetadataConfig.setAssessmentId(assessmentId);
        itemMetadataConfig.setItemMetadataReckonSet(Sets.newHashSet(itemMetadataFields));
        return itemMetadataConfig;
    }

    public static ItemMetadataKeys manufactureValidItemMetadataKeys(final String assessmentId, final String... itemMetadataFields) {
        final ItemMetadataKeys itemMetadataKeys = new ItemMetadataKeys();
        itemMetadataKeys.setId(null);
        itemMetadataKeys.setAssessmentId(assessmentId);
        itemMetadataKeys.setItemMetadataKeys(Sets.newHashSet(itemMetadataFields));
        return itemMetadataKeys;
    }

    public static Form manufactureValidFormPojo(final String assessmentId, final String name, final String language) {
        final Form form = manufactureValidForm(assessmentId);
        form.setName(name);
        form.setLanguage(language);
        form.setPartitions(null);
        return form;
    }

    public static Approval manufactureValidApproval(final String assessmentId, final String publishingRecordId) {
        final Approval approval = PODAM_FACTORY.manufacturePojo(Approval.class);
        approval.setId(null);
        approval.setAssessmentId(assessmentId);
        approval.setPublishingRecordId(publishingRecordId);
        approval.setStatus(ApprovalStatus.PENDING);
        approval.setPermission(Permissions.CONTENT_LEAD.toSpringRoleName());
        approval.setPermissionLabel("Content Lead");
        approval.setUsername("sbac.contentlead@gmail.com");
        approval.setVersion("1.0");
        approval.setLevel(1);
        approval.setLastUpdatedDate(new DateTime());
        approval.setMessage("test message");
        return approval;
    }

    public static PublishingRecord manufactureValidPublishingRecord(final String assessmentId) {
        final PublishingRecord publishingRecord = PODAM_FACTORY.manufacturePojo(PublishingRecord.class);
        publishingRecord.setId(null);
        publishingRecord.setAssessmentId(assessmentId);
        publishingRecord.setPurpose(new Purpose[] { Purpose.REGISTRATION });
        publishingRecord.setVersion("1.0");
        publishingRecord.setPublishingStatus(PublishingStatus.INPROGRESS);
        publishingRecord.setLastUpdatedDate(new DateTime());
        return publishingRecord;
    }

    public static PublishingRecord manufactureValidPublishedPublishingRecord(final String assessmentId) {
        final PublishingRecord publishingRecord = PODAM_FACTORY.manufacturePojo(PublishingRecord.class);
        publishingRecord.setId(null);
        publishingRecord.setAssessmentId(assessmentId);
        publishingRecord.setPurpose(new Purpose[] { Purpose.REGISTRATION });
        publishingRecord.setVersion("1.0");
        publishingRecord.setPublishingStatus(PublishingStatus.PUBLISHED);
        publishingRecord.setLastUpdatedDate(new DateTime());
        return publishingRecord;
    }

    public static PerformanceLevel manufactureValidPerformanceLevel(final String assessmentId) {
        final PerformanceLevel performanceLevel = PODAM_FACTORY.manufacturePojo(PerformanceLevel.class);
        performanceLevel.setId(null);
        performanceLevel.setBlueprintReferenceType(BlueprintReferenceType.TEST);
        performanceLevel.setBlueprintReferenceId(assessmentId);
        performanceLevel.setAssessmentId(assessmentId);
        performanceLevel.getPerformanceLevelValues().clear();
        performanceLevel.getPerformanceLevelValues().add(manufactureValidPerformanceLevelValue(1));
        performanceLevel.getPerformanceLevelValues().add(manufactureValidPerformanceLevelValue(2));
        return performanceLevel;
    }

    public static PerformanceLevelValue manufactureValidPerformanceLevelValue(final int level) {
        final PerformanceLevelValue performanceLevelValue = PODAM_FACTORY.manufacturePojo(PerformanceLevelValue.class);
        performanceLevelValue.setLevel(level);
        performanceLevelValue.setScaledLo("0");
        performanceLevelValue.setScaledHi("10");
        return performanceLevelValue;
    }

    public static FileGroup manufactureValidSimulationFileGroup(final String simulationRecordId, final List<GridFile> gridFileList) {
        final FileGroup fileGroup = PODAM_FACTORY.manufacturePojo(FileGroup.class);
        fileGroup.setId(null);
        fileGroup.setSimulationRecordId(simulationRecordId);
        fileGroup.setName("file group name");
        fileGroup.setCreateDate(new DateTime());
        fileGroup.setGridFiles(gridFileList);
        return fileGroup;
    }

    public static FileGroup manufactureValidPsychometricFileGroup(final String psychometricRecordId, final List<GridFile> gridFileList) {
        final FileGroup fileGroup = PODAM_FACTORY.manufacturePojo(FileGroup.class);
        fileGroup.setId(null);
        fileGroup.setPsychometricRecordId(psychometricRecordId);
        fileGroup.setName("file group name");
        fileGroup.setCreateDate(new DateTime());
        fileGroup.setGridFiles(gridFileList);
        return fileGroup;
    }

    public static SimulationRecord manufactureValidSimulationRecord(final String assessmentId) {
        final SimulationRecord simulationRecord = PODAM_FACTORY.manufacturePojo(SimulationRecord.class);
        simulationRecord.setId(null);
        simulationRecord.setAssessmentId(assessmentId);
        simulationRecord.setVersion("1.0");
        simulationRecord.setLastUploadDate(new DateTime());
        return simulationRecord;
    }

    public static PsychometricRecord manufactureValidPsychometricRecord(final String publishingRecordId) {
        final PsychometricRecord psychometricRecord = PODAM_FACTORY.manufacturePojo(PsychometricRecord.class);
        psychometricRecord.setId(null);
        psychometricRecord.setPublishingRecordId(publishingRecordId);
        psychometricRecord.setVersion("1.0");
        psychometricRecord.setLastUploadDate(new DateTime());
        return psychometricRecord;
    }

    public static FormPartition manufactureValidFormPartition(final String assessmentId, final String name, final String formId, final String segmentId) {
        final FormPartition formPartition = new FormPartition();
        formPartition.setId(null);
        formPartition.setName(name);
        formPartition.setFormId(formId);
        formPartition.setSegmentId(segmentId);
        formPartition.setAssessmentId(assessmentId);
        return formPartition;
    }

    public static Segment manufactureValidSegment(final String assessmentId, final ItemSelectionAlgorithm itemSelectionAlgorithm, final int position) {
        final Segment segment = PODAM_FACTORY.manufacturePojo(Segment.class);
        segment.setId(null);
        segment.setAssessmentId(assessmentId);
        segment.setPosition(1);
        segment.setMinFtItems(0);
        segment.setMaxFtItems(999);
        segment.setMinOpItems(0);
        segment.setMaxOpItems(ItemSelectionAlgorithmType.FIELDTEST.equals(itemSelectionAlgorithm.getItemSelectionAlgorithmType()) ? 0 : 999);
        segment.setPosition(position);
        segment.setItemSelectionAlgorithmId(itemSelectionAlgorithm.getId());
        segment.setItemSelectionAlgorithm(null);

        segment.setItemSelectionParameters(new HashMap<String, String>());
        for (final ItemSelectionAlgorithmParameter parameter : itemSelectionAlgorithm.getScalarParameters()) {
            segment.getItemSelectionParameters().put(parameter.getParameterName(), parameter.getDefaultValue());
        }

        return segment;
    }

    public static ItemSelectionAlgorithm manufactureValidItemSelectionAlgorithm() {
        return manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.BOOLEAN);
    }

    public static ItemSelectionAlgorithm manufactureValidItemSelectionAlgorithm(final ItemSelectionPurpose parameterPurpose, final ItemSelectionType parameterType) {
        final ItemSelectionAlgorithm itemSelectionAlgorithm = PODAM_FACTORY.manufacturePojo(ItemSelectionAlgorithm.class);
        itemSelectionAlgorithm.setId(null);
        itemSelectionAlgorithm.setItemSelectionAlgorithmType(ItemSelectionAlgorithmType.ADAPTIVE);
        itemSelectionAlgorithm.setParameters(DomainFactory.manufactureValidItemSelectionAlgorithmParameters(parameterPurpose, parameterType, 1));
        itemSelectionAlgorithm.setVersion("1.0");
        return itemSelectionAlgorithm;
    }

    public static List<ItemSelectionAlgorithmParameter> manufactureValidItemSelectionAlgorithmParameters(final ItemSelectionPurpose purpose, final ItemSelectionType type, final int numberToBuild) {
        final List<ItemSelectionAlgorithmParameter> paramList = Lists.newArrayList();
        for (int i = 0; i < numberToBuild; i++) {
            paramList.add(DomainFactory.manufactureValidItemSelectionAlgorithmParameter(purpose, type, i + 1));
        }
        return paramList;
    }

    public static ItemSelectionAlgorithmParameter manufactureValidItemSelectionAlgorithmParameter(final ItemSelectionPurpose purpose, final ItemSelectionType type, final int position) {
        final ItemSelectionAlgorithmParameter parameter = new ItemSelectionAlgorithmParameter();
        parameter.setParameterName("parameter" + String.valueOf(position));
        parameter.setItemSelectionType(type);
        parameter.setItemSelectionPurpose(purpose);
        parameter.setPosition(position);

        switch (type) {
        case FLOAT:
        case INTEGER:
            parameter.setMinimumValue("0");
            parameter.setMaximumValue("10");
            parameter.setDefaultValue("5");
            break;
        case LIST:
            parameter.setItemSelectionList(DomainFactory.manufactureValidItemSelectionParameterElements(1));
            parameter.setDefaultValue(parameter.getItemSelectionList().get(0).getName());
            break;
        case BOOLEAN:
            parameter.setDefaultValue("false");
            break;
        case STRING:
            parameter.setDefaultValue("element1");
            break;
        }

        return parameter;
    }

    public static List<ItemSelectionParameterElement> manufactureValidItemSelectionParameterElements(final int numberToBuild) {
        final List<ItemSelectionParameterElement> elementList = Lists.newArrayList();
        for (int i = 0; i < numberToBuild; i++) {
            final ItemSelectionParameterElement element = new ItemSelectionParameterElement();
            element.setName("element" + String.valueOf(i + 1));
            element.setPosition(i + 1);
            elementList.add(element);
        }
        return elementList;
    }

    public static AffinityGroup manufactureValidAffinityGroup(final String assessmentId) {
        final AffinityGroup affinityGroup = PODAM_FACTORY.manufacturePojo(AffinityGroup.class);
        affinityGroup.setAssessmentId(assessmentId);
        affinityGroup.getAffinityGroupValueMap().clear();
        return affinityGroup;
    }

    public static AffinityGroup manufactureValidAffinityGroup(final String assessmentId, final Collection<Segment> segments) {
        final AffinityGroup affinityGroup = manufactureValidAffinityGroup(assessmentId);
        for (final Segment segment : segments) {
            affinityGroup.getAffinityGroupValueMap().put(segment.getId(), new AffinityGroupValue(1, 5, 1, 5));
            affinityGroup.getAffinityGroupValueMap().get(segment.getId()).setItemSelectionParameters(new HashMap<String, String>());
            for (final ItemSelectionAlgorithmParameter param : segment.getItemSelectionAlgorithm().getBlueprintParameters()) {
                affinityGroup.getAffinityGroupValueMap().get(segment.getId()).getItemSelectionParameters().put(param.getParameterName(), param.getDefaultValue());
            }
        }

        return affinityGroup;
    }
}
