/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.integration;

import static org.hamcrest.CoreMatchers.containsString;
import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.Assert.fail;

import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.DomainFactory;
import org.opentestsystem.authoring.testauth.domain.ItemMetadataKeys;
import org.opentestsystem.authoring.testauth.persistence.ItemMetadataKeysRepository;
import org.opentestsystem.authoring.testauth.rest.AbstractRestEmbeddedMongoTest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DuplicateKeyException;

public class ItemMetadataKeysRepositoryTest extends AbstractRestEmbeddedMongoTest {

    @Autowired
    private ItemMetadataKeysRepository itemMetadataKeysRepository;

    @Test
    public void saveItemMetadataKeysTest() {
        final ItemMetadataKeys itemMetadataKeys = manufactureValidItemMetadataKeysPojo("1");
        final ItemMetadataKeys savedItemMetadataKeys = this.itemMetadataKeysRepository.save(itemMetadataKeys);
        assertThat(savedItemMetadataKeys, is(notNullValue()));
        assertThat(savedItemMetadataKeys.getId(), is(notNullValue()));
    }

    @Test
    public void saveDuplicateItemMetadataKeysTest() {
        final ItemMetadataKeys itemMetadataKeys = manufactureValidItemMetadataKeysPojo("1");
        this.itemMetadataKeysRepository.save(itemMetadataKeys);

        final ItemMetadataKeys duplicateItemMetadataKeys = manufactureValidItemMetadataKeysPojo("1");
        try {
            this.itemMetadataKeysRepository.save(duplicateItemMetadataKeys);
            fail("should have thrown exception");
        } catch (final DuplicateKeyException e) {
            assertThat(e.getMessage(), containsString("assessment_itemMetadataKeys_indx"));
        }
    }

    @Test
    public void findItemMetadataKeysTest() {
        final ItemMetadataKeys itemMetadataKeys = manufactureValidItemMetadataKeysPojo("1");
        final ItemMetadataKeys savedItemMetadataKeys = this.itemMetadataKeysRepository.save(itemMetadataKeys);

        final ItemMetadataKeys foundItemMetadataKeys = this.itemMetadataKeysRepository.findOne(savedItemMetadataKeys.getId());
        assertThat(savedItemMetadataKeys.getId(), is(equalTo(foundItemMetadataKeys.getId())));
        assertThat(savedItemMetadataKeys, is(equalTo(foundItemMetadataKeys)));
    }

    @Test
    public void findByAssessmentIdTest() {
        final ItemMetadataKeys itemMetadataKeys = DomainFactory.manufactureValidItemMetadataKeys("1", "itemMetadataField1", "itemMetadataField");
        final ItemMetadataKeys savedItemMetadataKeys1 = this.itemMetadataKeysRepository.save(itemMetadataKeys);

        final ItemMetadataKeys retrievedItemMetadataKeys = this.itemMetadataKeysRepository.findByAssessmentId("1");
        assertThat(retrievedItemMetadataKeys, is(equalTo(savedItemMetadataKeys1)));
    }

    @Test
    public void removeItemMetadataKeysTest() {
        final ItemMetadataKeys itemMetadataKeys = manufactureValidItemMetadataKeysPojo("1");
        final ItemMetadataKeys savedItemMetadataKeys = this.itemMetadataKeysRepository.save(itemMetadataKeys);

        this.itemMetadataKeysRepository.delete(itemMetadataKeys);
        final ItemMetadataKeys foundItemMetadataKeys = this.itemMetadataKeysRepository.findOne(savedItemMetadataKeys.getId());
        assertThat(foundItemMetadataKeys, is(nullValue()));
    }

    private ItemMetadataKeys manufactureValidItemMetadataKeysPojo(final String assessmentId) {
        return DomainFactory.manufactureValidItemMetadataKeys(assessmentId, "itemMetadataField1", "itemMetadataField2");
    }
}
