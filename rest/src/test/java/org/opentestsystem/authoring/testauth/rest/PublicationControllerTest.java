/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.rest;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.Assert.fail;

import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.DomainFactory;
import org.opentestsystem.authoring.testauth.domain.Publication;
import org.opentestsystem.authoring.testauth.domain.Subject;
import org.opentestsystem.authoring.testauth.service.SubjectService;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;

public class PublicationControllerTest extends AbstractRestEmbeddedMongoTest {

    private static final String BASE_URL = "/publication";
    private Publication publication;
    private Subject savedSubject;
    private Map<String, Object> params;

    @Autowired
    private SubjectService subjectService;

    @Before
    public void buildParams() {
        final Subject subject = DomainFactory.manufactureValidSubject("ABB");
        subject.setInactive(false);
        savedSubject = this.subjectService.saveSubject(subject);

        this.publication = PODAM_FACTORY.manufacturePojo(Publication.class);
        this.publication.setId(null);
        this.publication.setSubjectIds(ImmutableSet.of(savedSubject.getId()));
        this.params = buildParamObject(this.publication);
    }

    @SuppressWarnings("unchecked")
    @Test
    public void getPublications() throws InterruptedException {
        final SearchResponse<Publication> publicationList = callGETRestService(BASE_URL, SearchResponse.class);
        final List<Publication> expectedList = Lists.newArrayList();
        assertThat(publicationList.getSearchResults(), is(equalTo(expectedList)));
    }

    @Test
    public void getPublication() throws InterruptedException {
        final Publication savedPublication = callPOSTRestService(BASE_URL, this.params, Publication.class);

        final Publication fetchedPublication = callGETRestService(BASE_URL + "/" + savedPublication.getId(), Publication.class);
        assertThat(fetchedPublication, is(not(nullValue())));
        assertThat(fetchedPublication.getId(), is(not(nullValue())));
        assertThat(fetchedPublication.getCoreStandardsPublisherKey(), is(this.publication.getCoreStandardsPublisherKey()));
        assertThat(fetchedPublication.getCoreStandardsSubjectKey(), is(this.publication.getCoreStandardsSubjectKey()));
        assertThat(fetchedPublication.getCoreStandardsPublicationKey(), is(this.publication.getCoreStandardsPublicationKey()));
        assertThat(fetchedPublication.getTenantId(), is(this.publication.getTenantId()));
        assertThat(fetchedPublication.getSubjectIds(), is(this.publication.getSubjectIds()));
    }

    @Test
    public void savePublication() throws InterruptedException {
        final Publication savedPublication = callPOSTRestService(BASE_URL, this.params, Publication.class);

        final Publication foundPublication = this.mongoTemplate.findById(savedPublication.getId(), Publication.class);

        assertThat(foundPublication, is(not(nullValue())));
        assertThat(foundPublication.getCoreStandardsPublisherKey(), is(this.publication.getCoreStandardsPublisherKey()));
        assertThat(foundPublication.getCoreStandardsSubjectKey(), is(this.publication.getCoreStandardsSubjectKey()));
        assertThat(foundPublication.getCoreStandardsPublicationKey(), is(this.publication.getCoreStandardsPublicationKey()));
        assertThat(foundPublication.getTenantId(), is(this.publication.getTenantId()));
        assertThat(foundPublication.getSubjectIds(), is(this.publication.getSubjectIds()));
    }

    @Test
    public void updatePublication() throws InterruptedException {
        final Publication savedPublication = callPOSTRestService(BASE_URL, this.params, Publication.class);
        assertThat(savedPublication, is(not(nullValue())));

        this.params.put("id", savedPublication.getId());
        this.params.put("tenantId", "new-tenant-id");
        callPUTRestService(BASE_URL + "/" + savedPublication.getId(), this.params, Publication.class);

        final Publication foundPublication = this.mongoTemplate.findById(savedPublication.getId(), Publication.class);

        assertThat(foundPublication, is(not(nullValue())));
        assertThat(foundPublication.getId(), is(savedPublication.getId()));
        assertThat(foundPublication.getTenantId(), is("new-tenant-id"));
        assertThat(foundPublication.getCoreStandardsPublicationKey(), is(this.publication.getCoreStandardsPublicationKey()));
    }

    @Test
    public void updatePublicationFailures() throws InterruptedException {
        final Publication savedPublication = callPOSTRestService(BASE_URL, this.params, Publication.class);
        assertThat(savedPublication, is(not(nullValue())));

        Map<String, List<String>> errorMessages = callPUTWithBadData(BASE_URL + "/" + savedPublication.getId(), null);
        assertApplicationErrorMessageReturned(errorMessages, "publication.invalid.id");

        errorMessages = callPUTWithBadData(BASE_URL + "/" + savedPublication.getId(), this.params);
        assertApplicationErrorMessageReturned(errorMessages, "publication.invalid.id");

        this.params.put("id", "invalid-id");
        errorMessages = callPUTWithBadData(BASE_URL + "/" + savedPublication.getId(), this.params);
        assertApplicationErrorMessageReturned(errorMessages, "publication.invalid.id");

    }

    @Test
    public void deletePublication() throws InterruptedException {
        final Publication savedPublication = callPOSTRestService(BASE_URL, this.params, Publication.class);

        assertThat(this.mongoTemplate.findAll(Publication.class).size(), is(1));
        try {
            callDeleteRestService(BASE_URL + "/" + savedPublication.getId());
        } catch (final Exception e) {
            fail("Cannot delete configuration");
        }

        assertThat(this.mongoTemplate.findAll(Publication.class).size(), is(0));
    }

    @SuppressWarnings("unchecked")
    @Test
    public void searchPublications() {

        final Map<String, Object> publicationParams1 = ImmutableMap.<String, Object> builder().put("coreStandardsPublisherKey", "csPublisher1").put("coreStandardsSubjectKey", "csSubject1")
                .put("coreStandardsPublicationKey", "csPublication1").put("tenantId", "tenant1").put("subjectIds", ImmutableSet.of("subject1", "subject2")).build();
        final Map<String, Object> publicationParams2 = ImmutableMap.<String, Object> builder().put("coreStandardsPublisherKey", "csPublisher1").put("coreStandardsSubjectKey", "csSubject1")
                .put("coreStandardsPublicationKey", "csPublication2").put("tenantId", "tenant1").put("subjectIds", ImmutableSet.of("subject1", "subject2")).build();
        final Map<String, Object> publicationParams3 = ImmutableMap.<String, Object> builder().put("coreStandardsPublisherKey", "csPublisher1").put("coreStandardsSubjectKey", "csSubject1")
                .put("coreStandardsPublicationKey", "csPublication3").put("tenantId", "tenant1").put("subjectIds", ImmutableSet.of("subject1", "subject2")).build();
        final Map<String, Object> publicationParams4 = ImmutableMap.<String, Object> builder().put("coreStandardsPublisherKey", "csPublisher1").put("coreStandardsSubjectKey", "csSubject1")
                .put("coreStandardsPublicationKey", "csPublication4").put("tenantId", "tenant1").put("subjectIds", ImmutableSet.of("subject1", "subject2")).build();

        callPOSTRestService(BASE_URL, publicationParams1, Publication.class);
        callPOSTRestService(BASE_URL, publicationParams2, Publication.class);
        callPOSTRestService(BASE_URL, publicationParams3, Publication.class);
        callPOSTRestService(BASE_URL, publicationParams4, Publication.class);
        assertThat(this.mongoTemplate.findAll(Publication.class).size(), is(4));

        final Map<String, String> params = Maps.newHashMap();
        params.put("coreStandardsPublicationKey", "csPublication1");
        SearchResponse<Publication> response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response, is(not(nullValue())));
        assertThat(response.getReturnCount(), is(1));

        params.clear();
        params.put("coreStandardsPublicationKey", "csPublication2");
        response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response, is(not(nullValue())));
        assertThat(response.getReturnCount(), is(1));

        params.clear();
        params.put("coreStandardsPublicationKey", "invalid");
        response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response, is(not(nullValue())));
        assertThat(response.getReturnCount(), is(0));

        params.clear();
        params.put("coreStandardsPublicationKey", "csPublication");
        response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response, is(not(nullValue())));
        assertThat(response.getReturnCount(), is(4));
    }

    @SuppressWarnings("unchecked")
    @Test
    public void getSubjectsAssignedToPublications() throws InterruptedException {
        final Publication savedPublication = callPOSTRestService(BASE_URL, this.params, Publication.class);

        final List<Subject> subjects = callGETRestService(BASE_URL + "/assignedSubjects?tenantId=" + savedPublication.getTenantId(), List.class);
        assertThat(subjects.size(), is(1));
    }

}
