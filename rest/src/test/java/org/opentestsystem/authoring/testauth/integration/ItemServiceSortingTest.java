/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.integration;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.Assert.assertTrue;

import java.util.ArrayList;
import java.util.List;

import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.FixedFormItemLocation;
import org.opentestsystem.authoring.testauth.domain.Item;
import org.opentestsystem.authoring.testauth.domain.ItemGroup;
import org.opentestsystem.authoring.testauth.domain.ItemLocation;
import org.opentestsystem.authoring.testauth.persistence.ItemRepository;
import org.springframework.beans.factory.annotation.Autowired;

public class ItemServiceSortingTest extends AbstractAssessmentServiceTest {

    @Autowired
    private ItemRepository itemRepository;

    private FixedFormItemLocation getItemLocation(final String itemId, final String partitionId, final String groupId, final int index1, final int index2) {
        final FixedFormItemLocation itemLocation = new FixedFormItemLocation();
        itemLocation.setFormPartitionId(partitionId);
        itemLocation.setItemGroupId(groupId);
        itemLocation.setItemIdentifier(itemId);
        itemLocation.setLevel1SortIndex(index1);
        itemLocation.setLevel2SortIndex(index2);
        return itemLocation;
    }

    @Test
    public void testUpdateItemLocationSortingInformation() {
        String partId = form1Partition11.getId();
        ItemGroup group = addFixedFormItemGroup(savedAssessment, form1Partition11, "GROUP_1");
        ItemGroup group2 = addFixedFormItemGroup(savedAssessment, form1Partition11, "GROUP_2");

        addFixedFormItem(partId, "APIP_001", group.getId());
        addLocationToItem(savedAssessment, getItemLocation("APIP_001", partId, Item.NO_GROUP_KEY, 0, 0));

        addFixedFormItem(partId, "APIP_002", group2.getId());
        addLocationToItem(savedAssessment, getItemLocation("APIP_002", partId, Item.NO_GROUP_KEY, 0, 0));

        addFixedFormItem(partId, "APIP_003", group.getId());
        addLocationToItem(savedAssessment, getItemLocation("APIP_002", partId, group2.getId(), 0, 0));

        ItemLocation loc = getItemLocation("APIP_001", group.getId());
        assertThat(loc.getLevel1SortIndex(), is(0));
        assertThat(loc.getLevel2SortIndex(), is(0));

        loc = getItemLocation("APIP_002", group2.getId());
        assertThat(loc.getLevel1SortIndex(), is(0));
        assertThat(loc.getLevel2SortIndex(), is(0));

        List<FixedFormItemLocation> itemsToReposition = new ArrayList<FixedFormItemLocation>();
        itemsToReposition.add(getItemLocation("APIP_003", partId, group.getId(), 1, 1));
        itemsToReposition.add(getItemLocation("APIP_001", partId, group.getId(), 1, 2));
        itemsToReposition.add(getItemLocation("APIP_002", partId, Item.NO_GROUP_KEY, 2, 1));
        itemsToReposition.add(getItemLocation("APIP_002", partId, group2.getId(), 3, 1));
        itemsToReposition.add(getItemLocation("APIP_003", partId, group2.getId(), 3, 2));
        itemsToReposition.add(getItemLocation("APIP_001", partId, Item.NO_GROUP_KEY, 4, 1));

        List<Item> items = itemService.getItemsByFormPartitionId(form1Partition11.getId());
        itemService.updateItemLocationSortingInformation(form1Partition11.getAssessmentId(), items, itemsToReposition);

        loc = getItemLocation("APIP_001", group.getId());
        assertThat(loc.getLevel1SortIndex(), is(1));
        assertThat(loc.getLevel2SortIndex(), is(2));

        loc = getItemLocation("APIP_002", group2.getId());
        assertThat(loc.getLevel1SortIndex(), is(3));
        assertThat(loc.getLevel2SortIndex(), is(1));
    }

    @Test
    public void testAutoSorting() {
        String partId = form1Partition11.getId();
        ItemGroup group = addFixedFormItemGroup(savedAssessment, form1Partition11, "GROUP_1");
        ItemGroup group2 = addFixedFormItemGroup(savedAssessment, form1Partition11, "GROUP_2");

        addFixedFormItem(partId, "APIP_001", group.getId());
        addLocationToItem(savedAssessment, getItemLocation("APIP_001", partId, Item.NO_GROUP_KEY, 0, 0));

        addFixedFormItem(partId, "APIP_002", group2.getId());
        addLocationToItem(savedAssessment, getItemLocation("APIP_002", partId, Item.NO_GROUP_KEY, 0, 0));

        addFixedFormItem(partId, "APIP_003", group.getId());
        addLocationToItem(savedAssessment, getItemLocation("APIP_003", partId, group2.getId(), 0, 0));

        ItemLocation loc = getItemLocation("APIP_001", group.getId());
        assertThat(loc.getLevel1SortIndex(), is(0));
        assertThat(loc.getLevel2SortIndex(), is(0));

        loc = getItemLocation("APIP_002", group2.getId());
        assertThat(loc.getLevel1SortIndex(), is(0));
        assertThat(loc.getLevel2SortIndex(), is(0));

        itemService.autoSortFormPartitionItems(savedAssessment.getId(), partId);

        List<Item> items = itemService.getItemsByFormPartitionId(form1Partition11.getId());
        List<FixedFormItemLocation> sortedLocations = itemService.getItemLocationsOnPartition(partId, items);
        // group 1 -> APIP_001, APIP_003
        // group 2 -> APIP_002, APIP_003
        // ungrouped - > APIP_001, APIP_001
        for (ItemLocation itemLoc : sortedLocations) {
            assertTrue("level 1sort position not set", itemLoc.getLevel1SortIndex() > 0);
            assertTrue("level 2 sort position not set", itemLoc.getLevel2SortIndex() > 0);
            assertTrue("sort position should be under 3", itemLoc.getLevel1SortIndex() <= 4);
            assertTrue("largest group size is 2", itemLoc.getLevel2SortIndex() <= 2);
        }

        ItemLocation loc1 = getItemLocation("APIP_001", group.getId());
        ItemLocation loc2 = getItemLocation("APIP_003", group.getId());
        assertThat(loc1.getLevel1SortIndex(), is(loc2.getLevel1SortIndex()));
        assertThat(loc1.getLevel2SortIndex(), is(not(loc2.getLevel2SortIndex())));

        loc1 = getItemLocation("APIP_002", group2.getId());
        loc2 = getItemLocation("APIP_003", group2.getId());
        assertThat(loc1.getLevel1SortIndex(), is(loc2.getLevel1SortIndex()));
        assertThat(loc1.getLevel2SortIndex(), is(not(loc2.getLevel2SortIndex())));
    }

    @Test
    public void testAddNonGroupedItem() {
        String partId = form1Partition11.getId();
        addFixedFormItem(partId, "APIP_001", Item.NO_GROUP_KEY);

        ItemLocation loc = getItemLocation("APIP_001", Item.NO_GROUP_KEY);
        assertThat(loc.getLevel1SortIndex(), is(0));
        assertThat(loc.getLevel2SortIndex(), is(0));

        itemService.autoSortFormPartitionItems(savedAssessment.getId(), partId);

        loc = getItemLocation("APIP_001", Item.NO_GROUP_KEY);
        assertThat(loc.getLevel1SortIndex(), is(1));
        assertThat(loc.getLevel2SortIndex(), is(1));

        addFixedFormItem(partId, "APIP_002", Item.NO_GROUP_KEY);

        loc = getItemLocation("APIP_002", Item.NO_GROUP_KEY);
        assertThat(loc.getLevel1SortIndex(), is(0));
        assertThat(loc.getLevel2SortIndex(), is(0));

        itemService.autoSortFormPartitionItems(savedAssessment.getId(), partId);

        loc = getItemLocation("APIP_002", Item.NO_GROUP_KEY);
        assertThat(loc.getLevel1SortIndex(), is(2));
        assertThat(loc.getLevel2SortIndex(), is(1));

        addFixedFormItem(partId, "APIP_003", Item.NO_GROUP_KEY);

        loc = getItemLocation("APIP_003", Item.NO_GROUP_KEY);
        assertThat(loc.getLevel1SortIndex(), is(0));
        assertThat(loc.getLevel2SortIndex(), is(0));

        itemService.autoSortFormPartitionItems(savedAssessment.getId(), partId);

        loc = getItemLocation("APIP_003", Item.NO_GROUP_KEY);
        assertThat(loc.getLevel1SortIndex(), is(3));
        assertThat(loc.getLevel2SortIndex(), is(1));
    }

    @Test
    public void testSortinWithGroup() {
        String partId = form1Partition11.getId();
        ItemGroup group = addFixedFormItemGroup(savedAssessment, form1Partition11, "GROUP_1");

        addFixedFormItem(partId, "APIP_001", Item.NO_GROUP_KEY);
        itemService.autoSortFormPartitionItems(savedAssessment.getId(), partId);

        ItemLocation loc = getItemLocation("APIP_001", Item.NO_GROUP_KEY);
        assertThat(loc.getLevel1SortIndex(), is(1));
        assertThat(loc.getLevel2SortIndex(), is(1));

        addLocationToItem(savedAssessment, getItemLocation("APIP_001", partId, group.getId(), 0, 0));
        itemService.autoSortFormPartitionItems(savedAssessment.getId(), partId);
        loc = getItemLocation("APIP_001", group.getId());
        assertThat(loc.getLevel1SortIndex(), is(2));
        assertThat(loc.getLevel2SortIndex(), is(1));

        addFixedFormItem(partId, "APIP_003", Item.NO_GROUP_KEY);
        addLocationToItem(savedAssessment, getItemLocation("APIP_003", partId, group.getId(), 0, 0));

        itemService.autoSortFormPartitionItems(savedAssessment.getId(), partId);

        loc = getItemLocation("APIP_003", group.getId());
        assertThat(loc.getLevel1SortIndex(), is(2));
        assertThat(loc.getLevel2SortIndex(), is(2));
        loc = getItemLocation("APIP_003", Item.NO_GROUP_KEY);
        assertThat(loc.getLevel1SortIndex(), is(3));
        assertThat(loc.getLevel2SortIndex(), is(1));

        addFixedFormItem(partId, "APIP_004", group.getId());
        itemService.autoSortFormPartitionItems(savedAssessment.getId(), partId);
        loc = getItemLocation("APIP_004", group.getId());
        assertThat(loc.getLevel1SortIndex(), is(2));
        assertThat(loc.getLevel2SortIndex(), is(3));

    }

    private void assertPosition(final String itemId, final String groupId, final int index1, final int index2) {
        ItemLocation loc = getItemLocation(itemId, groupId);
        assertThat("index 1 is off", loc.getLevel1SortIndex(), is(index1));
        assertThat("index 2 is off", loc.getLevel2SortIndex(), is(index2));
    }

    @Test
    public void testSortingWithGap() {
        String partId = form1Partition11.getId();
        ItemGroup group = addFixedFormItemGroup(savedAssessment, form1Partition11, "GROUP_1");
        ItemGroup group2 = addFixedFormItemGroup(savedAssessment, form1Partition11, "GROUP_2");

        addFixedFormItem(partId, "APIP_001", group.getId());
        addLocationToItem(savedAssessment, getItemLocation("APIP_001", partId, Item.NO_GROUP_KEY, 0, 0));

        addFixedFormItem(partId, "APIP_002", group2.getId());
        addLocationToItem(savedAssessment, getItemLocation("APIP_002", partId, Item.NO_GROUP_KEY, 0, 0));

        addFixedFormItem(partId, "APIP_003", group.getId());
        addLocationToItem(savedAssessment, getItemLocation("APIP_003", partId, group2.getId(), 0, 0));

        ItemLocation loc = getItemLocation("APIP_001", group.getId());
        assertThat(loc.getLevel1SortIndex(), is(0));
        assertThat(loc.getLevel2SortIndex(), is(0));

        loc = getItemLocation("APIP_002", group2.getId());
        assertThat(loc.getLevel1SortIndex(), is(0));
        assertThat(loc.getLevel2SortIndex(), is(0));

        List<FixedFormItemLocation> itemsToReposition = new ArrayList<FixedFormItemLocation>();
        itemsToReposition.add(getItemLocation("APIP_003", partId, group.getId(), 1, 1));
        itemsToReposition.add(getItemLocation("APIP_001", partId, group.getId(), 1, 2));
        itemsToReposition.add(getItemLocation("APIP_002", partId, Item.NO_GROUP_KEY, 5, 1));
        itemsToReposition.add(getItemLocation("APIP_002", partId, group2.getId(), 6, 1));
        itemsToReposition.add(getItemLocation("APIP_003", partId, group2.getId(), 6, 2));
        itemsToReposition.add(getItemLocation("APIP_001", partId, Item.NO_GROUP_KEY, 7, 1));

        List<Item> items = itemService.getItemsByFormPartitionId(form1Partition11.getId());
        itemService.updateItemLocationSortingInformation(form1Partition11.getAssessmentId(), items, itemsToReposition);

        itemService.autoSortFormPartitionItems(savedAssessment.getId(), partId);

        assertPosition("APIP_003", group.getId(), 1, 1);
        assertPosition("APIP_001", group.getId(), 1, 2);
        assertPosition("APIP_002", Item.NO_GROUP_KEY, 2, 1);

        assertPosition("APIP_002", group2.getId(), 3, 1);
        assertPosition("APIP_003", group2.getId(), 3, 2);

        assertPosition("APIP_001", Item.NO_GROUP_KEY, 4, 1);
    }

}
