/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.rest;

import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.shared.progman.client.domain.Tenant;
import org.opentestsystem.shared.security.domain.SbacRole;
import org.opentestsystem.shared.security.domain.SbacUser;
import org.opentestsystem.shared.security.domain.TenantContainer;
import org.opentestsystem.shared.security.service.TenancyService;
import org.opentestsystem.shared.security.service.UserService;
import org.opentestsystem.shared.web.AbstractRestController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.MediaType;
import org.springframework.security.access.annotation.Secured;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
public class UserController extends AbstractRestController {

    @Value("${component.name}:")
    private String componentName;

    @Autowired
    private UserService userService;

    @Autowired
    private TenancyService tenancyService;

    @RequestMapping(value = "/user/assets", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Test Read" })
    // NOTE: intentionally no @preAuthorize--non tenanted
    @ResponseBody
    public Map<String, Object> getAssets(@RequestParam(required = false, value = "tenantId") final String tenantId) {
        return userService.getAssetsForTenant(tenantId);
    }

    @RequestMapping(value = "/user/applicableTenants", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Test Read" })
    // NOTE: intentionally no @preAuthorize--non tenanted
    @ResponseBody
    public TenantContainer getApplicableTenants() {
        return this.userService.getUniqueTenantsForUser();
    }

    @RequestMapping(value = "/user/currentUser", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Test Read" })
    // NOTE: intentionally no @preAuthorize--non tenanted
    @ResponseBody
    public SbacUser getCurrentUser() {
        return this.userService.getCurrentUser();
    }

    @RequestMapping(value = "/user/hasPermission/{permission}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Test Read" })
    // NOTE: intentionally no @preAuthorize--non tenanted
    @ResponseBody
    public boolean userHasPermission(@PathVariable final String permission, @RequestParam(required = false, value = "tenantId") final String tenantId) {
        if (StringUtils.isNotEmpty(tenantId)) {
            return this.userService.getCurrentUser().hasPermissionForTenant(permission, tenantId);
        } else {
            return this.userService.getCurrentUser().hasPermission(permission);
        }
    }

}
