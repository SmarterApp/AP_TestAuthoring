/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.rest;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.opentestsystem.authoring.testauth.domain.BlueprintElement;
import org.opentestsystem.authoring.testauth.domain.BlueprintElementListPayload;
import org.opentestsystem.authoring.testauth.domain.BlueprintElementValue;
import org.opentestsystem.authoring.testauth.service.BlueprintElementService;
import org.opentestsystem.authoring.testauth.validation.BlueprintElementListPayloadValidator;
import org.opentestsystem.authoring.testauth.validation.BlueprintElementValidator;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.opentestsystem.shared.web.AbstractRestController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.access.annotation.Secured;
import org.springframework.security.access.prepost.PostAuthorize;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

/**
 * Used to manage blueprintElement info
 */
@Controller
public class BlueprintElementController extends AbstractRestController {

    @Autowired
    private BlueprintElementService blueprintElementService;

    @Autowired
    private BlueprintElementValidator blueprintElementValidator;

    @Autowired
    private BlueprintElementListPayloadValidator blueprintElementListPayloadValidator;

    @InitBinder("blueprintElement")
    protected void initBlueprintElementBinder(final WebDataBinder binder) {
        binder.setValidator(this.blueprintElementValidator);
    }

    @InitBinder("blueprintElementListPayload")
    protected void initBlueprintElementListPayloadBinder(final WebDataBinder binder) {
        binder.setValidator(this.blueprintElementListPayloadValidator);
    }

    /**
     * Gets blueprintElementService by blueprintElementId.
     * 
     * @param blueprintElement id.
     * @return blueprintElement object.
     */
    @RequestMapping(value = "/blueprintElement/{blueprintElementId}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Blueprint Read" })
    @PostAuthorize("hasPermission(returnObject, 'ROLE_Blueprint Read')")
    @ResponseBody
    public BlueprintElement findBlueprintElementById(@PathVariable final String blueprintElementId, final HttpServletResponse response) {
        return this.blueprintElementService.getBlueprintElement(blueprintElementId);
    }

    /**
     * Gets blueprintElementService by segmentId and mins.
     * 
     * @param segment id.
     * @return blueprintElement list.
     */
    @RequestMapping(value = "/blueprintElement/{segmentId}/searchBySegment", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Blueprint Read" })
    @PostAuthorize("hasPermission(returnObject, 'ROLE_Blueprint Read')")
    @ResponseBody
    public List<BlueprintElement> searchBlueprintElementBySegment(@PathVariable final String segmentId, final HttpServletRequest request) {
        final List<BlueprintElement> filteredElements = new ArrayList<BlueprintElement>();
        final SearchResponse<BlueprintElement> blueprintElements = this.blueprintElementService.searchBlueprintElements(request.getParameterMap());

        for (final BlueprintElement blueprintElement : blueprintElements.getSearchResults()) {
            final BlueprintElementValue bpElementValue = blueprintElement.getBlueprintElementValueMap().get(segmentId);
            if (bpElementValue != null) {
                if (bpElementValue.getFieldTestItemMinValue() > 0 && bpElementValue.getOperationalItemMinValue() > 0) {
                    filteredElements.add(blueprintElement);
                }
            }
        }
        return filteredElements;
    }

    /**
     * Updates blueprintElement.
     * 
     * @param blueprintElement to be saved.
     * @param response HttpServletResponse.
     * @return blueprintElement updated blueprintElement object.
     */
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "/blueprintElement/{blueprintElementId}", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Blueprint Modify" })
    @PreAuthorize("hasPermission(blueprintElement, 'ROLE_Blueprint Modify')")
    @ResponseBody
    public BlueprintElement updateBlueprintElement(@PathVariable final String blueprintElementId, @RequestBody @Valid final BlueprintElement blueprintElement, final HttpServletResponse response) {
        return this.blueprintElementService.saveBlueprintElement(blueprintElementId, blueprintElement);
    }

    /**
     * Updates all blueprintElements.
     * 
     * @param blueprintElementList to be saved.
     * @return List<BlueprintElement> updatedObjects.
     */
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "/blueprintElement", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Blueprint Modify" })
    @PreAuthorize("hasPermission(#blueprintElementListPayload.getBlueprintElements(), 'ROLE_Blueprint Modify')")
    @ResponseBody
    public List<BlueprintElement> updateBlueprintElementList(@RequestBody @Valid final BlueprintElementListPayload blueprintElementListPayload) {
        return this.blueprintElementService.saveBlueprintElementList(blueprintElementListPayload.getBlueprintElements());
    }

    @RequestMapping(value = "/blueprintElement", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Blueprint Read" })
    @PostAuthorize("hasPermission(returnObject, 'ROLE_Blueprint Read')")
    @ResponseBody
    public SearchResponse<BlueprintElement> searchBlueprintElement(final HttpServletRequest request) {
        return this.blueprintElementService.searchBlueprintElements(request.getParameterMap());
    }

    /**
     * refresh all blueprint elements for a blueprint with the latest from underlying core standards publication
     * 
     * @param assessmentId of the blueprint element data to be compared
     * @return list of updated blueprint elements
     */
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "/blueprintElement/{assessmentId}/synch", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Blueprint Modify" })
    @PreAuthorize("hasPermission(#assessmentId, 'assessment', 'ROLE_Blueprint Modify')")
    @ResponseBody
    public Integer synchronizeWithCoreStandardsBlueprintElementList(@PathVariable final String assessmentId) {
        return this.blueprintElementService.synchronizeWithCoreStandards(assessmentId);
    }

    @RequestMapping(value = "/blueprintElement/getElementTotalCounts/{assessmentId}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Blueprint Read" })
    @PostAuthorize("hasPermission(returnObject, 'ROLE_Blueprint Read')")
    @ResponseBody
    public Map<String, Integer> getElementTotalCounts(@PathVariable final String assessmentId, final HttpServletResponse response) {
        return this.blueprintElementService.getElementTotalCounts(assessmentId);
    }

    /**
     * create segment blueprint data
     * 
     * @param assessmentId parent key
     * @param segmentId new segment key to use
     * @return List<BlueprintElement> updatedObjects.
     */
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "/blueprintElement/{assessmentId}/segment/{segmentId}/add",
            method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Blueprint Modify" })
    @PreAuthorize("hasPermission(#assessmentId, 'assessment', 'ROLE_Blueprint Modify')")
    @ResponseBody
    public List<BlueprintElement> addSegmentToBlueprintElementData(@PathVariable final String assessmentId, @PathVariable final String segmentId,
            @RequestParam(required = false, value = "segmentIdToClone") final String segmentIdToClone) {
        return this.blueprintElementService.addBlueprintElementValueGroup(assessmentId, segmentId, segmentIdToClone);
    }

    /**
     * activate or deactivate all blueprint elements which match one of the given grades and assessment
     * 
     * @param assessmentId - the assessmentId to match BlueprintElements by
     * @param grades - the String[] to match BlueprintElements by
     * @param active - the boolean specifying whether to activate or deactivate the matched BlueprintElements
     * @return count of blueprint elements found (and updated) for the given assessmentId and grade array
     */
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "/blueprintElement/{assessmentId}/activate", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Blueprint Modify" })
    @PreAuthorize("hasPermission(#assessmentId, 'assessment', 'ROLE_Blueprint Modify')")
    @ResponseBody
    public Integer activateBlueprintElementGrades(
            @PathVariable final String assessmentId,
            @RequestParam(required = true, value = "grades") final String[] grades,
            @RequestParam(required = true, value = "active") final boolean active) {
        return this.blueprintElementService.activateBlueprintElementGrades(assessmentId, grades, active);
    }

    /**
     * activate or deactivate all blueprint elements which are in the given assessment/grade and which belong to the given standardKey tree
     * 
     * @param assessmentId - the assessmentId to match BlueprintElements by
     * @param grade - the grade to match BlueprintElements by
     * @param standardKey - the standardKey parent/child tree to activate or deactivate
     * @param active - the boolean specifying whether to activate or deactivate the matched BlueprintElements
     * @return count of blueprint elements found (and updated) for the given input
     */
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "/blueprintElement/{assessmentId}/activateStandard", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Blueprint Modify" })
    @PreAuthorize("hasPermission(#assessmentId, 'assessment', 'ROLE_Blueprint Modify')")
    @ResponseBody
    public Integer activateBlueprintElementStandards(
            @PathVariable final String assessmentId,
            @RequestParam(required = true, value = "grade") final String grade,
            @RequestParam(required = true, value = "standardKey") final String standardKey,
            @RequestParam(required = true, value = "active") final boolean active) {
        return this.blueprintElementService.activateBlueprintElementStandard(assessmentId, grade, standardKey, active);
    }

    /**
     * Clear the BlueprintElementValues for the given segmentId
     * 
     * @param assessmentId - the assessmentId for the blueprints
     * @param segmentId - the segmentId to clear
     * @return List<BlueprintElement> updated objects
     */
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "/blueprintElement/{assessmentId}/clear", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Blueprint Modify" })
    @PreAuthorize("hasPermission(#assessmentId, 'assessment', 'ROLE_Blueprint Modify')")
    @ResponseBody
    public List<BlueprintElement> clearBlueprint(
            @PathVariable final String assessmentId,
            @RequestParam(required = true, value = "segmentId") final String segmentId) {
        return this.blueprintElementService.clearBlueprint(assessmentId, segmentId);
    }
}
