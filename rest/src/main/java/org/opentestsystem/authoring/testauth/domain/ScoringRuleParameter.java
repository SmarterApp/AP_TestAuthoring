/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.domain;

import java.io.Serializable;
import java.util.List;

import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;
import org.hibernate.validator.constraints.NotBlank;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

@JsonIgnoreProperties(ignoreUnknown = true)
public class ScoringRuleParameter implements Serializable {
    private static final long serialVersionUID = 1693202958911228485L;

    private static final int SIXTY = 60;

    @NotBlank(message = "scoringRule.parameters.computationRuleParameterName.required")
    @Size(max = SIXTY, message = "scoringRule.parameters.computationRuleParameterName.length")
    private String computationRuleParameterName;
    @NotNull(message = "scoringRule.parameters.computationRuleParameterMultiplicity.required")
    private ComputationRuleMultiplicityType computationRuleParameterMultiplicity;
    private String scalarValue;
    private List<ScoringRuleDictionaryElement> dictionaryValue;

    public ScoringRuleParameter() {
        this.computationRuleParameterName = null;
        this.computationRuleParameterMultiplicity = null;
        this.scalarValue = null;
        this.dictionaryValue = null;
    }

    public ScoringRuleParameter(final String aComputationRuleParameterName, final ComputationRuleMultiplicityType aComputationRuleParameterMultiplicity, final String aScalarValue) {
        this.computationRuleParameterName = aComputationRuleParameterName;
        this.computationRuleParameterMultiplicity = aComputationRuleParameterMultiplicity;
        this.scalarValue = aScalarValue;
        this.dictionaryValue = null;
    }

    public ScoringRuleParameter(final String aComputationRuleParameterName,
            final ComputationRuleMultiplicityType aComputationRuleParameterMultiplicity,
            final List<ScoringRuleDictionaryElement> aDictionaryValue) {
        this.computationRuleParameterName = aComputationRuleParameterName;
        this.computationRuleParameterMultiplicity = aComputationRuleParameterMultiplicity;
        this.scalarValue = null;
        this.dictionaryValue = aDictionaryValue;
    }

    public String getComputationRuleParameterName() {
        return this.computationRuleParameterName;
    }

    public void setComputationRuleParameterName(final String aComputationRuleParameterName) {
        this.computationRuleParameterName = aComputationRuleParameterName;
    }

    public ComputationRuleMultiplicityType getComputationRuleParameterMultiplicity() {
        return this.computationRuleParameterMultiplicity;
    }

    public void setComputationRuleParameterMultiplicity(final ComputationRuleMultiplicityType computationRuleParameterMultiplicity) {
        this.computationRuleParameterMultiplicity = computationRuleParameterMultiplicity;
    }

    public String getScalarValue() {
        return this.scalarValue;
    }

    public void setScalarValue(final String aScalarValue) {
        this.scalarValue = aScalarValue;
    }

    public List<ScoringRuleDictionaryElement> getDictionaryValue() {
        return this.dictionaryValue;
    }

    public void setDictionaryValue(final List<ScoringRuleDictionaryElement> aDictionaryValue) {
        this.dictionaryValue = aDictionaryValue;
    }

    @Override
    public boolean equals(final Object obj) {
        return EqualsBuilder.reflectionEquals(this, obj);
    }

    @Override
    public String toString() {
        return ToStringBuilder.reflectionToString(this, ToStringStyle.SHORT_PREFIX_STYLE);
    }

    @Override
    public int hashCode() {
        return HashCodeBuilder.reflectionHashCode(this);
    }
}
