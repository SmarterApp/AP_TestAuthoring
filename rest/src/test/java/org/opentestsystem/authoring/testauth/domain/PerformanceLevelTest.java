/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.domain;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.MatcherAssert.assertThat;

import java.util.ArrayList;

import org.junit.Test;

public class PerformanceLevelTest {

    @Test
    public void equalsTest() {
        final PerformanceLevel expected = createDummyPerformanceLevel();
        final PerformanceLevel actual = createDummyPerformanceLevel();
        final PerformanceLevel unexpected = createDummyPerformanceLevel();
        unexpected.getPerformanceLevelValues().get(0).setScaledLo("2");

        assertThat(actual, is(equalTo(expected)));
        assertThat(actual, is(not(equalTo(unexpected))));
    }

    @Test
    public void toStringTest() {
        final PerformanceLevel expected = createDummyPerformanceLevel();
        final PerformanceLevel actual = createDummyPerformanceLevel();

        assertThat(actual.toString(), is(equalTo(expected.toString())));
    }

    @Test
    public void hashcodeTest() {
        final PerformanceLevel expected = createDummyPerformanceLevel();
        final PerformanceLevel actual = createDummyPerformanceLevel();

        assertThat(actual.hashCode(), is(equalTo(expected.hashCode())));
    }

    private PerformanceLevel createDummyPerformanceLevel() {
        final PerformanceLevel performanceLevel = new PerformanceLevel();
        performanceLevel.setId("1");
        performanceLevel.setAssessmentId("assessmentId");
        performanceLevel.setBlueprintReferenceType(BlueprintReferenceType.STANDARD);
        performanceLevel.setBlueprintReferenceId("performanceLevelReferenceId");

        performanceLevel.setPerformanceLevelValues(new ArrayList<PerformanceLevelValue>());
        performanceLevel.getPerformanceLevelValues().add(new PerformanceLevelValue());
        performanceLevel.getPerformanceLevelValues().get(0).setLevel(1);
        performanceLevel.getPerformanceLevelValues().get(0).setScaledLo("0");
        performanceLevel.getPerformanceLevelValues().get(0).setScaledHi("1");

        return performanceLevel;
    }
}
