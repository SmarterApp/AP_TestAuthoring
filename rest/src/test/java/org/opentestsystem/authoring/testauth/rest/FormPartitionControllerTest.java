/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.rest;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;

import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.Assessment;
import org.opentestsystem.authoring.testauth.domain.DomainFactory;
import org.opentestsystem.authoring.testauth.domain.Form;
import org.opentestsystem.authoring.testauth.domain.FormPartition;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionAlgorithm;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionAlgorithmType;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionPurpose;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionType;
import org.opentestsystem.authoring.testauth.domain.Publication;
import org.opentestsystem.authoring.testauth.domain.Segment;
import org.opentestsystem.authoring.testauth.domain.Subject;
import org.opentestsystem.authoring.testauth.service.AssessmentService;
import org.opentestsystem.authoring.testauth.service.FormService;
import org.opentestsystem.authoring.testauth.service.ItemSelectionAlgorithmService;
import org.opentestsystem.authoring.testauth.service.PublicationService;
import org.opentestsystem.authoring.testauth.service.SegmentService;
import org.opentestsystem.authoring.testauth.service.SubjectService;
import org.opentestsystem.shared.docs.annotation.ApiDocExample;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.Maps;

public class FormPartitionControllerTest extends AbstractRestEmbeddedMongoTest {

    private static final String BASE_URL = "/formPartition";

    @Autowired
    private PublicationService publicationService;

    @Autowired
    private SubjectService subjectService;

    @Autowired
    private AssessmentService assessmentService;

    @Autowired
    private ItemSelectionAlgorithmService itemSelectionAlgorithmService;

    @Autowired
    private SegmentService segmentService;

    @Autowired
    private FormService formService;

    private Assessment savedAssessment;
    private ItemSelectionAlgorithm savedAlgorithm;
    private Segment savedSegment;
    private Form savedForm;

    @ApiDocExample(rank = -1)
    @Before
    public void setupTestData() {
        final Subject savedSubject = this.subjectService.saveSubject(DomainFactory.manufactureValidSubject("ABB"));
        final Publication savedPublication = this.publicationService.savePublication(PODAM_FACTORY.manufacturePojo(Publication.class));
        this.savedAssessment = this.assessmentService.saveAssessment(DomainFactory.manufactureValidAssessment(savedSubject, savedPublication));

        final ItemSelectionAlgorithm algorithm = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.BOOLEAN);
        algorithm.setItemSelectionAlgorithmType(ItemSelectionAlgorithmType.FIXEDFORM);
        this.savedAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithm);

        final Segment segmentToSave = DomainFactory.manufactureValidSegment(this.savedAssessment.getId(), this.savedAlgorithm, 1);
        this.savedSegment = this.segmentService.createSegment(segmentToSave);

        final Form formToSave = DomainFactory.manufactureValidForm(this.savedAssessment.getId());
        this.savedForm = this.formService.saveForm(null, formToSave);
    }

    @ApiDocExample(rank = 1)
    @Test
    public void saveFormPartition() throws InterruptedException {
        final FormPartition savedFormPartition = callPOSTRestService(BASE_URL, buildParamObject(buildFormPartitionMap()), FormPartition.class);
        final FormPartition retrievedFormPartition = this.mongoTemplate.findById(savedFormPartition.getId(), FormPartition.class);

        assertThat(retrievedFormPartition, is(notNullValue()));
        assertThat(retrievedFormPartition.getSegmentId(), is(equalTo(savedFormPartition.getSegmentId())));
    }

    @ApiDocExample(rank = 2)
    @Test
    public void updateFormPartition() throws InterruptedException {
        final FormPartition savedFormPartition = callPOSTRestService(BASE_URL, buildParamObject(buildFormPartitionMap()), FormPartition.class);
        assertThat(savedFormPartition, is(notNullValue()));

        savedFormPartition.setName("new-name");
        final FormPartition updatedFormPartition = callPUTRestService(BASE_URL + "/" + savedFormPartition.getId(), buildParamObject(savedFormPartition), FormPartition.class);

        assertThat(updatedFormPartition, is(notNullValue()));
        assertThat(updatedFormPartition.getName(), is(equalTo("new-name")));
    }

    @ApiDocExample(rank = 3)
    @Test
    public void testRemoveFormPartition() throws InterruptedException {
        final FormPartition savedFormPartition1 = callPOSTRestService(BASE_URL, buildParamObject(buildFormPartitionMap()), FormPartition.class);
        final Segment segmentToSave = DomainFactory.manufactureValidSegment(this.savedAssessment.getId(), this.savedAlgorithm, this.savedSegment.getPosition() + 1);
        final Segment savedSegment2 = this.segmentService.createSegment(segmentToSave);
        final FormPartition savedFormPartition2 = callPOSTRestService(BASE_URL, buildFormPartitionMap("name2", savedSegment2.getId()), FormPartition.class);
        assertThat(this.mongoTemplate.findAll(FormPartition.class).size(), is(equalTo(2)));

        callDeleteRestService(BASE_URL + "/" + savedFormPartition2.getId());

        final FormPartition fetchedFormPartition1 = callGETRestService(BASE_URL + "/" + savedFormPartition1.getId(), FormPartition.class);
        assertThat(fetchedFormPartition1, is(notNullValue()));

        final FormPartition fetchedFormPartition2 = callGETRestService(BASE_URL + "/" + savedFormPartition2.getId(), FormPartition.class);
        assertThat(fetchedFormPartition2, is(nullValue()));
    }

    @ApiDocExample(rank = 4)
    @Test
    public void findFormPartition() throws InterruptedException {
        final FormPartition savedFormPartition1 = callPOSTRestService(BASE_URL, buildParamObject(buildFormPartitionMap()), FormPartition.class);

        final FormPartition fetchedFormPartition = callGETRestService(BASE_URL + "/" + savedFormPartition1.getId(), FormPartition.class);
        assertThat(fetchedFormPartition, is(notNullValue()));
    }

    @ApiDocExample(rank = 5)
    @SuppressWarnings("unchecked")
    @Test
    public void findFormPartitions() throws InterruptedException {
        callPOSTRestService(BASE_URL, buildParamObject(buildFormPartitionMap()), FormPartition.class);

        final SearchResponse<FormPartition> response = callGETRestService(BASE_URL, SearchResponse.class);
        assertThat(response.getSearchResults().size(), is(1));
    }

    @ApiDocExample(rank = -1)
    @SuppressWarnings("unchecked")
    @Test
    public void searchFormPartitions() {
        for (int i = 0; i < 10; i++) {
            final Segment segmentToSave = DomainFactory.manufactureValidSegment(this.savedAssessment.getId(), this.savedAlgorithm, this.savedSegment.getPosition() + i + 1);
            final Segment savedSegment2 = this.segmentService.createSegment(segmentToSave);
            callPOSTRestService(BASE_URL, buildFormPartitionMap("name" + i, savedSegment2.getId()), FormPartition.class);
        }
        final List<FormPartition> savedFormPartitions = this.mongoTemplate.findAll(FormPartition.class);
        assertThat(savedFormPartitions.size(), is(10));

        final Map<String, String> params = Maps.newHashMap();
        SearchResponse<FormPartition> response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getSearchResults().size(), is(10));

        params.clear();
        params.put("formId", "invalid-formId");
        response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getSearchResults().size(), is(0));

        params.clear();
        params.put("formId", this.savedForm.getId());
        params.put("name", "invalid-name");
        response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getSearchResults().size(), is(0));

        params.clear();
        params.put("formId", this.savedForm.getId());
        params.put("name", savedFormPartitions.get(0).getName());
        response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getSearchResults().size(), is(1));

        params.clear();
        response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getReturnCount(), is(10));
        assertThat(response.getSearchResults().size(), is(10));
    }

    private Map<String, Object> buildFormPartitionMap() {
        return buildFormPartitionMap("name", this.savedSegment.getId());
    }

    private Map<String, Object> buildFormPartitionMap(final String name, final String segmentId) {
        final FormPartition formPartition = DomainFactory.manufactureValidFormPartition(this.savedSegment.getId(), name, this.savedForm.getId(), segmentId);
        return buildParamObject(formPartition);
    }
}
