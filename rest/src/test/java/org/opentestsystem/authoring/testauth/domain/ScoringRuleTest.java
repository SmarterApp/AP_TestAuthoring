/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.domain;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.MatcherAssert.assertThat;

import org.junit.Test;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.Lists;

public class ScoringRuleTest {

    @Test
    public void equalsTest() {
        final ScoringRule expected = createDummyScoringRule();
        final ScoringRule actual = createDummyScoringRule();
        final ScoringRule unexpected = createDummyScoringRule();
        unexpected.setLabel("unexpected-label");

        assertThat(actual, is(equalTo(expected)));
        assertThat(actual, is(not(equalTo(unexpected))));
    }

    @Test
    public void toStringTest() {
        final ScoringRule expected = createDummyScoringRule();
        final ScoringRule actual = createDummyScoringRule();

        assertThat(actual.toString(), is(equalTo(expected.toString())));
    }

    @Test
    public void hashcodeTest() {
        final ScoringRule expected = createDummyScoringRule();
        final ScoringRule actual = createDummyScoringRule();

        assertThat(actual.hashCode(), is(equalTo(expected.hashCode())));
    }

    private ScoringRule createDummyScoringRule() {
        final ScoringRule scoringRule = new ScoringRule();
        scoringRule.setId("1");
        scoringRule.setAssessmentId("assessmentId");
        scoringRule.setOrder(Integer.valueOf("1"));
        scoringRule.setComputationRuleId("computationRuleId");
        scoringRule.setLabel("label");
        scoringRule.setBlueprintReferenceType(BlueprintReferenceType.STANDARD);
        scoringRule.setBlueprintReferenceId("blueprintReferenceId");
        scoringRule.setValueConversionTableGridFsId("valueConversionTableGridFsId");
        scoringRule.setStandardErrorConversionTableGridFsId("standardErrorConversionTableGridFsId");
        scoringRule.setParameters(ImmutableList.of(
                new ScoringRuleParameter("computationRuleParam1-scalarData", ComputationRuleMultiplicityType.SCALAR, "scalarValue"),
                new ScoringRuleParameter("computationRuleParam2-dictionaryData", ComputationRuleMultiplicityType.DICTIONARY,
                        Lists.newArrayList(new ScoringRuleDictionaryElement("dictionaryKey1", "dictionaryValue1")))));
        scoringRule.setComputationRule(new ComputationRule());
        return scoringRule;
    }
}
