<!-- SBAC TESTPACKAGE DTD Version 0.1
Designed by Larry Albright, American Institutes for Research, 2013, 
  for Smarter Balanced Assessment Consortium. 
  
XML examples with permission of Delaware Department of Education and generated from their practice tests.
-->


<!-- <testpackage> is the root element 
It is a publication of a test for the purpose of registration, simulation, or administration. 
Each purpose requires varying degrees of information to conduct its 'business'. 
registration requires the least, followed by simulation and administration.
There is little difference between simulation and administration except that simulation does not require an item content package.
Simulations may also simulate itempools.
The <identifier> testpackage subelement identifies the test and version of the test data.
The 'version' attribute of the <testpackage> identifies the version of the package itself.

<testpackage purpose="administration" publisher="Delaware_PT" publishdate="Mar 27 2013  1:40PM" version="1.0">
  <identifier uniqueid="(Delaware_PT)DCAS-Reading-5-Fall-2011-2012" name="DCAS-Reading-5" label="Grade 5 Reading" version="1136"/>
  <property name="subject" value="Reading" label="Reading"/>
  <property name="grade" value="5" label="grade 5"/>

<testpackage purpose="administration" publisher="Delaware_PT" publishdate="Mar 27 2013  2:40PM" version="1.0">
  <identifier uniqueid="(Delaware_PT)DCAS-EOC-AlgebraII-Spring-2012-2013" name="DCAS-EOC-AlgebraII" label="EOC-Algebra II" version="2747"/>
  <property name="subject" value="Mathematics" label="Mathematics"/>
  <property name="grade" value="10" label="grade 10"/>
  <property name="grade" value="11" label="grade 11"/>
  <property name="grade" value="12" label="grade 12"/>
  <property name="grade" value="7" label="grade 7"/>
  <property name="grade" value="8" label="grade 8"/>
  <property name="grade" value="9" label="grade 9"/>
...
</testpackage>
-->
<!ELEMENT testspecification (identifier, comment?, description? , property*, (administration | registration | reporting | scoring | complete )) >
<!ATTLIST testspecification
	publisher	CDATA #REQUIRED
	publishdate	CDATA #REQUIRED
	version		CDATA #IMPLIED
  purpose   (administration | registration | simulation | reporting | scoring | complete) #REQUIRED
>

<!-- <comment> and <description> are elements of general usefulness for documenting objects in the XML -->
<!ELEMENT comment (#PCDATA) >
<!ELEMENT description (#PCDATA) >

<!-- <identifier> 
Uniquely identifies all major objects. 

An object must be defined or declared to be referenced. 
All declarations are done at the test level. An should be defined/declared exactly once.
Where an element has an <identifier> sub-element it is defined/declared.
No element should be allowed to reference an object that has not been declared somewhere within the same document.
This constraint allows test packages to be sound.

Two elements in different packages may identify the same object via the 'uniqueid', but with different versions (or the same version)
Version numbers should be provided for every object.  By doing so, the consumer of serial packages of the same test can make 
determinations on which objects need to be updated and what impact those updates may have upon examinees' tests in progress

<identifier uniqueid="(Delaware_PT)DCAS-Reading-5-Fall-2011-2012" name="DCAS-Reading-5" label="Grade 5 Reading" version="1136"/>
-->
<!ELEMENT identifier EMPTY >
<!ATTLIST identifier
	uniqueid		CDATA #REQUIRED
	name			CDATA #REQUIRED
	label			CDATA #IMPLIED
  version   CDATA #IMPLIED
>

<!-- <property> 
A general-purpose element used especially to create extensibility of objects in the test package 

<property name="subject" value="Reading" label="Reading"/>
<property name="grade" value="5" label="grade 5"/>

The 'sequence' attribute may be useful in creating pseudo-arrays of properties
-->
<!ELEMENT property EMPTY>
<!ATTLIST property
  name    CDATA #REQUIRED
	value			CDATA #REQUIRED
	label			CDATA #IMPLIED
	sequence		CDATA #IMPLIED
>

<!-- Following are the 'driver' or 'master' elements that define each purpose of the <testpackage>.
Each is specifically targeted to a major component:
<registration> is targeted to the test registration and 'administration' systems 
    (administration configures test windows, accommodations etc, but does not actually administer tests to examinees)
<scoring> is targeted to the test scoring component: that which produces all test scores (but not item-level scores)
<reporting> targets the data warehouse/reporting component by providing information needed to prepare the system for reporting
<administration> targets the test delivery system, that which actually administers tests to examinees

Also, the <complete> element pulls all these aspects together into one place. It may be tempting to always use this, but relying
solely on this element for a modularized system will increase the dependencies between components and the number of times they must be updated.
For example, does the reporting system really need to know every item inactivation that may occur in a test's lifecycle even though
the reporting parameters never change?

-->

<!-- <complete> 
The <complete> 'master' element provides ALL data related to the test encompassing all aspects of 
registration, administration, scoring and reporting. 
<complete> is probably most relevant to the component that runs simulations of tests.
It has a somewhat different structure from any of the other master elements to prevent duplication.
-->
<!ELEMENT complete (testblueprint, poolproperty*, itempool, testform*, adminsegment+, performancelevels, scoringrules, reportingmeasures,  comment?) >

<!-- <registration> 
the registration format is used by both the Test Registration and Test Administration SBAC system components 
It provides high-level information about the test useful for establishing eligibility and accommodations
for examinees.
Properties of the test forms may be needed to assign specific forms to students with special needs.
Properties of the item pool may be needed for the same purpose for adaptive tests.

-->
<!ELEMENT registration (registrationform*, poolproperty*, registrationsegment+, comment?) >


<!-- <administration> 
the administration format is used by the Test Delivery component. It assumes that test scoring and test reporting 
are separate components that work independently from Test Delivery.

<testform> is optional when there are no fixedform segments on the test

-->
<!ELEMENT administration (testblueprint, poolproperty*, itempool, testform*, adminsegment+, comment?) >

<!-- <scoring>
Provide blueprint and itempool information at the test-level together with scoring requirements to configure the test scorer
-->
<!ELEMENT scoring (testblueprint, itempool, testform*, performancelevels, scoringrules ) >

<!-- <reporting>
The purpose of the reporting incarnation of this XML is to facilitate configuration of the data warehouse and reporting system
allowing it to prepare to receive testing data on individual examinees and report aggregates on same.

The main purpose of the blueprint is in keeping with the design principle that all blueprint elements are declared before referenced,
however, with this information the reporting system can provide reports on blueprint satisfaction, especially in cases of adaptive tests.

In the event that the reporting system is required to provide detailed reports on such features as item or form distribution and requires
advance information to configure these reports, itempool and testform are provided as options.

-->
<!ELEMENT reporting (testblueprint, performancelevels, reportingmeasures, itempool?, testform*) >

<!-- <reportingmeasures>
Encapsulates the entire collection of reporting measures
-->
<!ELEMENT reportingmeasures (reportingmeasure*) >

<!-- <reportingmeasure>

For a given blueprint element, all the scores which will be available for reporting.


<reportingmeasure bpelementid="ELA-2">
  <scoretype scorename="ThetaScore" scorelabel="ThetaScore"/>
  <scoretype scorename="ItemCount" scorelabel="ItemCount"/>
  <scoretype scorename="RawScore" scorelabel="RawScore"/>
  <scoretype scorename="ItemCountScored" scorelabel="ItemCountScored"/>
  <scoretype scorename="ScaleScore" scorelabel="InstructionalScore"/>
</reportingmeasure>

<reportingmeasure bpelementid="ELA-2|2.1">
  <scoretype scorename="GLEDelta" scorelabel="BenchmarkScore"/>
</reportingmeasure>
-->
<!ELEMENT reportingmeasure ( scoretype+ ) >
<!ATTLIST reportingmeasure 
  bpelementid   CDATA #REQUIRED
  >

<!-- <scoretype>
Specifies to the reporting system how to identify a score.
'scorename' and 'scorelabel' are often the same, though 'scorename' may refer to an internal scoring function.
'scorelabel' is terminology to present to users, however, the Data Warehouse may be configure to present alternative names.

-->
<!ELEMENT scoretype EMPTY >
<!ATTLIST scoretype 
  scorename   CDATA #REQUIRED
  scorelabel  CDATA #REQUIRED
  >

<!-- <testform> 
test-level form definition. (Only required when segments use the 'fixed form' item selection algorithm)

This is used by the test registration/administration module to pre-assign specific forms to examinees.
It also is used to establish the defined and finite set of cohorts to which every segment fixed form must belong 
poolproperty provides an overview of properties of items on the form.

<testform length="42">
  <identifier uniqueid="(Delaware_PT)DCAS-EOC-AlgebraII-Spring-2012-2013:DEFAULT-ENU" name="(Delaware_PT)DCAS-EOC-AlgebraII-Spring-2012-2013:DEFAULT-ENU" version="2747"/>
  <property name="language" value="ENU" label="English"/>
  <poolproperty property="ITEMTYPE" value="GI" label="GI" itemcount="4"/>
  <poolproperty property="ITEMTYPE" value="MC" label="MC" itemcount="38"/>
  <poolproperty property="Language" value="ENU" label="English" itemcount="42"/>
  <formpartition>
    <identifier uniqueid="150-172" name="EOC Algebra II Practice Seg 1::ENG" version="2747"/>
    <itemgroup formposition="1" maxitems="ALL" maxresponses="0">
      <identifier uniqueid="150-172:I-150-15869" name="150-172:I-150-15869" version="2747"/>
      <groupitem itemid="150-15869" formposition="1" groupposition="1" adminrequired="true" responserequired="true" isactive="true" isfieldtest="false" blockid="A"/>
    </itemgroup>
...
</testform>
-->
<!ELEMENT testform (identifier, property*, poolproperty*, formpartition+) >

<!-- <formpartition> 
Identifies a subset of the testform. The formpartition is referenced by <segmentform> where its itemgroup sequence is specified.

(See <testform> for XML exmaple)
-->
<!ELEMENT formpartition (identifier, itemgroup+) >

<!-- <registrationform>
A reduced-format of the <testform> intended to provide enough information for the registration/administration component
to assign forms to examinees if desired.
-->
<!ELEMENT registrationform (identifier, property*, poolproperty*) >


<!-- <testblueprint> test or segment top-level blueprint specification.
Test-level blueprint is needed to score or report a test. 

(Segment-level blueprint is needed to construct an adaptive test for a given examinee.)

-->
<!ELEMENT testblueprint (bpelement*, property*) >


<!-- <bpelement> 
Each element or component of a blueprint must have a corresponding bpelement.
A bpelement identifies a set of items for one or both of the following purposes:
  Creating a test 'form' adaptively, 
  Scoring a test.
  Reporting test results.

In addition to a subject's taxonomy of content standards, the following are also <bpelement>s:
  The test itself (for establishing scoring and reporting features)
  Every test segment (for item selection and administration)
  Depth of Knowledge categories
  Other (arbitrary) sets of items (may be useful for ad hoc identification of sets)
  
At AIR we lump Depth of Knowledge and other arbitrary sets of items into one object type we call an 'AffinityGroup'.
This is also used for the SBAC Content Standards Repository object called 'SOCK', an acronym for 'Some Other Category of Knowledge'


ATTRIBUTES:
- elementtype: an arbitrary designation, usually from some aspect of a taxonomy defining the subject-area.
                Other elementtypes exist outside of the taxonomy
- parentid: the uniqueid of another bpelement, generally within the taxonomy. 
    Since a <bpelement> may have at most one parent, at most hierarchies may be expressed.
- minopitems/maxopitems: the minimum and maximum operational items to administer from this blueprint category
- minftitems/maxftitems: the minimum and maximum field test items to administer
- opitemcount: the number of active operational items in the itempool (may be the target number for simulators where items themselves may be simulated)
- ftitemcount: the number of active field test items in the itempool

<testblueprint>
  <bpelement elementtype="test" minopitems="42" maxopitems="42" minftitems="0" maxftitems="0" opitemcount="42" ftitemcount="0">
    <identifier uniqueid="(Delaware_PT)DCAS-EOC-AlgebraII-Spring-2012-2013" name="DCAS-EOC-AlgebraII" version="2747"/>
  </bpelement>
  <bpelement elementtype="segment" minopitems="20" maxopitems="20" minftitems="0" maxftitems="0" opitemcount="20" ftitemcount="0">
    <identifier uniqueid="(Delaware_PT)DCAS-PT-EOC2ALG2Seg1-Mathematics-HS-Spring-2012-2013" name="DCAS-PT-EOC2ALG2Seg1-Mathematics-HS" version="2747"/>
  </bpelement>
  <bpelement elementtype="segment" minopitems="22" maxopitems="22" minftitems="0" maxftitems="0" opitemcount="22" ftitemcount="0">
    <identifier uniqueid="(Delaware_PT)DCAS-PT-EOC2ALG2Seg2-Mathematics-HS-Spring-2012-2013" name="DCAS-PT-EOC2ALG2Seg2-Mathematics-HS" version="2747"/>
  </bpelement>
  <bpelement elementtype="strand" minopitems="0" maxopitems="42" opitemcount="42" ftitemcount="0">
    <identifier uniqueid="Delaware_PT-Mathematics-Undesignated" name="Mathematics-Undesignated" version="2747"/>
  </bpelement>
</testblueprint>

-->
<!ELEMENT bpelement (identifier, property*) >
<!ATTLIST bpelement
	elementtype CDATA #REQUIRED 
  parentid    CDATA #IMPLIED
	minopitems	CDATA #IMPLIED 
	maxopitems	CDATA #IMPLIED 
	minftitems	CDATA #IMPLIED 
	maxftitems	CDATA #IMPLIED
  opitemcount CDATA #IMPLIED
  ftitemcount CDATA #IMPLIED
>

<!-- <bpref>
Reference to a blueprint element, used when an object requires references to multiple <bpelement>s.
For elements in a one-to-one correspondence, an element attribute is more succinct. These attributes are usually called 'bpelementid'. 
-->
<!ELEMENT bpref (#PCDATA) >

<!-- <poolproperty>
A property that at least one item possesses.

Poolproperty, when given on a test or testform, is primarily useful for determining accommodations.
On fixed form tests it may be desirable to pre-assign to examinees a specific form which possess pool properties needed to support certain accommodations.
On adaptive tests, accommodations may be linked to pool properties to dynamically filter items in or out of an individual examinee's itempool.

<poolproperty property="Language" value="ENU" label="English" itemcount="20"/>
<poolproperty property="Language" value="ESN" label="Spanish" itemcount="20"/>
<poolproperty property="ITEMTYPE" value="MC" label="Multiple Choice" itemcount="17"/>
<poolproperty property="ITEMTYPE" value="SCR" label="Short Constructed Response" itemcount="2"/>

-->
<!ELEMENT poolproperty (comment?, description?) >
<!ATTLIST poolproperty
  property    CDATA #REQUIRED
  value       CDATA #REQUIRED
  label       CDATA #IMPLIED
  itemcount   CDATA #IMPLIED
  >

<!-- <itempool>
A complete collection of items, passages, and enemies on a test
regarding testitem* (implying 0 or more items): It is, of course, impossible to administer a test with no items,
however, it may be useful to simulate an itempool for the purposes of adaptive algorithm design or blueprint configuration.
In this special case, the <itempool> element is empty.
-->
<!ELEMENT itempool (testitem*, passage*, enemylist*)>

<!-- <passage>
A means of identifying a passage that appears in a test's itempool together with arbitrary properties it may possess
<passage filename="stim-150-100167.xml">
  <identifier uniqueid="150-100167" name="100167" version="1136"/>
</passage>
-->
<!ELEMENT passage (identifier, property*) >
<!ATTLIST passage
  filename    CDATA #IMPLIED
  >

<!-- <enemylist>
A means of constraining item or passage selections within and between segments
Elements of the same list are mutually exclusive: At most one enemy may be administered on a given test.
This may only be enforced by adaptive test segments.
-->
<!ELEMENT enemylist (identifier, enemy+) >


<!-- <enemy>
An element of an enemylist. 
Note that elements of an enemylist may be heterogeneous: items may be enemies of passages as well as other items.

Enemy lists are declared at the test level and apply across segments. They can only be honored by adaptive algorithms, however.
-->
<!ELEMENT enemy EMPTY >
<!ATTLIST enemy
  objectid   CDATA #REQUIRED
  objecttype  (item | passage | itemgroup) #REQUIRED
>

<!-- <testitem>
An item on a test, this is the primary object (all others reference this object, e.g. <groupitem>, <enemy>)
All properties of <testitem> are considered immutable across segments and itemgroups except that a segment may restrict the item to a proper subset
of the properties it possesses at the test level through various means. (see <itemgroup> and <segmentblueprint>)

Every item is assumed to reference the 'test' <bpelement> so it is not necessary to include it here.
ATTRIBUTES:
- filename: If an item's content file(s) can be identified by the <identifier>'uniqueid' then this is not needed.
- itemtype: e.g. MC, ECR, SCR, etc. (Multiple Choice, Extended Constructed Response, Short Constructed Response). 

<testitem filename="item-150-11466.xml" itemtype="MC">
  <identifier uniqueid="150-11466" name="" version="2747"/>
  <bpref>(Delaware_PT)DCAS-PT-EOC2ALG2Seg1-Mathematics-HS-Spring-2012-2013</bpref>
  <bpref>Delaware_PT-Mathematics-Undesignated</bpref>
  <poolproperty property="Language" value="ENU" label="English"/>
  <poolproperty property="Language" value="ESN" label="Spanish"/>
  <itemscoredimension measuremodel="IRT3pl" scorepoints="1" weight="1.000000000000000e+000">
    <itemscoreparameter measurementparameter="a" value="1.000000000000000e+000"/>
    <itemscoreparameter measurementparameter="b" value="0.000000000000000e+000"/>
    <itemscoreparameter measurementparameter="c" value="0.000000000000000e+000"/>
  </itemscoredimension>
</testitem>

(We assume that item scoring rubrics whether for human hand scoring or for machine scoring are contained 
in the item's content XML.)
-->
<!ELEMENT testitem  (identifier, bpref*, passageref*, poolproperty*, itemscoredimension*) >
<!ATTLIST testitem
  filename  CDATA #IMPLIED
  itemtype  CDATA #IMPLIED
  >


<!-- <itemscoredimension> 
A dimension along which an item may be scored.
ATTRIBUTES:
- measurementmodel: e.g. IRT3PL, IRTPCL (must be recognizable by the test scoring engine; simulator may also need this info)
- scorepoints: maximum number of points an examinee may received for this item
- dimension: an item may have scores on multiple dimensions, each with its own scales and rules. Typically, however, there is a single dimension
- weight: where an item is scored separately on multiple dimensions, a composite score may be computed from a weighted combination of the dimension scores

<itemscoredimension measuremodel="IRT3pl" scorepoints="1" weight="1.000000000000000e+000">
  <itemscoreparameter measurementparameter="a" value="1.000000000000000e+000"/>
  <itemscoreparameter measurementparameter="b" value="-1.704800000000000e-001"/>
  <itemscoreparameter measurementparameter="c" value="0.000000000000000e+000"/>
</itemscoredimension>
-->
<!ELEMENT itemscoredimension (itemscoreparameter*, property*) >
<!ATTLIST itemscoredimension
	measurementmodel	CDATA #REQUIRED
    scorepoints	CDATA #REQUIRED
	dimension		CDATA #IMPLIED	
	weight		CDATA #IMPLIED 
	<!-- statdomain  CDATA #IMPLIED -->
>

<!-- <itemscoreparameter>
A parameter within a dimension. e.g. for IRT3pl there are 3 parameters, named a, b, and c.
-->
<!ELEMENT itemscoreparameter EMPTY >
<!ATTLIST itemscoreparameter
	measurementparameter	CDATA #REQUIRED
	value				CDATA #REQUIRED
>


<!-- <registrationsegment> 
Reduced amount of data for purposes of setting up rendering and administrative controls on a segment such as
- Segment-specific accommodations or test tools (e.g. calculators, text-to-speech)
- Pause points where test proctors may control segment entry and exit
-->
<!ELEMENT registrationsegment (identifier, poolproperty*) >
<!ATTLIST registrationsegment
	position	    CDATA #REQUIRED 
	itemselection CDATA #REQUIRED 
  minitems      CDATA #IMPLIED
  maxitems      CDATA #IMPLIED
>



<!-- <adminsegment> 
Every test is segmented (unsegmented tests have a single segment)
A segment defines a partition of a test wherein various presentational aspects may be controlled (such as isolating calculator items from non-calculator items)
ATTRIBUTES:
- segmentid: coincides with the segment <identifier> given as a test-level blueprint element
- position: segments must be administered in a strict order.
- itemselection: currently 'adaptive' or 'fixedform'. Use of CDATA instead of enumerated allows for extension
SUBELEMENTS:
- segmentblueprint: constraints for selecting items, each references a test-level <bpelement>
    The segment itself may be included in this set but it is not necessary since 
    segmentblueprint is optional for fixed form segments, but required for adaptive segments
- itemselector: the method for selecting items on the test (e.g. fixedform, adaptive)
- segmentform: references to all the <formpartition>s that may be selected for this segment.
    Note that only the first segment has responsibility for selecting the form itself. 
    Once the (parent) <testform> is established all following fixed-form segments must follow suit. 
      However, that is up to the <itemselector> to enforce.
      
   The two <segmentform>s in the example below represent an option. Each belongs to a different parent <testform>.
   The selection of the parent test form determines which of the two partitions referenced by the <segmentform>
   is administered to the examinee.

<adminsegment segmentid="(Delaware_PT)DCAS-PT-EOC2ALG2Seg1-Mathematics-HS-Spring-2012-2013" position="1" itemselection="fixedform">
  <segmentblueprint>
    <segmentbpelement bpelementid="Delaware_PT-Mathematics-Undesignated" minopitems="0" maxopitems="20"/>
  </segmentblueprint>
  <itemselector type="fixedform">
    <identifier uniqueid="AIR FIXEDFORM1" name="AIR FIXEDFORM" label="AIR FIXEDFORM" version="1.0"/>
  </itemselector>
  <segmentform formpartitionid="150-172"/>
  <segmentform formpartitionid="150-173"/>
</adminsegment>
-->
<!ELEMENT adminsegment (segmentblueprint, itemselector, (segmentpool | segmentform+)) >
<!ATTLIST adminsegment
  segmentid     CDATA #REQUIRED
	position	    CDATA #REQUIRED 
	itemselection CDATA #REQUIRED
>

<!-- <segmentblueprint> test or segment top-level blueprint specification.
Test-level blueprint is needed to score a test. 
Segment-level blueprint is needed to construct a test for a given examinee.
The segment blueprint attributes should not be repeated here since it can be defined in full as a test-level <bpelement>
-->
<!ELEMENT segmentblueprint (segmentbpelement*) >


<!-- <segmentbpelement> Each element or component of a blueprint at every level of a test must have a corresponding bpelement.
ATTRIBUTES:
- minopitems/maxopitems: the minimum and maximum operational items to administer from this blueprint category
- minftitems/maxftitems: the minimum and maximum field test items to administer

<segmentbpelement minopitems="0" maxopitems="3" >
  <bpref>"Delaware-ELA-2|2.4bL" name="ELA-2|2.4bL"</bpref>
</segmentbpelement>

-->
<!ELEMENT segmentbpelement (property*) >
<!ATTLIST segmentbpelement
  bpelementid CDATA #IMPLIED
	minopitems	CDATA #IMPLIED 
	maxopitems	CDATA #IMPLIED 
	minftitems	CDATA #IMPLIED 
	maxftitems	CDATA #IMPLIED
>


<!-- <itemselector> 
Specify which itemselection algorithm is to be used and the control parameters it needs to work 
The identifier uniqueid must unambiguously tell the item selection shell which algorithm to use

<itemselector type="fixedform">
  <identifier uniqueid="AIR FIXEDFORM1" name="AIR FIXEDFORM" label="AIR FIXEDFORM" version="1.0"/>
</itemselector>
      
<itemselector type="adaptive">
    <identifier uniqueid="AIR ADAPTIVE1" name="AIR ADAPTIVE" label="AIR ADAPTIVE" version="1.0"/>
-->
<!ELEMENT itemselector (identifier, itemselectionparameter*) >
<!ATTLIST itemselector
	type		CDATA #REQUIRED 
>

<!-- <itemselectionparameter>
Control parameters needed by the item selector beyond the core blueprint values of min/max item targets.
These are generally needed by adaptive item selection algorithms only and are unique and specific to each algorithm.

<itemselectionparameter bpelementid="Delaware-ELA-2">
  <property name="bpweight" value="3" label="Blueprint weight relative to other elements"/>
  <property name="adaptivecut" value="0.5024" label="adaptive cut point"/>
  <property name="startability" value="0.855226" label="start ability"/>
  <property name="startinfo" value="0.2" label="start information"/>
  <property name="scalar" value="5" label="relative ability strand weight"/>
</itemselectionparameter>
-->
<!ELEMENT itemselectionparameter (property*) >
<!ATTLIST itemselectionparameter
  bpelementid     CDATA #IMPLIED
  >

<!-- <segmentform>
For fixed form segments it references a <formpartition> within a form cohort, 
As such, there should be exactly one segmentform for each cohort per segment. 
-->
<!ELEMENT segmentform (property*) >
<!ATTLIST segmentform
  formpartitionid   CDATA #IMPLIED
>

<!ELEMENT segmentpool (itemgroup+) >

<!-- <itemgroup> 
A collection of items and passages that are selected and administered as an atomic unit.

It is not necessarily the case that every item in an itemgroup will be administered every time. 
Beside the fact that an item may be inactive, other forces include 
    item filtering due to examinee accommodations, 
    itemgroup pruning by an adaptive algorithm to avoid violating test constraints,
    etc.
    
ATTRIBUTES:
- maxresponses: the maximum number of responses an examinee is required to provide. 'ALL' means every item administered must be responded to.
- formposition: applicable only to fixedform segments, this dictates the position of the itemgroup on the segment (not the test)
- maxitems: for adaptive segments only, the maximum number of items to administer from this group. 
    maxitems is useful for developing an excess of items to cover various ability levels, 
    for example, and allowing the adaptive algorithm to choose among them as the situation indicates
    (maxitems may be used in future hybrid fixed-form/adaptive algorithms where, for example, the adaptive algorithm keeps track of the examinee's ability estimate and selects 'maxitems' from the group accordingly)
    
    
 <itemgroup formposition="1" maxitems="ALL" maxresponses="ALL">
    <identifier uniqueid="150-143:G-150-97" name="150-143:G-150-97" version="1.0"/>
    <passageref>150-97</passageref>
    <groupitem itemid="150-6255" groupposition="1" adminrequired="false" responserequired="false" isactive="true"/>
    <groupitem itemid="150-6256" groupposition="2" adminrequired="false" responserequired="false" isactive="true"/>
    <groupitem itemid="150-6257" groupposition="3" adminrequired="false" responserequired="false" isactive="true"/>
    <groupitem itemid="150-6259" groupposition="4" adminrequired="false" responserequired="false" isactive="true"/>
  </itemgroup>
-->
<!ELEMENT itemgroup (identifier, passageref*, groupitem+, property*) >
<!ATTLIST itemgroup
	maxresponses	CDATA #REQUIRED 
	formposition	CDATA #IMPLIED
  maxitems		CDATA #IMPLIED	
>

<!-- <passageref> 
A reference to a passage (the passage itself is defined at the test level; the element value is a reference to that <identifier>.uniqueid).
-->
<!ELEMENT passageref (#PCDATA) >


<!-- <groupitem>
An item within an <itemgroup>

ATTRIBUTES:
- itemid: references a <testitem> 'uniqueid'
- groupposition: the item's relative position within its group. groupposition should be honored by the item renderer
- adminrequired: if true, the (adaptive) itemselector MUST administer this item (it may not be pruned to meet the itemgroup's 'maxitems' constraint)
- responserequired: if true, the examinee must respond to this item, if administered
- blockid: if there are multiple blocks within an itemgroup, at most one block may be administered on any given test. (i.e. the blocks are mutually exclusive)

<groupitem itemid="150-6255" formposition="1" groupposition="1" adminrequired="false" responserequired="false" isactive="true"/>

-->
<!ELEMENT groupitem EMPTY >
<!ATTLIST groupitem
	itemid		CDATA #REQUIRED
	groupposition	CDATA #REQUIRED
	adminrequired 	(true|false) "false"
	responserequired (true|false) "false"
  isfieldtest   (true|false) #REQUIRED
  isactive      (true|false) #REQUIRED
	blockid   CDATA #IMPLIED
>


<!-- <testscoring>
Configurations for scoring the test, consisting of 
- rules for computation, 
- score cut points for determining performance levels,
- and conversion tables for value transformations
-->
<!ELEMENT scoringrules (computationrule+, conversiontable* ) >

<!-- <computationrule>
A rule for computing a score element, such as
- overall theta or scaled score
- strand score
- benchmark score


 <computationrule computationorder="1028" bpelementid="Delaware-ELA-4|4.1b">
  <identifier uniqueid="11C284DA-C06A-4D8C-A071-1C5FF90588AB" name="DelawareGLEDelta" label="BenchmarkScore" version="1.0"/>
  <computationruleparameter position="1" parametertype="string">
    <identifier uniqueid="6892A949-6600-4F38-9CFC-E1A8D0E3E0C7" name="thetaName" version="1.0"/>
    <computationruleparametervalue value="ThetaScore"/>
  </computationruleparameter>
</computationrule>
-->
<!ELEMENT computationrule (identifier, computationruleparameter*) >
<!ATTLIST computationrule
  bpelementid          CDATA #REQUIRED
  measurementid         CDATA #REQUIRED
  computationorder  CDATA #IMPLIED
>

<!-- <computationruleparameter>
A parameter for a computation rule
-->
<!ELEMENT computationruleparameter (identifier, property*, computationruleparametervalue*) >
<!ATTLIST computationruleparameter
  position  CDATA #REQUIRED
  parametertype  ( integer | float | string ) #IMPLIED
  >

<!ELEMENT computationruleparametervalue EMPTY >
<!ATTLIST computationruleparametervalue 
  value     CDATA #REQUIRED
  index     CDATA #IMPLIED
  >


<!ELEMENT performancelevels (performancelevel*) >
<!-- <performancelevel>
Cutscore that determines a coarse-grained level of skill-attainment
Performance levels may be part of scoring or part of reporting (reporting specifications are not covered by this DTD).

<performancelevel bpelementid="(Delaware_PT)DCAS-EOC-AlgebraII-Spring-2012-2013" plevel="1" scaledlo="0.000000000000000e+000" scaledhi="7.000000000000000e+002"/>
-->
<!ELEMENT performancelevel EMPTY >
<!ATTLIST performancelevel
  bpelementid CDATA #REQUIRED
  plevel      CDATA #REQUIRED
  scaledlo    CDATA #REQUIRED
  scaledhi    CDATA #REQUIRED
  >

<!--<conversiontable>
Set of value transformations. Often used to convert a raw score to a thetascore.
-->
<!ELEMENT conversiontable (identifier, conversiontuple+) >
<!ATTLIST conversiontable
  bpelementid    CDATA #REQUIRED
  measureid   CDATA #REQUIRED
  purpose     ( score | standarderror ) #REQUIRED
  formid      CDATA #IMPLIED
  >

<!-- <conversiontuple>
A single value transformation member of a conversion table
-->
<!ELEMENT conversiontuple EMPTY >
<!ATTLIST conversiontuple
  invalue   CDATA #REQUIRED
  outvalue  CDATA #REQUIRED
>


<!--    NOTES
- Object declaration and referencing
Every document conforming to this DTD is intended to be self-contained. As such, every object must be declared within the document before being referenced.
The <identifier> element is the means to declare an object and should be used exactly once for each object. 
Thereafter the object may be referenced either with an attribute or with an element using the 'uniqueid' attribute of the <identifier>.
The most referenced elements are <bpelement> and, since some elements have relationships with multiple blueprint elements, they use the <bpref>.
<bpelement>s are declared in the <testblueprint> section. All other uses of blueprint elements are references (e.g. <segmentbpelement>, <testitem>)
Because <bpelement> may be utilised by different types of objects (e.g. test, segment, strand, etc.), it is important that 'uniqueid' be truly unique 
across all these elements.

Other commonly referenced objects are <testitem> and <passage>. All items and passages must be declared first in the <itempool>. 
They are then referenced most commonly in <itemgroup>, which is a grouping of items within segments and forms for the purpose of administration.

- Testforms
Segmented tests present various challenges to the practice of creating fixed form tests. We view fixed forms as a means of "prescriptive item selection". 
Our view is that, for traditional fixed form tests, some number of item sequences are selected to be 'equivalent' forms of the same test.
To administer these in a segmented test of more than one segment, 'dividing points' are chosen within the form and the form is then split between the segments.
In order for a segmented test administration algorithm to 'stitch' these form fragments together they must be identifiable. 
So forms must be defined at the test level and partitioned according to the number of fixed-form segments on the test. Each segment then
references the form partitions that are available for its use. 
HOW FORMS WORK
The examinee test opportunity selects the <testform> and, by implication, all partitions. Every segment with a fixed-form algorithm is then bound to 
the partitions within that <testform>. The segment should reference exactly one partition in each form.

It is worth noting at this point, that a segmented test may consist of a combination of fixed form and adaptive segments (as well as other forms of item selection not yet envisioned).
Even under such a heterogeneous item selection regime, related <testform> partitions still hold sway. Consider a test of 3 segments in the following configuration:
    fixed, adaptive, fixed
and assume there are two <testform>s A (partitions A1 and A2) and B (partitions B1 and B2).
Any examinee who receives form A1 on segment 1 must receive form A2 on segment 3. 
The items that appear on segment 2 will be chosen dynamically by the adaptive algorithm according to blueprint and adaptive item selection control parameters.
Similarly, any examinee who receives form B1 on segment 1 must receive form B2 on segment 3, with the adaptive algorithm selecting items for segment 2.

- Segments
Every test is segmented, even if it consists of only a single segment. This eliminates the need to write code with exceptional cases.

TEST PACKAGE VERSIONING
Mistakes are sometimes discovered in testing data after the examinees have begun testing. 
It is important to be able to modify testing data without disrupting examinees whose tests may be in progress.
It is also necessary to release a completely new package for a new test administration cycle that may be very different in structure and substance from the previous one.

To attempt to clarify these two scenarios we introduce the concept of 'major' and 'minor' versions of a test package. (We will use the test 'Math grade 5' for examples.)
In its third year of administration, the 'Math grade 5' test package starts with version 3.1. 
As the year progresses, the following discoveries are made:
1- 5 items have the wrong IRTS parameters
2- 2 items have mispelled words
3- 1 item is determined to be racially biased
4- 10 items are classified on the wrong content standards
5- The adaptive algorithm needs to be tweaked to produce a closer match to blueprint
6- 100 new items need to be field tested

All of the above changes are possible on a minor version of an adaptive test segment without disrupting tests in progress.
1- The IRTS parameters may be changed, but any tests completed and scored prior to the change will need to be rescored.
2- The item content may be changed. It may be desirable, however, to track the item changes with their version number.
3- The item should be flagged as inactive, not removed entirely from the pool.
4- The item content standards may be altered in a new minor version of the package. This may affect blueprint satisfaction on tests started before this change.
5- Adaptive algorithm parameters may be altered with the understanding that tests in progress may have trouble meeting blueprint.
6- Field test items may be introduced at any time on an adaptive test.

What cannot be changed in a minor version:
Test structure:
- Segments may not be added, removed, or shuffled (order changed).
- Test forms may not be removed or altered, partitions may be added, but not removed. 
    (New test forms may be added. Existing test forms may be 'end-dated' so they are not administered on any new test opportunities, but
      end-dating is done in the registration/administration component, not by the test package.)
    Existing partitions must preserve the order of itemgroups. 
    Possibly (depending on the form administration algorithm), individual items within a group may be inactivated (or reactivated).
- Itempool
    Items may not be removed from an test-level itempool or from a segment-level pool. (But they may be inactivated within their itemgroup).
    
PRESERVING TEST OPPORTUNITY INTEGRITY IN CHANGING VERSIONS
If structural changes are to occur within an administration period of a given test, the test delivery system should maintain, 
  for each examinee, the latest minor version within the major version the test opportunity was started in. 
  
If a test opportunity has issues updating to a new minor version, then the opportunity should continue with the original test package version 
it started in.

NOTE: Integrity testing should be done on each minor version release to ensure that all test opportunities from ALL previous minor versions
can continue with the new version.

-->