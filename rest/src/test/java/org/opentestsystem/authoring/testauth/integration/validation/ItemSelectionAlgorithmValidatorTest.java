/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.integration.validation;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionAlgorithm;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionAlgorithmType;
import org.opentestsystem.authoring.testauth.rest.AbstractRestEmbeddedMongoTest;
import org.opentestsystem.authoring.testauth.validation.ItemSelectionAlgorithmValidator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.BeanPropertyBindingResult;
import org.springframework.validation.Errors;

public class ItemSelectionAlgorithmValidatorTest extends AbstractRestEmbeddedMongoTest  {

    @Autowired
    private ItemSelectionAlgorithmValidator validator;
    private ItemSelectionAlgorithm isa;
    private Errors errors;

    @Before
    public void setup() {
        isa = new ItemSelectionAlgorithm();
        isa.setItemSelectionAlgorithmType(ItemSelectionAlgorithmType.ADAPTIVE);
        isa.setName("name");
        isa.setVersion("1.0");
        errors = new BeanPropertyBindingResult(isa, "");
    }

    @Test
    public void testBasicPass() {
        validator.validate(isa, errors);
        assertFalse(errors.hasErrors());
    }

    @Test
    public void testEmptyName() {
        isa.setName("");
        validator.validate(isa, errors);
        assertTrue(errors.hasErrors());
    }

    @Test
    public void testNameTooLong() {
        isa.setName("123456789012345678901234567890123456789012345678901234567890X");
        validator.validate(isa, errors);
        assertTrue(errors.hasErrors());
    }

    @Test
    public void testEmptyAlgType() {
        isa.setItemSelectionAlgorithmType(null);
        validator.validate(isa, errors);
        assertTrue(errors.hasErrors());
    }

    @Test
    public void testEmptyVersion() {
        isa.setVersion("");
        validator.validate(isa, errors);
        assertTrue(errors.hasErrors());
    }


    @Test
    public void testVersionCharacters() {
        isa.setVersion("x.y");
        validator.validate(isa, errors);
        assertTrue(errors.hasErrors());
    }

    @Test
    public void testVersionMajorCharacters() {
        isa.setVersion("x.0");
        validator.validate(isa, errors);
        assertTrue(errors.hasErrors());
    }

    @Test
    public void testVersionMinorCharacters() {
        isa.setVersion("1.x");
        validator.validate(isa, errors);
        assertTrue(errors.hasErrors());
    }

    @Test
    public void testVersionMajorZero() {
        isa.setVersion("0.1");
        validator.validate(isa, errors);
        assertTrue(errors.hasErrors());
    }

    @Test
    public void testVersionMinorTooLarge() {
        isa.setVersion("1.10");
        validator.validate(isa, errors);
        assertTrue(errors.hasErrors());
    }

    @Test
    public void testVersionMinorLeadingZero() {
        isa.setVersion("1.01");
        validator.validate(isa, errors);
        assertTrue(errors.hasErrors());
    }

    @Test
    public void testVersionMajorOnly() {
        isa.setVersion("1");
        validator.validate(isa, errors);
        assertTrue(errors.hasErrors());
    }

    @Test
    public void testVersionMinorOnly() {
        isa.setVersion(".9");
        validator.validate(isa, errors);
        assertTrue(errors.hasErrors());
    }

    @Test
    public void testVersionPatch() {
        isa.setVersion("1.1.1");
        validator.validate(isa, errors);
        assertTrue(errors.hasErrors());
    }

    @Test
    public void testVersionCorrect() {
        isa.setVersion("1.0");
        validator.validate(isa, errors);
        assertFalse(errors.hasErrors());
    }
}