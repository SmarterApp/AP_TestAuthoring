/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.validation;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.authoring.testauth.domain.BlueprintElementValue;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionAlgorithmParameter;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionAlgorithmType;
import org.opentestsystem.authoring.testauth.domain.Segment;
import org.opentestsystem.authoring.testauth.service.ItemSelectionAlgorithmService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;
import org.springframework.validation.Errors;
import org.springframework.validation.Validator;

import com.google.common.collect.Range;

@Component
public class SegmentValidator extends AbstractDomainValidator
{
    private static final String ERROR_MSG_ROOT = "segment.";
    private static final String MIN_OP_ITEMS_FIELD = "minOpItems";
    private static final String MAX_OP_ITEMS_FIELD = "maxOpItems";
    private static final String MIN_FT_ITEMS_FIELD = "minFtItems";
    private static final String MAX_FT_ITEMS_FIELD = "maxFtItems";
    private static final String ALGORITHM_FIELD = "itemSelectionAlgorithmId";
    private static final String PARAMETERS_FIELD = "itemSelectionParameters";

    private static final Range<Integer> ITEM_COUNT_RANGE = Range.closed(0, BlueprintElementValue.MAX_VALUE);

    @Autowired
    @Qualifier("jsr303Validator")
    private Validator jsrValidator;

    @Autowired
    private ItemSelectionAlgorithmService itemSelectionAlgorithmService;

    @Override
    public boolean supports(final Class<?> clazz) {
        return Segment.class.equals(clazz);
    }

    @Override
    public void validate(final Object obj, final Errors errors) {
        // execute JSR-303 validations (annotations)
        this.jsrValidator.validate(obj, errors);

        final Segment segment = (Segment) obj;

        // validate valid ISA
        if (StringUtils.isNotEmpty(segment.getItemSelectionAlgorithmId())) {
            segment.setItemSelectionAlgorithm(this.itemSelectionAlgorithmService.getItemSelectionAlgorithm(segment.getItemSelectionAlgorithmId()));
            if (segment.getItemSelectionAlgorithm() == null) {
                rejectValue(errors, ALGORITHM_FIELD, getErrorMessageRoot() + ALGORITHM_FIELD + MSG_INVALID);
            }
        }

        // validate min < max
        if (segment.getMinOpItems() != null && segment.getMaxOpItems() != null && segment.getMinOpItems().compareTo(segment.getMaxOpItems()) > 0) {
            rejectValue(errors, "id", getErrorMessageRoot() + "min.le.max", new Object[] { "OP", String.valueOf(segment.getMinOpItems()), "OP", String.valueOf(segment.getMaxOpItems()) });
        }
        if (segment.getMinFtItems() != null && segment.getMaxFtItems() != null && segment.getMinFtItems().compareTo(segment.getMaxFtItems()) > 0) {
            rejectValue(errors, "id", getErrorMessageRoot() + "min.le.max", new Object[] { "FT", String.valueOf(segment.getMinFtItems()), "FT", String.valueOf(segment.getMaxFtItems()) });
        }

        // validate OP min/max values are 0 if ISA type is 'fieldtest'. Otherwise they must be in 0-999 range
        if (segment.getItemSelectionAlgorithm() != null && ItemSelectionAlgorithmType.FIELDTEST.equals(segment.getItemSelectionAlgorithm().getItemSelectionAlgorithmType())) {
            if (segment.getMinOpItems() != null && segment.getMinOpItems().intValue() != 0) {
                rejectValue(errors, "minOpItems", getErrorMessageRoot() + MIN_OP_ITEMS_FIELD + ".fieldTest.nonzero");
            }
            if (segment.getMaxOpItems() != null && segment.getMaxOpItems().intValue() != 0) {
                rejectValue(errors, "maxOpItems", getErrorMessageRoot() + MAX_OP_ITEMS_FIELD + ".fieldTest.nonzero");
            }
        } else {
            if (segment.getMinOpItems() != null && !ITEM_COUNT_RANGE.contains(segment.getMinOpItems())) {
                rejectValue(errors, "minOpItems", getErrorMessageRoot() + MIN_OP_ITEMS_FIELD + ".range");
            }
            if (segment.getMaxOpItems() != null && !ITEM_COUNT_RANGE.contains(segment.getMaxOpItems())) {
                rejectValue(errors, "maxOpItems", getErrorMessageRoot() + MAX_OP_ITEMS_FIELD + ".range");
            }
        }

        // validate FT min/max values fall within 0-999 range
        if (segment.getMinFtItems() != null && !ITEM_COUNT_RANGE.contains(segment.getMinFtItems())) {
            rejectValue(errors, "minFtItems", getErrorMessageRoot() + MIN_FT_ITEMS_FIELD + ".range");
        }
        if (segment.getMaxFtItems() != null && !ITEM_COUNT_RANGE.contains(segment.getMaxFtItems())) {
            rejectValue(errors, "maxFtItems", getErrorMessageRoot() + MAX_FT_ITEMS_FIELD + ".range");
        }

        // validate ISA parameters
        if (segment.getItemSelectionAlgorithm() != null) {

            if (segment.getItemSelectionAlgorithm().getScalarParameters().size() != segment.getItemSelectionParameterCount()) {
                rejectValue(errors, PARAMETERS_FIELD, getErrorMessageRoot() + PARAMETERS_FIELD + MSG_COUNT, segment.getItemSelectionAlgorithm().getScalarParameters().size());
            } else {
                for (final ItemSelectionAlgorithmParameter requiredParameter : segment.getItemSelectionAlgorithm().getScalarParameters()) {
                    final String parameterValue = segment.getItemSelectionParameters() == null ? null : segment.getItemSelectionParameters().get(requiredParameter.getParameterName());
                    try {
                        errors.pushNestedPath(PARAMETERS_FIELD + "['" + requiredParameter.getParameterName() + "']");
                        validateParameterValue(parameterValue, PARAMETERS_FIELD, requiredParameter, errors);
                    } finally {
                        errors.popNestedPath();
                    }
                }
            }
        }

        if (!errors.hasErrors()) {
            segment.trimItemSelectionValues();
        }
    }

    @Override
    protected String getErrorMessageRoot() {
        return ERROR_MSG_ROOT;
    }
}
