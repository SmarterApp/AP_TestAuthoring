/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.rest;

import org.opentestsystem.authoring.testauth.domain.CoreStandardPublicationResponse;
import org.opentestsystem.authoring.testauth.domain.CoreStandardPublicationSockResponse;
import org.opentestsystem.authoring.testauth.service.CoreStandardsService;
import org.opentestsystem.shared.web.AbstractRestController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.security.access.annotation.Secured;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

/**
 * Used to retrieve core standards data
 */
@Controller
public class CoreStandardsController extends AbstractRestController {

    @Autowired
    private CoreStandardsService coreStandardsService;

    /**
     * retrieve coreStandards data
     * 
     * @return CoreStandards object as JSON string
     */
    @RequestMapping(value = "/coreStandard", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Test Read" })
    // NOTE: intentionally not @PreAuthorized core standards are not tenanted
    @ResponseBody
    public String getCoreStandardsData(@RequestParam(required = true, value = "hierarchy") final String hierarchy,
            @RequestParam(required = false, value = "publisher") final String publisher,
            @RequestParam(required = false, value = "subject") final String subject,
            @RequestParam(required = false, value = "grade") final String grade) {
        return this.coreStandardsService.getCoreStandardsData(hierarchy, publisher, subject, grade);
    }

    /**
     * retrieve publication data
     * 
     * @return CoreStandardPublicationResponse object as JSON string
     */
    @RequestMapping(value = "/coreStandard/publication/{publicationKey}/standard", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Test Read" })
    // NOTE: intentionally not @PreAuthorized core standards are not tenanted
    @ResponseBody
    public CoreStandardPublicationResponse getCoreStandardPublicationResponse(@PathVariable final String publicationKey) {
        return this.coreStandardsService.getCoreStandardsForPublication(publicationKey);
    }

    /**
     * retrieve a list of grade objects for a specific Core Standards Publication ID
     * 
     * @return CoreStandardPublicationResponse object as JSON string
     */
    @RequestMapping(value = "/coreStandard/publication/{publicationKey}/grade", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Test Read" })
    // NOTE: intentionally not @PreAuthorized core standards are not tenanted
    @ResponseBody
    public CoreStandardPublicationResponse getCoreStandardGradeResponse(@PathVariable final String publicationKey) {
      CoreStandardPublicationResponse r =   this.coreStandardsService.getCoreStandardsGradeResponse(publicationKey);
      return r;
    }

    /**
     * retrieve a list of grade objects for a specific Core Standards Publication ID
     * 
     * @return CoreStandardPublicationResponse object as JSON string
     */
    @RequestMapping(value = "/coreStandard/publication/{publicationKey}/sock", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Test Read" })
    // NOTE: intentionally not @PreAuthorized core standards are not tenanted
    @ResponseBody
    public CoreStandardPublicationSockResponse getCoreStandardSockResponse(@PathVariable final String publicationKey) {
        return this.coreStandardsService.getCoreStandardsSocksForPublication(publicationKey);
    }
}
