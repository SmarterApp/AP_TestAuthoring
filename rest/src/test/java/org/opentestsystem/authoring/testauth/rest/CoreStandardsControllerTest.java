/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.rest;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyString;
import static org.mockito.Mockito.reset;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.CoreStandardPublicationResponse;
import org.opentestsystem.authoring.testauth.domain.CoreStandardPublicationSockResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.client.RestOperations;

public class CoreStandardsControllerTest extends AbstractRestEmbeddedMongoTest {

    private static final String BASE_URL = "/coreStandard";
    private static final String BASE_MOCKED_API_URL = "http://corestandardsland/";

    @Autowired
    private RestOperations restTemplate;

    @Before
    public void setupTestData() {
        reset(restTemplate);
    }

    @Test
    public void getCoreStandardsWithoutHierarchyFails() throws InterruptedException {
        callInvalidGETRequest(BASE_URL);
    }

    @Test
    public void getCoreStandardsPublisher() throws InterruptedException {
        when(this.restTemplate.getForObject(BASE_MOCKED_API_URL + "publisher", String.class)).thenReturn("");

        final String returnedValue = callGETRestService(BASE_URL + "?hierarchy=publisher", String.class);
        verify(this.restTemplate).getForObject(BASE_MOCKED_API_URL + "publisher", String.class);
        assertThat(returnedValue, is(nullValue()));
    }

    @Test
    public void getCoreStandardsSubject() throws InterruptedException {
        when(this.restTemplate.getForObject(BASE_MOCKED_API_URL + "subject", String.class)).thenReturn("");

        final String returnedValue = callGETRestService(BASE_URL + "?hierarchy=subject", String.class);
        verify(this.restTemplate).getForObject(BASE_MOCKED_API_URL + "subject", String.class);
        assertThat(returnedValue, is(nullValue()));
    }

    @Test
    public void getCoreStandardsSubjectWithPublisherParam() throws InterruptedException {
        when(this.restTemplate.getForObject(BASE_MOCKED_API_URL + "subject?publisher=CC", String.class)).thenReturn("");

        final String returnedValue = callGETRestService(BASE_URL + "?hierarchy=subject&publisher=CC", String.class);
        verify(this.restTemplate).getForObject(BASE_MOCKED_API_URL + "subject?publisher=CC", String.class);
        assertThat(returnedValue, is(nullValue()));
    }

    @Test
    public void getCoreStandardsGrade() throws InterruptedException {
        when(this.restTemplate.getForObject(BASE_MOCKED_API_URL + "grade", String.class)).thenReturn("");

        final String returnedValue = callGETRestService(BASE_URL + "?hierarchy=grade", String.class);
        verify(this.restTemplate).getForObject(BASE_MOCKED_API_URL + "grade", String.class);
        assertThat(returnedValue, is(nullValue()));
    }

    @Test
    public void getCoreStandardsPublicationWithPublisherAndSubjectParam() throws InterruptedException {
        when(this.restTemplate.getForObject(BASE_MOCKED_API_URL + "publication?publisher=CC&subject=ELA", String.class)).thenReturn("");

        final String returnedValue = callGETRestService(BASE_URL + "?hierarchy=publication&publisher=CC&subject=ELA", String.class);
        verify(this.restTemplate).getForObject(BASE_MOCKED_API_URL + "publication?publisher=CC&subject=ELA", String.class);
        assertThat(returnedValue, is(nullValue()));
    }

    @Test
    public void getCoreStandardsPublicationStandardWithGradeParam() throws InterruptedException {
        when(this.restTemplate.getForObject(BASE_MOCKED_API_URL + "publication/CC-ELA-v1/standard?grade=2", String.class)).thenReturn("");

        final String returnedValue = callGETRestService(BASE_URL + "?hierarchy=publication/CC-ELA-v1/standard?grade=2", String.class);
        verify(this.restTemplate).getForObject(BASE_MOCKED_API_URL + "publication/CC-ELA-v1/standard?grade=2", String.class);
        assertThat(returnedValue, is(nullValue()));
    }

    @SuppressWarnings("unchecked")
    @Test
    public void getCoreStandardPublicationRespone() throws InterruptedException {
        final CoreStandardPublicationResponse expectedResponse = new CoreStandardPublicationResponse();
        when(this.restTemplate.getForObject(anyString(), any(Class.class))).thenReturn(expectedResponse);

        final CoreStandardPublicationResponse returnedValue = callGETRestService("/coreStandard/publication/CC-ELA-v1/standard", CoreStandardPublicationResponse.class);
        verify(this.restTemplate).getForObject("http://corestandardsland/publication/CC-ELA-v1/standard", CoreStandardPublicationResponse.class);
        assertThat(returnedValue, is(expectedResponse));
    }

    @SuppressWarnings("unchecked")
    @Test
    public void getCoreStandardGradeRespone() throws InterruptedException {
        final CoreStandardPublicationResponse expectedResponse = new CoreStandardPublicationResponse();
        when(this.restTemplate.getForObject(anyString(), any(Class.class))).thenReturn(expectedResponse);

        final CoreStandardPublicationResponse returnedValue = callGETRestService("/coreStandard/publication/CC-ELA-v1/grade", CoreStandardPublicationResponse.class);
        verify(this.restTemplate).getForObject("http://corestandardsland/publication/CC-ELA-v1/grade", CoreStandardPublicationResponse.class);
        assertThat(returnedValue, is(expectedResponse));
    }

    @SuppressWarnings("unchecked")
    @Test
    public void getCoreStandardSockRespone() throws InterruptedException {
        final CoreStandardPublicationSockResponse expectedResponse = new CoreStandardPublicationSockResponse();
        when(this.restTemplate.getForObject(anyString(), any(Class.class))).thenReturn(expectedResponse);

        final CoreStandardPublicationSockResponse returnedValue = callGETRestService("/coreStandard/publication/CC-ELA-v1/sock", CoreStandardPublicationSockResponse.class);
        verify(this.restTemplate).getForObject("http://corestandardsland/publication/CC-ELA-v1/sock", CoreStandardPublicationSockResponse.class);
        assertThat(returnedValue, is(expectedResponse));
    }
}
