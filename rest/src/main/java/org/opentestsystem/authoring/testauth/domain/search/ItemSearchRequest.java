/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.domain.search;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.shared.exception.LocalizedException;
import org.opentestsystem.shared.search.domain.AbstractSearchRequest;
import org.opentestsystem.shared.search.domain.SearchFilter;
import org.opentestsystem.shared.search.domain.SearchFilter.Operator;
import org.opentestsystem.shared.search.domain.SearchFilter.SearchDataType;

/**
 * SearchRequest class for the Segment domain object
 */
public class ItemSearchRequest extends AbstractSearchRequest {

    private static final long serialVersionUID = 298849388377065847L;

    private static final String SEARCH_RESOURCE = "/item";

    private List<SearchFilter> dynamicSearchFilters;

    // item location fields
    private String segmentId = null;
    private String itemGroupId = null;
    private String formPartitionId = null;
    private String affinityGroupId = null;
    private String fieldTestItem = null; // "true" or "false"

    private String primaryStandard = null;
    private String status = null;
    private String associatedItem = null; // "true" or "false"

    private boolean isValid = true;

    private static final List<SearchFilter> SEARCH_FILTERS = Arrays.asList(new SearchFilter[] {
            new SearchFilter("assessmentId", "assessmentId", Operator.EQ, SearchDataType.String),
            new SearchFilter("tibIdentifier", "tibIdentifier", Operator.WLD_REG, SearchDataType.String),
            new SearchFilter("primaryStandard", "primaryStandard", Operator.WLD_REG, SearchDataType.String),
            new SearchFilter("version", "version", Operator.WLD_REG, SearchDataType.String),
            new SearchFilter("status", "status", Operator.EQ, SearchDataType.String),
            new SearchFilter("interactionType", "interactionType", Operator.WLD_REG, SearchDataType.String),
            new SearchFilter("intendedGrade", "intendedGrade", Operator.EQ, SearchDataType.String) });

    public ItemSearchRequest(final Map<String, String[]> inRequestMap) {
        this(inRequestMap, new HashSet<String>());
    }

    public ItemSearchRequest(final Map<String, String[]> inRequestMap, final Set<String> searchableFields) {
        super(inRequestMap, searchableFields);
        try {
            this.segmentId = getParamValue("segmentId", inRequestMap);
            this.itemGroupId = getParamValue("itemGroupId", inRequestMap);
            this.formPartitionId = getParamValue("formPartitionId", inRequestMap);
            this.affinityGroupId = getParamValue("affinityGroupId", inRequestMap);
            this.fieldTestItem = getParamValue("fieldTestItem", inRequestMap);
            this.primaryStandard = getParamValue("primaryStandard", inRequestMap);
            this.status = getParamValue("status", inRequestMap);
            this.associatedItem = getParamValue("associatedItem", inRequestMap);
        } catch (final LocalizedException e) {
            isValid = false;
        }
    }

    @Override
    protected void addSearchableFields(final Set<String> searchableFields) {
        dynamicSearchFilters = new ArrayList<SearchFilter>();
        if (searchableFields != null) {
            for (final String searchFilter : searchableFields) {
                dynamicSearchFilters.add(new SearchFilter(searchFilter, "allIncludedMetadata." + searchFilter, Operator.EQ, SearchDataType.String));
            }
        }
        dynamicSearchFilters.addAll(SEARCH_FILTERS);
    }

    private String getParamValue(final String key, final Map<String, String[]> inRequestMap) {
        final String[] values = inRequestMap.get(key);
        String param = null;
        if (values != null) {
            final String[] pruned = pruneArrayOfEmpty(values);
            if (pruned.length == 1) {
                param = pruned[0];
            } else if (pruned.length > 1) {
                throw new LocalizedException("invalid.search.criteria");
            }
        }
        return param;
    }

    private String[] pruneArrayOfEmpty(final String[] arrayToPrune) {
        final List<String> ret = new ArrayList<String>();
        if (arrayToPrune != null) {
            for (final String val : arrayToPrune) {
                if (val != null && StringUtils.isNotBlank(val)) {
                    ret.add(val);
                }
            }
        }
        return ret.toArray(new String[0]);
    }

    @Override
    public boolean isValid() {
        return isValid;
    }

    public String getSegmentId() {
        return segmentId;
    }

    public void setSegmentId(final String asegmentId) {
        this.segmentId = asegmentId;
    }

    public String getItemGroupId() {
        return itemGroupId;
    }

    public void setItemGroupId(final String aitemGroupId) {
        this.itemGroupId = aitemGroupId;
    }

    public String getFormPartitionId() {
        return formPartitionId;
    }

    public void setFormPartitionId(final String aformPartitionId) {
        this.formPartitionId = aformPartitionId;
    }

    public String getAffinityGroupId() {
        return affinityGroupId;
    }

    public void setAffinityGroupId(final String anffinityGroupId) {
        this.affinityGroupId = anffinityGroupId;
    }

    public String getFieldTestItem() {
        return fieldTestItem;
    }

    public void setFieldTestItem(final String inFieldTestItem) {
        this.fieldTestItem = inFieldTestItem;
    }

    public String getPrimaryStandard() {
        return primaryStandard;
    }

    public void setPrimaryStandard(final String aprimaryStandard) {
        this.primaryStandard = aprimaryStandard;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(final String astatus) {
        this.status = astatus;
    }

    @Override
    public List<SearchFilter> getSearchFilters() {
        return dynamicSearchFilters;
    }

    @Override
    public String getSearchResource() {
        return SEARCH_RESOURCE;
    }

    public String getAssociatedItem () {
      return associatedItem;
    }

    public void setAssociatedItem (String associatedItem) {
      this.associatedItem = associatedItem;
    }
}
