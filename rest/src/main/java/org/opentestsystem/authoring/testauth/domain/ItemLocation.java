/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.domain;

import org.apache.commons.lang.StringUtils;

import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.google.common.base.Predicate;

@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        include = JsonTypeInfo.As.PROPERTY,
        property = "type")
@JsonSubTypes({
        @JsonSubTypes.Type(value = AdaptiveItemLocation.class, name = "AdaptiveItemLocation"),
        @JsonSubTypes.Type(value = FixedFormItemLocation.class, name = "FixedFormItemLocation"),
        @JsonSubTypes.Type(value = AffinityGroupItemLocation.class, name = "AffinityGroupItemLocation")
})
public interface ItemLocation {

    public static final class SAME_LOCATION_FINDER implements Predicate<ItemLocation> {
        private final ItemLocation itemLocationToCompare;

        public static SAME_LOCATION_FINDER getInstance(final ItemLocation temLocation) {
            return new SAME_LOCATION_FINDER(temLocation);
        }

        private SAME_LOCATION_FINDER(final ItemLocation temLocation) {
            this.itemLocationToCompare = temLocation;
        }

        @Override
        public boolean apply(final ItemLocation itemLocation) {
            return this.itemLocationToCompare.isSameLocation(itemLocation);
        }
    }

    public static final Predicate<ItemLocation> IS_ADAPTIVE_OR_FIXED_LOCATION_FILTER = new Predicate<ItemLocation>() {
        @Override
        public boolean apply(final ItemLocation itemLocation) {
            return itemLocation instanceof AdaptiveItemLocation || itemLocation instanceof FixedFormItemLocation;
        }
    };

    public static class FORM_PARTITION_ID_FILTER implements Predicate<ItemLocation> {
        private final String formPartitionId;

        private FORM_PARTITION_ID_FILTER(final String formPartitionId) {
            this.formPartitionId = formPartitionId;
        }

        public static FORM_PARTITION_ID_FILTER getInstance(final String formPartitionId) {
            return new FORM_PARTITION_ID_FILTER(formPartitionId);
        }

        @Override
        public boolean apply(final ItemLocation itemLocation) {
            return StringUtils.equals(formPartitionId, itemLocation.getFormPartitionId());
        }
    };

    public static class ITEM_GROUP_ID_FILTER implements Predicate<ItemLocation> {
        private final String itemGroupId;

        private ITEM_GROUP_ID_FILTER(final String itemGroupId) {
            this.itemGroupId = itemGroupId;
        }

        public static ITEM_GROUP_ID_FILTER getInstance(final String itemGroupId) {
            return new ITEM_GROUP_ID_FILTER(itemGroupId);
        }

        @Override
        public boolean apply(final ItemLocation itemLocation) {
            return StringUtils.equals(itemGroupId, itemLocation.getItemGroupId());
        }
    };

    public static class SEGMENT_ID_FILTER implements Predicate<ItemLocation> {
        private final String segmentId;

        private SEGMENT_ID_FILTER(final String segmentId) {
            this.segmentId = segmentId;
        }

        public static SEGMENT_ID_FILTER getInstance(final String segmentId) {
            return new SEGMENT_ID_FILTER(segmentId);
        }

        @Override
        public boolean apply(final ItemLocation itemLocation) {
            return StringUtils.equals(segmentId, itemLocation.getSegmentId());
        }
    };

    public static class AFFINITY_GROUP_ID_FILTER implements Predicate<ItemLocation> {
        private final String affinityGroupId;

        private AFFINITY_GROUP_ID_FILTER(final String affinityGroupId) {
            this.affinityGroupId = affinityGroupId;
        }

        public static AFFINITY_GROUP_ID_FILTER getInstance(final String affinityGroupId) {
            return new AFFINITY_GROUP_ID_FILTER(affinityGroupId);
        }

        @Override
        public boolean apply(final ItemLocation itemLocation) {
            return StringUtils.equals(affinityGroupId, itemLocation.getAffinityGroupId());
        }
    };

    String getItemIdentifier();

    void setItemIdentifier(String itemIdentifier);

    String getSegmentId();

    void setSegmentId(String segmentId);

    String getAffinityGroupId();

    void setAffinityGroupId(String affinityGroupId);

    String getItemGroupId();

    void setItemGroupId(String itemGroupId);

    String getFormPartitionId();

    void setFormPartitionId(String formPartitionId);

    int getLevel1SortIndex();

    int getLevel2SortIndex();

    void setLevel1SortIndex(int level1Index);

    void setLevel2SortIndex(int level1Index);

    boolean isSameLocation(ItemLocation loc);

    void updateLocation(ItemLocation loc);

    boolean isAdminRequired();

    void setAdminRequired(final boolean isAdminRequired);

    boolean isResponseRequired();

    void setResponseRequired(final boolean isResponseRequired);

    boolean isActive();

    void setActive(final boolean isActive);

    boolean isFieldTestItem();

    void setFieldTestItem(final boolean aFieldTestItem);

    String getBlockId();

    void setBlockId(final String aBlockId);

}
