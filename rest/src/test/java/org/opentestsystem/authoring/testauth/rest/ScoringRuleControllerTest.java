/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.rest;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.Assert.fail;

import java.nio.charset.Charset;
import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.Assessment;
import org.opentestsystem.authoring.testauth.domain.BlueprintReferenceType;
import org.opentestsystem.authoring.testauth.domain.ComputationRule;
import org.opentestsystem.authoring.testauth.domain.ComputationRuleMultiplicityType;
import org.opentestsystem.authoring.testauth.domain.ComputationRuleParameter;
import org.opentestsystem.authoring.testauth.domain.ComputationRuleType;
import org.opentestsystem.authoring.testauth.domain.ConversionTableType;
import org.opentestsystem.authoring.testauth.domain.DictionaryIndexType;
import org.opentestsystem.authoring.testauth.domain.DomainFactory;
import org.opentestsystem.authoring.testauth.domain.Publication;
import org.opentestsystem.authoring.testauth.domain.ScoringRule;
import org.opentestsystem.authoring.testauth.domain.ScoringRuleDictionaryElement;
import org.opentestsystem.authoring.testauth.domain.ScoringRuleParameter;
import org.opentestsystem.authoring.testauth.domain.Subject;
import org.opentestsystem.authoring.testauth.persistence.GridFsRepository;
import org.opentestsystem.authoring.testauth.service.AssessmentService;
import org.opentestsystem.authoring.testauth.service.ComputationRuleService;
import org.opentestsystem.authoring.testauth.service.PublicationService;
import org.opentestsystem.authoring.testauth.service.SubjectService;
import org.opentestsystem.shared.docs.annotation.ApiDocExample;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.mongodb.DBObject;
import com.mongodb.gridfs.GridFSFile;

public class ScoringRuleControllerTest extends AbstractRestEmbeddedMongoTest {

    private static final String BASE_URL = "/scoringRule";
    private ScoringRule savedScoringRule;

    @Autowired
    private ComputationRuleService computationRuleService;

    @Autowired
    private PublicationService publicationService;

    @Autowired
    private SubjectService subjectService;

    @Autowired
    private AssessmentService assessmentService;

    @Autowired
    private transient GridFsRepository gridFsRepository;

    private ComputationRule savedComputationRule;

    private Assessment savedAssessment;

    private GridFSFile valueFile;

    @ApiDocExample(rank = -1)
    @Before
    public void setupTestData() throws InterruptedException {
        final ComputationRule computationRule = PODAM_FACTORY.manufacturePojo(ComputationRule.class);
        computationRule.setId(null);
        computationRule.setConversionTableType(ConversionTableType.VALUE);
        computationRule.getParameters().clear();
        computationRule.setVersion("1.0");
        final ComputationRuleParameter computationRuleParameter = new ComputationRuleParameter();
        computationRuleParameter.setParameterName("parameter1");
        computationRuleParameter.setComputationRuleType(ComputationRuleType.INTEGER);
        computationRuleParameter.setDefaultValue("1");
        computationRuleParameter.setMinimumValue("1");
        computationRuleParameter.setMaximumValue("999");
        computationRuleParameter.setComputationRuleMultiplicityType(ComputationRuleMultiplicityType.DICTIONARY);
        computationRuleParameter.setDictionaryIndexType(DictionaryIndexType.STRING);
        computationRuleParameter.setPosition(1);
        computationRule.getParameters().add(computationRuleParameter);
        final ComputationRuleParameter computationRuleParameter2 = new ComputationRuleParameter();
        computationRuleParameter2.setParameterName("parameter2");
        computationRuleParameter2.setComputationRuleType(ComputationRuleType.STRING);
        computationRuleParameter2.setDefaultValue("Q");
        computationRuleParameter2.setComputationRuleMultiplicityType(ComputationRuleMultiplicityType.SCALAR);
        computationRuleParameter2.setPosition(2);
        computationRule.getParameters().add(computationRuleParameter2);
        final ComputationRuleParameter computationRuleParameter3 = new ComputationRuleParameter();
        computationRuleParameter3.setParameterName("parameter3");
        computationRuleParameter3.setComputationRuleType(ComputationRuleType.FLOAT);
        computationRuleParameter3.setDefaultValue("1.01");
        computationRuleParameter3.setMinimumValue("1.00");
        computationRuleParameter3.setMaximumValue("99.99");
        computationRuleParameter3.setComputationRuleMultiplicityType(ComputationRuleMultiplicityType.DICTIONARY);
        computationRuleParameter3.setDictionaryIndexType(DictionaryIndexType.INTEGER);
        computationRuleParameter3.setPosition(3);
        computationRule.getParameters().add(computationRuleParameter3);
        final ComputationRuleParameter computationRuleParameter4 = new ComputationRuleParameter();
        computationRuleParameter4.setParameterName("parameter4");
        computationRuleParameter4.setComputationRuleType(ComputationRuleType.INTEGER);
        computationRuleParameter4.setDefaultValue("15");
        computationRuleParameter4.setMinimumValue("10");
        computationRuleParameter4.setMaximumValue("20");
        computationRuleParameter4.setComputationRuleMultiplicityType(ComputationRuleMultiplicityType.SCALAR);
        computationRuleParameter4.setPosition(4);
        computationRule.getParameters().add(computationRuleParameter4);
        this.savedComputationRule = this.computationRuleService.createComputationRule(computationRule);

        final Subject savedSubject = this.subjectService.saveSubject(DomainFactory.manufactureValidSubject("ABB"));
        final Publication savedPublication = this.publicationService.savePublication(PODAM_FACTORY.manufacturePojo(Publication.class));
        this.savedAssessment = this.assessmentService.saveAssessment(DomainFactory.manufactureValidAssessment(savedSubject, savedPublication));

        final String valueConversionTable = "RANGE_NAME,START_VALUE\nyugo,0\nescort,30\ncamry,65\nmaserati,88";
        final DBObject metadata = null;
        this.valueFile = this.gridFsRepository.save(valueConversionTable.getBytes(Charset.forName("UTF-8")), "valueConversionTable", "plain/text", metadata);

        final Map<String, Object> scoringRuleParams = buildScoringRuleMap(0);
        this.savedScoringRule = callPOSTRestService(BASE_URL, scoringRuleParams, ScoringRule.class);
        assertThat(this.mongoTemplate.findAll(ScoringRule.class).size(), is(equalTo(1)));
        assertThat(this.savedScoringRule, is(notNullValue()));
    }

    @ApiDocExample(rank = 1)
    @Test
    public void findScoringRule() throws InterruptedException {
        final ScoringRule fetchedScoringRule = callGETRestService(BASE_URL + "/" + this.savedScoringRule.getId(), ScoringRule.class);
        assertThat(fetchedScoringRule, is(notNullValue()));
    }

    @ApiDocExample(rank = 2)
    @SuppressWarnings("unchecked")
    @Test
    public void findScoringRules() throws InterruptedException {
        final SearchResponse<ScoringRule> response = callGETRestService(BASE_URL, SearchResponse.class);
        assertThat(1, is(equalTo(response.getSearchResults().size())));
    }

    @ApiDocExample(rank = 3)
    @SuppressWarnings("unchecked")
    @Test
    public void searchScoringRuleByName() {
        final Map<String, String> scoringRule = Maps.newHashMap();
        scoringRule.put("name", "name-0");
        final SearchResponse<ScoringRule> response = callGETRestService(BASE_URL + buildQueryString(scoringRule), SearchResponse.class);
        assertThat(response.getReturnCount(), is(equalTo(1)));
        assertThat(1, is(equalTo(response.getSearchResults().size())));
    }

    @ApiDocExample(rank = 4)
    @Test
    public void saveScoringRule() throws InterruptedException {
        final Map<String, Object> scoringRuleParams = buildScoringRuleMap(2);
        final ScoringRule savedNewScoringRule = callPOSTRestService(BASE_URL, scoringRuleParams, ScoringRule.class);
        assertThat(this.mongoTemplate.findAll(ScoringRule.class).size(), is(equalTo(2)));
        assertThat(savedNewScoringRule, is(notNullValue()));
    }

    @SuppressWarnings("unchecked")
    @ApiDocExample(rank = 5)
    @Test
    public void updateScoringRuleList() throws InterruptedException {
        final ScoringRule scoringRule2 = callPOSTRestService(BASE_URL, buildScoringRuleMap(2), ScoringRule.class);
        final Map<String, Object> scoringRuleParams = buildParamObject(this.savedScoringRule);
        scoringRuleParams.put("order", 2);
        final Map<String, Object> scoringRuleParams2 = buildParamObject(scoringRule2);
        scoringRuleParams2.put("order", 1);
        final List<Map<String, Object>> scoringRuleList = Lists.newArrayList(scoringRuleParams, scoringRuleParams2);
        final List<Map<String, Object>> updatedScoringRuleList = callPUTRestServiceWithList(BASE_URL, scoringRuleList, List.class);
        assertThat(updatedScoringRuleList, is(notNullValue()));
        assertThat(updatedScoringRuleList.size(), is(equalTo(2)));
    }

    @ApiDocExample(rank = 6)
    @Test
    public void updateScoringRule() throws InterruptedException {
        final Map<String, Object> scoringRuleParams = buildParamObject(this.savedScoringRule);
        scoringRuleParams.put("label", "updated-label");
        final ScoringRule updatedScoringRule = callPUTRestService(BASE_URL + "/" + this.savedScoringRule.getId(), scoringRuleParams, ScoringRule.class);
        assertThat(updatedScoringRule, is(notNullValue()));
        assertThat(updatedScoringRule.getLabel(), is(equalTo("updated-label")));
    }

    @ApiDocExample(rank = 7)
    @Test
    public void removeScoringRule() throws InterruptedException {
        try {
            callDeleteRestService(BASE_URL + "/" + this.savedScoringRule.getId());
        } catch (final Exception e) {
            fail("Cannot delete configuration");
        }

        final ScoringRule fetchedScoringRule = callGETRestService(BASE_URL + "/" + this.savedScoringRule.getId(), ScoringRule.class);
        assertThat(fetchedScoringRule, is(nullValue()));
    }

    @ApiDocExample(rank = 8)
    @SuppressWarnings("unchecked")
    @Test
    public void getBlueprintReferenceTypes() throws InterruptedException {
        final List<BlueprintReferenceType> types = callGETRestService(BASE_URL + "/blueprintReferenceTypes", List.class);
        assertThat(types, is(notNullValue()));
        assertThat(types.size(), is(BlueprintReferenceType.values().length));
    }

    @ApiDocExample(rank = -1)
    @SuppressWarnings("unchecked")
    @Test
    public void searchScoringRules() {
        for (int i = 2; i < 11; i++) {
            callPOSTRestService(BASE_URL, buildScoringRuleMap(i), ScoringRule.class);
        }
        assertThat(this.mongoTemplate.findAll(ScoringRule.class).size(), is(equalTo(10)));

        final Map<String, String> scoringRule = Maps.newHashMap();

        scoringRule.put("label", "label-10");
        SearchResponse<ScoringRule> response = callGETRestService(BASE_URL + buildQueryString(scoringRule), SearchResponse.class);
        assertThat(response.getReturnCount(), is(equalTo(1)));
        assertThat(1, is(equalTo(response.getSearchResults().size())));

        scoringRule.put("label", "label-3");
        response = callGETRestService(BASE_URL + buildQueryString(scoringRule), SearchResponse.class);
        assertThat(response.getReturnCount(), is(equalTo(1)));
        assertThat(response.getSearchResults().size(), is(equalTo(1)));

        scoringRule.put("label", "invalid");
        response = callGETRestService(BASE_URL + buildQueryString(scoringRule), SearchResponse.class);
        assertThat(response.getReturnCount(), is(equalTo(0)));
        assertThat(response.getSearchResults().size(), is(equalTo(0)));

        scoringRule.put("label", "label-");
        // search pageable default size is 10
        response = callGETRestService(BASE_URL + buildQueryString(scoringRule), SearchResponse.class);
        assertThat(response.getReturnCount(), is(equalTo(10)));
        assertThat(response.getSearchResults().size(), is(equalTo(10)));

        scoringRule.clear();
        // search pageable default size is 10
        response = callGETRestService(BASE_URL + buildQueryString(scoringRule), SearchResponse.class);
        assertThat(response.getReturnCount(), is(equalTo(10)));
        assertThat(response.getSearchResults().size(), is(equalTo(10)));
    }

    private Map<String, Object> buildScoringRuleMap(final int uniqueId) {
        final Map<String, Object> scoringRuleMap = buildParamObject(manufactureValidScoringRule());
        scoringRuleMap.put("label", "label-" + String.valueOf(uniqueId));
        scoringRuleMap.put("order", uniqueId < 1 ? 1 : uniqueId);
        return scoringRuleMap;
    }

    private ScoringRule manufactureValidScoringRule() {
        final ScoringRule scoringRule = PODAM_FACTORY.manufacturePojo(ScoringRule.class);
        scoringRule.setId(null);
        scoringRule.setAssessmentId(this.savedAssessment.getId());
        scoringRule.setOrder(Integer.valueOf(1));
        scoringRule.setBlueprintReferenceType(BlueprintReferenceType.TEST);
        scoringRule.setBlueprintReferenceId(this.savedAssessment.getId());
        scoringRule.setComputationRuleId(this.savedComputationRule.getId());
        scoringRule.setComputationRule(null);
        scoringRule.setValueConversionTableGridFsId(this.valueFile.getId().toString());
        scoringRule.setStandardErrorConversionTableGridFsId(null);
        scoringRule.getParameters().clear();
        scoringRule.getParameters().add(manufactureValidScoringRuleParameter("parameter1", false));
        scoringRule.getParameters().add(new ScoringRuleParameter("parameter2", ComputationRuleMultiplicityType.SCALAR, "soleString"));
        scoringRule.getParameters().add(manufactureValidScoringRuleParameter("parameter3", true));
        scoringRule.getParameters().add(new ScoringRuleParameter("parameter4", ComputationRuleMultiplicityType.SCALAR, "11"));
        return scoringRule;
    }

    private ScoringRuleParameter manufactureValidScoringRuleParameter(final String parameterName, final boolean isIntegerKeyAndFloatVal) {
        final List<ScoringRuleDictionaryElement> scoringRuleDictionaryElementList = Lists.newArrayList();
        for (int ii = 0; ii < 5; ii++) {
            final String val = String.valueOf(ii + 1);
            scoringRuleDictionaryElementList.add(new ScoringRuleDictionaryElement(isIntegerKeyAndFloatVal ? val : "parameterValueKey" + val, isIntegerKeyAndFloatVal ? val + ".99" : val));
        }
        return new ScoringRuleParameter(parameterName, ComputationRuleMultiplicityType.DICTIONARY, scoringRuleDictionaryElementList);
    }
}
