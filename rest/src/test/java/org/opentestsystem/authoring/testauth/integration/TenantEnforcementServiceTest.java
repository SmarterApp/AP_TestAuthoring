/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.integration;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;

import java.util.Arrays;
import java.util.List;

import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.Assessment;
import org.opentestsystem.authoring.testauth.domain.BlueprintElement;
import org.opentestsystem.authoring.testauth.domain.BlueprintElementListPayload;
import org.opentestsystem.authoring.testauth.domain.Form;
import org.opentestsystem.authoring.testauth.domain.FormPartition;
import org.opentestsystem.authoring.testauth.domain.ItemGroup;
import org.opentestsystem.authoring.testauth.domain.Segment;
import org.opentestsystem.authoring.testauth.rest.AbstractRestEmbeddedMongoTest;
import org.opentestsystem.authoring.testauth.service.TenantEnforcementService;
import org.springframework.beans.factory.annotation.Autowired;

public class TenantEnforcementServiceTest extends AbstractRestEmbeddedMongoTest {

    @Autowired
    private TenantEnforcementService tenantEnforcementService;

    @Test
    public void testCanFindObjectWithAnnotation() {
        Assessment ass = new Assessment();
        ass.setId("anId");

        assertThat(tenantEnforcementService.findAssociatedAssessmentIds(ass).size(), is(1));

        BlueprintElement e1 = new BlueprintElement();
        e1.setAssessmentId("ass1");

        assertThat(tenantEnforcementService.findAssociatedAssessmentIds(e1).size(), is(1));

        BlueprintElement e2 = new BlueprintElement();
        e2.setAssessmentId("ass2");

        List<BlueprintElement> list = Arrays.asList(new BlueprintElement[] {e1, e2 });
        assertThat(tenantEnforcementService.findAssociatedAssessmentIds(list).size(), is(2));

        BlueprintElementListPayload payload = new BlueprintElementListPayload();
        payload.setBlueprintElements(list);
        assertThat(tenantEnforcementService.findAssociatedAssessmentIds(payload).size(), is(2));

    }

    @Test
    public void testOnlyGetsAssessmentOnce() {
        ItemGroup g1 = new ItemGroup();
        g1.setAssessmentId("ass1");

        ItemGroup g2 = new ItemGroup();
        g2.setAssessmentId("ass1");

        List<ItemGroup> list = Arrays.asList(new ItemGroup[] {g1, g2 });
        assertThat(tenantEnforcementService.findAssociatedAssessmentIds(list).size(), is(1));
    }

    @Test
    public void testObjectWithSeveralChildObjects() {
        Form form = new Form();
        form.setAssessmentId("ass1");

        FormPartition formPart1 = new FormPartition();
        formPart1.setAssessmentId("ass2");
        Segment s = new Segment();
        s.setAssessmentId("ass3");
        formPart1.setSegment(s);

        FormPartition formPart2 = new FormPartition();
        formPart2.setAssessmentId("ass4");
        Segment s2 = new Segment();
        s2.setAssessmentId("ass5");
        formPart2.setSegment(s2);

        form.setPartitions(Arrays.asList(formPart1, formPart2));

        assertThat(tenantEnforcementService.findAssociatedAssessmentIds(form).size(), is(5));
    }

}
