/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.domain;

import java.io.Serializable;
import java.util.List;

import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.springframework.data.annotation.Transient;
import org.springframework.data.mongodb.core.index.CompoundIndex;
import org.springframework.data.mongodb.core.index.CompoundIndexes;
import org.springframework.data.mongodb.core.mapping.Document;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

@Document
@JsonIgnoreProperties(ignoreUnknown = true)
@CompoundIndexes(value = { @CompoundIndex(name = "reporting_measure_indx", def = "{'assessmentId':1, 'blueprintReferenceId':1}", unique = true) })
public class ReportingMeasure extends AssessmentChild implements Serializable, TenantedByAssessment {
    private static final long serialVersionUID = 1899942137951467726L;

    @NotNull(message = "blueprintReferenceType.required")
    private BlueprintReferenceType blueprintReferenceType;

    private BlueprintDenotationType blueprintDenotationType;

    private String blueprintReferenceId;

    @NotNull(message = "reportingMeasure.scoringRuleIdList.required")
    @Size(min = 1, message = "reportingMeasure.scoringRuleIdList.required")
    private List<String> scoringRuleIdList;

    @Transient
    private String blueprintReferenceName;

    @Transient
    private List<ScoringRule> scoringRuleList;

    public BlueprintReferenceType getBlueprintReferenceType() {
        return this.blueprintReferenceType;
    }

    public void setBlueprintReferenceType(final BlueprintReferenceType aBlueprintReferenceType) {
        this.blueprintReferenceType = aBlueprintReferenceType;
    }

    public BlueprintDenotationType getBlueprintDenotationType() {
        return this.blueprintDenotationType;
    }

    public void setBlueprintDenotationType(final BlueprintDenotationType blueprintDenotationType) {
        this.blueprintDenotationType = blueprintDenotationType;
    }

    public String getBlueprintReferenceId() {
        return this.blueprintReferenceId;
    }

    public void setBlueprintReferenceId(final String aBlueprintReferenceId) {
        this.blueprintReferenceId = aBlueprintReferenceId;
    }

    public List<String> getScoringRuleIdList() {
        return this.scoringRuleIdList;
    }

    public void setScoringRuleIdList(final List<String> aScoringRuleIdList) {
        this.scoringRuleIdList = aScoringRuleIdList;
    }

    public String getBlueprintReferenceName() {
        return this.blueprintReferenceName;
    }

    public void setBlueprintReferenceName(final String aBlueprintReferenceName) {
        this.blueprintReferenceName = aBlueprintReferenceName;
    }

    public List<ScoringRule> getScoringRuleList() {
        return this.scoringRuleList;
    }

    public void setScoringRuleList(final List<ScoringRule> aScoringRuleList) {
        this.scoringRuleList = aScoringRuleList;
    }
}
