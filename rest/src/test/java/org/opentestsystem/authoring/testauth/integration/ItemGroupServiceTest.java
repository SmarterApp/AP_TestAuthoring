/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.integration;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.Assert.fail;

import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.ItemGroup;
import org.opentestsystem.shared.exception.LocalizedException;

public class ItemGroupServiceTest extends AbstractAssessmentServiceTest {

    @Test
    public void removeItemGroup() {
        final ItemGroup group1 = addAdaptiveItemGroup(this.savedAssessment, this.savedAdaptiveSegment, "groupA");

        assertNumberOfItemGroupsInSegment(this.savedAdaptiveSegment, 1);
        assertNumberOfItemsInSegment(this.savedAdaptiveSegment, 0);

        addAdaptiveItem(this.savedAdaptiveSegment.getId(), "APIP_5000", group1.getId());
        addAdaptiveItem(this.savedAdaptiveSegment.getId(), "APIP_5001", group1.getId());
        addAdaptiveItem(this.savedAdaptiveSegment.getId(), "APIP_5002", group1.getId());

        assertNumberOfItemGroupsInSegment(this.savedAdaptiveSegment, 1);
        assertNumberOfItemsInSegment(this.savedAdaptiveSegment, 3);

        this.itemGroupService.removeItemGroup(group1.getId());

        assertNumberOfItemGroupsInSegment(this.savedAdaptiveSegment, 0);
        assertNumberOfItemsInSegment(this.savedAdaptiveSegment, 0);
    }

    @Test
    public void testMoveGroup() {
        final ItemGroup group1 = addAdaptiveItemGroup(this.savedAssessment, this.savedAdaptiveSegment, "groupA");

        assertNumberOfItemGroupsInSegment(this.savedAdaptiveSegment, 1);
        assertNumberOfItemsInSegment(this.savedAdaptiveSegment, 0);

        addAdaptiveItem(this.savedAdaptiveSegment.getId(), "APIP_5000", group1.getId());
        addAdaptiveItem(this.savedAdaptiveSegment.getId(), "APIP_5001", group1.getId());
        addAdaptiveItem(this.savedAdaptiveSegment.getId(), "APIP_5002", group1.getId());

        assertNumberOfItemGroupsInSegment(this.savedAdaptiveSegment, 1);
        assertNumberOfItemsInSegment(this.savedAdaptiveSegment, 3);

        group1.setLocationId(this.savedAdaptiveSegment2.getId());
        this.itemGroupService.saveItemGroup(group1);

        assertNumberOfItemGroupsInSegment(this.savedAdaptiveSegment, 0);
        assertNumberOfItemsInSegment(this.savedAdaptiveSegment, 0);

        assertNumberOfItemGroupsInSegment(this.savedAdaptiveSegment2, 1);
        assertNumberOfItemsInSegment(this.savedAdaptiveSegment2, 3);
    }

    @Test
    public void verifyDisinctItemGroupNameSegment() {
        addAdaptiveItemGroup(this.savedAssessment, this.savedAdaptiveSegment, "groupA");
        try {
            addAdaptiveItemGroup(this.savedAssessment, this.savedAdaptiveSegment, "groupA");
            fail("should thow duplicate key exception");
        } catch (final LocalizedException e) {
            assertThat(e.getMessage(), is("itemGroup.already.exists"));
        }
    }

    @Test
    public void verifyGroupWithSameNameDifferentSegmentOK() {
        addAdaptiveItemGroup(this.savedAssessment, this.savedAdaptiveSegment, "groupA");
        addAdaptiveItemGroup(this.savedAssessment, this.savedAdaptiveSegment2, "groupA");
        assertNumberOfItemGroupsInSegment(this.savedAdaptiveSegment, 1);
        assertNumberOfItemGroupsInSegment(this.savedAdaptiveSegment2, 1);
    }

    @Test
    public void verifyDisinctItemGroupNameFormPartition() {
        addFixedFormItemGroup(this.savedAssessment, this.form1Partition11, "groupA");
        try {
            addFixedFormItemGroup(this.savedAssessment, this.form1Partition11, "groupA");
            fail("should thow duplicate key exception");
        } catch (final LocalizedException e) {
            assertThat(e.getMessage(), is("itemGroup.already.exists"));
        }
    }

    @Test
    public void verifyGroupWithSameNameDifferentPartitionOK() {
        addFixedFormItemGroup(this.savedAssessment, this.form1Partition11, "groupA");
        addFixedFormItemGroup(this.savedAssessment, this.form1Partition12, "groupA");
        assertNumberOfItemGroupsInFormPartition(this.form1Partition11, 1);
        assertNumberOfItemGroupsInFormPartition(this.form1Partition12, 1);
    }

    @Test
    public void testCantRemoveIfAssessmentLocked() {
        final ItemGroup group1 = addAdaptiveItemGroup(this.savedAssessment, this.savedAdaptiveSegment, "groupA");

        this.savedAssessment.setLocked(true);
        this.assessmentRepository.save(this.savedAssessment);

        try {
            this.itemGroupService.removeItemGroup(group1.getId());
            fail("should thow locked exception");
        } catch (final LocalizedException e) {
            assertThat(e.getMessage(), is("cannot.be.altered.assessment.locked"));
        }
    }

    @Test
    public void testCantAddIfAssessmentLocked() {
        this.savedAssessment.setLocked(true);
        this.assessmentRepository.save(this.savedAssessment);

        try {
            addAdaptiveItemGroup(this.savedAssessment, this.savedAdaptiveSegment, "groupA");
            fail("should thow locked exception");
        } catch (final LocalizedException e) {
            assertThat(e.getMessage(), is("cannot.be.altered.assessment.locked"));
        }
    }

    @Test
    public void testCantRemoveAllGroupsIfAssessmentLocked() {
        addFixedFormItemGroup(this.savedAssessment, this.form1Partition11, "groupA");
        addFixedFormItemGroup(this.savedAssessment, this.form1Partition12, "groupA");

        this.savedAssessment.setLocked(true);
        this.assessmentRepository.save(this.savedAssessment);

        try {
            this.itemGroupService.removeItemGroupsByAssessment(this.savedAssessment.getId());
            fail("should thow locked exception");
        } catch (final LocalizedException e) {
            assertThat(e.getMessage(), is("cannot.be.altered.assessment.locked"));
        }
    }

}
