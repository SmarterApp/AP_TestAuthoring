/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.rest;

import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.opentestsystem.authoring.testauth.domain.Item;
import org.opentestsystem.authoring.testauth.domain.ItemCountSummary;
import org.opentestsystem.authoring.testauth.domain.ItemListPayload;
import org.opentestsystem.authoring.testauth.domain.ItemLocation;
import org.opentestsystem.authoring.testauth.domain.ItemMetadataKeys;
import org.opentestsystem.authoring.testauth.domain.ItemMoveRequest;
import org.opentestsystem.authoring.testauth.domain.ItemMoveResponse;
import org.opentestsystem.authoring.testauth.domain.TibImportResult;
import org.opentestsystem.authoring.testauth.domain.search.ItemSearchRequest;
import org.opentestsystem.authoring.testauth.service.ItemMetadataKeysService;
import org.opentestsystem.authoring.testauth.service.ItemService;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.opentestsystem.shared.web.AbstractRestController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.access.annotation.Secured;
import org.springframework.security.access.prepost.PostAuthorize;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

/**
 * Used to manage item info
 */
@Controller
public class ItemController extends AbstractRestController {

    @Autowired
    private ItemService itemService;

    @Autowired
    private ItemMetadataKeysService itemMetadataKeysService;

    /**
     * Gets itemService by itemId.
     * 
     * @param item id.
     * @return item object.
     */
    @RequestMapping(value = "/item/{itemId}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Pool Read" })
    @PostAuthorize("hasPermission(returnObject, 'ROLE_Pool Read')")
    @ResponseBody
    public Item findItemById(@PathVariable final String itemId, final HttpServletResponse response) {
        return this.itemService.getItem(itemId);
    }

    /**
     * Finds the first 20 distinct (based on 'tibIdentifier' field) items by assessment while filtering
     * by searchVal (tibIdentifier/description). Items will be sorted by tibIdentifier field.
     * Valid query parameters are:
     * <ul>
     * <li>assessmentId (REQUIRED) - assessment to search items for</li>
     * <li>searchVal - value to filter items by (tibIdentifier/description)</li>
     * </ul>
     * 
     * @param assessmentId
     * @param searchVal
     * @return List of Item objects.
     */
    @RequestMapping(value = "/item/search20", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Pool Read" })
    @PostAuthorize("hasPermission(returnObject, 'ROLE_Pool Read')")
    @ResponseBody
    public List<Item> findFirst20DistinctItemsByAssessmentIdAndSearchVal(
            @RequestParam(value = "assessmentId", required = true) final String assessmentId,
            @RequestParam(value = "searchVal", required = false) final String searchVal,
            final HttpServletRequest request) {
        return itemService.getFirst20DistinctItemsByAssessmentIdAndSearchVal(assessmentId, searchVal);
    }

    @RequestMapping(value = "/item", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Pool Read" })
    @PostAuthorize("hasPermission(returnObject, 'ROLE_Pool Read')")
    @ResponseBody
    public SearchResponse<Item> searchItem(final HttpServletRequest request) {
        final String assessmentId = request.getParameter("assessmentId");
        final ItemMetadataKeys metaData = this.itemMetadataKeysService.getItemMetadataKeysByAssessment(assessmentId);
        final Set<String> searchableFields = metaData == null ? new HashSet<String>() : metaData.getItemMetadataKeys();

        final ItemSearchRequest searchRequest = new ItemSearchRequest(request.getParameterMap(), searchableFields);
        return this.itemService.searchItems(searchRequest);
    }

    @RequestMapping(value = "/item/importFromTib/", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Pool Read" })
    @PreAuthorize("hasPermission(#tenantId, 'ROLE_Pool Read')")
    @ResponseBody
    public TibImportResult importItemsFromTib(final HttpServletRequest request
            , @RequestParam(required = false) final String targetSegmentId
            , @RequestParam(required = false) final String targetFormPartitionId
            , @RequestParam(required = false) final String targetItemGroupId
            , @RequestParam(required = true) final String tenantId
            ) {

        return this.itemService.importItemsFromTib(targetSegmentId, targetFormPartitionId, targetItemGroupId, request.getParameterMap());
    }

    /**
     * Creates item.
     * 
     * @param item to be saved.
     * @param response HttpServletResponse.
     * @return item newly created item object.
     */
    @ResponseStatus(HttpStatus.CREATED)
    @RequestMapping(value = "/item", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Pool Modify" })
    @PreAuthorize("hasPermission(#item, 'ROLE_Pool Modify')")
    @ResponseBody
    public Item saveItem(@RequestBody @Valid final Item item, final HttpServletResponse response) {
        return this.itemService.saveItem(item);
    }

    /**
     * Updates item.
     * 
     * @param item to be saved.
     * @param response HttpServletResponse.
     * @return item updated item object.
     */
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "/item/{itemId}", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Pool Modify" })
    @PreAuthorize("hasPermission(#item, 'ROLE_Pool Modify')")
    @ResponseBody
    public Item updateItem(@PathVariable final String itemId, @RequestBody @Valid final Item item, final HttpServletResponse response) {
        return this.itemService.saveItem(item);
    }

    /**
     * Updates all items.
     * 
     * @param itemList to be saved.
     * @return List<item> updatedObjects.
     */
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "/item", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Pool Modify" })
    @PreAuthorize("hasPermission(#itemPayload.getItems(), 'ROLE_Pool Modify')")
    @ResponseBody
    public List<Item> updateItemList(@RequestBody @Valid final ItemListPayload itemPayload) {
        return this.itemService.saveItemList(itemPayload.getItems());
    }

    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "/formPartition/{formPartitionId}/sortItems", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Pool Modify" })
    @ResponseBody
    public List<Item> sortFormPartitionItems(@RequestBody final List<ItemLocation> itemLocataionList, @PathVariable final String formPartitionId) {
        this.itemService.updateItemLocationForPartition(formPartitionId, itemLocataionList);
        return this.itemService.getItemsByFormPartitionId(formPartitionId);
    }
    
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "/segment/{segmentId}/sortItems", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Pool Modify" })
    @ResponseBody
    public List<Item> sortSegmentItems(@RequestBody final List<ItemLocation> itemLocataionList, @PathVariable final String segmentId) {
        this.itemService.updateItemLocationForSegment(segmentId, itemLocataionList);
        return this.itemService.getItemsBySegmentId(segmentId);
    }

    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "/item/moveInSegmentPool", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Pool Modify" })
    @ResponseBody
    public ItemMoveResponse moveInSegmentPool(@RequestBody final ItemMoveRequest moveRequest, @RequestParam final String assessmentId) {
        return this.itemService.moveSegmentPoolItems(assessmentId, moveRequest);
    }

    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "/item/moveInForm", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Pool Modify" })
    @ResponseBody
    public ItemMoveResponse moveInForm(@RequestBody final ItemMoveRequest moveRequest, @RequestParam final String assessmentId) {
        return this.itemService.moveFormPartitionItems(assessmentId, moveRequest);
    }

    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "/item/removeFromSegmentPool", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Pool Modify" })
    @ResponseBody
    public ItemMoveResponse removeFromSegmentPool(@RequestBody final ItemMoveRequest moveRequest, @RequestParam final String assessmentId) {
        return this.itemService.removeSegmentPoolItems(assessmentId, moveRequest);
    }

    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "/item/removeFromForm", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Pool Modify" })
    @ResponseBody
    public ItemMoveResponse removeFromForm(@RequestBody final ItemMoveRequest moveRequest, @RequestParam final String assessmentId) {
        return this.itemService.removeFormPartitionItems(assessmentId, moveRequest);
    }

    @RequestMapping(value = "/item/segmentItemCounts/{segmentId}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Pool Read" })
    @ResponseBody
    public Map<String, Map<String, ItemCountSummary>> getSegmentItemCounts(@PathVariable final String segmentId, final HttpServletResponse response) {
        return this.itemService.getSegmentItemCounts(segmentId);
    }

}
