/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.domain;

import java.io.Serializable;
import java.util.List;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;
import org.hibernate.validator.constraints.NotBlank;
import org.springframework.data.annotation.Id;
import org.springframework.data.annotation.Transient;
import org.springframework.data.mongodb.core.index.CompoundIndex;
import org.springframework.data.mongodb.core.index.CompoundIndexes;
import org.springframework.data.mongodb.core.mapping.Document;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

@Document
@JsonIgnoreProperties(ignoreUnknown = true)
@CompoundIndexes(value = { @CompoundIndex(name = "computationRule_indx", def = "{'name':1, 'version':1}", unique = true) })
public class ComputationRule implements Serializable {
    private static final long serialVersionUID = 1693202958911228485L;

    @Id
    private String id;

    private static final int SIXTY = 60;
    private static final int NON_MAGIC_2K = 2000;

    @NotBlank(message = "computationRule.name.required")
    @Size(max = SIXTY, message = "computationRule.name.length")
    private String name;

    @NotBlank(message = "computationRule.version.required")
    @Size(max = SIXTY, message = "computationRule.version.length")
    private String version;

    @NotNull(message = "computationRule.conversionTableType.required")
    private ConversionTableType conversionTableType;

    @Size(max = NON_MAGIC_2K, message = "computationRule.description.length")
    private String description;

    @Valid
    private List<ComputationRuleParameter> parameters;

    @Transient
    private transient boolean canEdit;

    public String getId() {
        return this.id;
    }

    public void setId(final String aId) {
        this.id = aId;
    }

    public String getName() {
        return this.name;
    }

    public void setName(final String aName) {
        this.name = aName;
    }

    public String getVersion() {
        return this.version;
    }

    public void setVersion(final String aVersion) {
        this.version = aVersion;
    }

    public ConversionTableType getConversionTableType() {
        return this.conversionTableType;
    }

    public void setConversionTableType(final ConversionTableType aConversionTableType) {
        this.conversionTableType = aConversionTableType;
    }

    public String getDescription() {
        return this.description;
    }

    public void setDescription(final String aDescription) {
        this.description = aDescription;
    }

    public boolean isCanEdit() {
        return this.canEdit;
    }

    public void setCanEdit(final boolean canWeEdit) {
        this.canEdit = canWeEdit;
    }

    public List<ComputationRuleParameter> getParameters() {
        return this.parameters;
    }

    public void setParameters(final List<ComputationRuleParameter> aParameters) {
        this.parameters = aParameters;
    }

    @Override
    public boolean equals(final Object obj) {
        return EqualsBuilder.reflectionEquals(this, obj);
    }

    @Override
    public String toString() {
        return ToStringBuilder.reflectionToString(this, ToStringStyle.SHORT_PREFIX_STYLE);
    }

    @Override
    public int hashCode() {
        return HashCodeBuilder.reflectionHashCode(this);
    }
}
