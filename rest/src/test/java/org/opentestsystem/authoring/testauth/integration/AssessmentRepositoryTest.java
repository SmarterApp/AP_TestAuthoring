/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.integration;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;

import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.Assessment;
import org.opentestsystem.authoring.testauth.domain.DomainFactory;
import org.opentestsystem.authoring.testauth.domain.Publication;
import org.opentestsystem.authoring.testauth.domain.Subject;
import org.opentestsystem.authoring.testauth.persistence.AssessmentRepository;
import org.opentestsystem.authoring.testauth.rest.AbstractRestEmbeddedMongoTest;
import org.springframework.beans.factory.annotation.Autowired;

public class AssessmentRepositoryTest extends AbstractRestEmbeddedMongoTest {

    @Autowired
    private AssessmentRepository assessmentRepository;

    @Test
    public void saveAssessmentTest() {
        final Assessment assessment = DomainFactory.manufactureValidAssessment(PODAM_FACTORY.manufacturePojo(Subject.class), PODAM_FACTORY.manufacturePojo(Publication.class));
        final Assessment savedAssessment = this.assessmentRepository.save(assessment);
        assertThat(savedAssessment, is(notNullValue()));
        assertThat(savedAssessment.getId(), is(notNullValue()));
    }

    @Test
    public void findAssessmentTest() {
        final Assessment assessment = DomainFactory.manufactureValidAssessment(PODAM_FACTORY.manufacturePojo(Subject.class), PODAM_FACTORY.manufacturePojo(Publication.class));
        final Assessment savedAssessment = this.assessmentRepository.save(assessment);
        assertThat(savedAssessment, is(notNullValue()));
        final Assessment foundAssessment = this.assessmentRepository.findOne(savedAssessment.getId());
        assertThat(savedAssessment.getId(), is(equalTo(foundAssessment.getId())));
        assertThat(savedAssessment, is(equalTo(foundAssessment)));
    }

    @Test
    public void removeAssessmentTest() {
        final Assessment assessment = DomainFactory.manufactureValidAssessment(PODAM_FACTORY.manufacturePojo(Subject.class), PODAM_FACTORY.manufacturePojo(Publication.class));
        final Assessment savedAssessment = this.assessmentRepository.save(assessment);
        this.assessmentRepository.delete(assessment);
        final Assessment foundAssessment = this.assessmentRepository.findOne(savedAssessment.getId());
        assertThat(foundAssessment, is(nullValue()));
    }
}
