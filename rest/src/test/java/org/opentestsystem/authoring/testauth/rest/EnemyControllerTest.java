/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.rest;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;

import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.Assessment;
import org.opentestsystem.authoring.testauth.domain.DomainFactory;
import org.opentestsystem.authoring.testauth.domain.Enemy;
import org.opentestsystem.authoring.testauth.domain.EnemyType;
import org.opentestsystem.authoring.testauth.domain.Item;
import org.opentestsystem.authoring.testauth.domain.ItemGroup;
import org.opentestsystem.authoring.testauth.domain.Publication;
import org.opentestsystem.authoring.testauth.domain.Subject;
import org.opentestsystem.authoring.testauth.persistence.ItemGroupRepository;
import org.opentestsystem.authoring.testauth.persistence.ItemRepository;
import org.opentestsystem.authoring.testauth.service.AssessmentService;
import org.opentestsystem.authoring.testauth.service.PublicationService;
import org.opentestsystem.authoring.testauth.service.SubjectService;
import org.opentestsystem.shared.docs.annotation.ApiDocExample;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.Maps;

public class EnemyControllerTest extends AbstractRestEmbeddedMongoTest {

    private static final String BASE_URL = "/enemy";

    @Autowired
    private PublicationService publicationService;

    @Autowired
    private SubjectService subjectService;

    @Autowired
    private AssessmentService assessmentService;

    @Autowired
    private ItemRepository itemRepository;

    @Autowired
    private ItemGroupRepository itemGroupRepository;

    private Assessment savedAssessment;
    private Item savedItem;
    private Item savedItem2;
    private ItemGroup savedItemGroup;

    @ApiDocExample(rank = -1)
    @Before
    public void setupTestData() {
        final Subject savedSubject = this.subjectService.saveSubject(DomainFactory.manufactureValidSubject("ABB"));
        final Publication savedPublication = this.publicationService.savePublication(PODAM_FACTORY.manufacturePojo(Publication.class));
        this.savedAssessment = this.assessmentService.saveAssessment(DomainFactory.manufactureValidAssessment(savedSubject, savedPublication));

        this.savedItem = this.itemRepository.save(DomainFactory.manufactureValidItem(this.savedAssessment.getId()));
        this.savedItem2 = this.itemRepository.save(DomainFactory.manufactureValidItem(this.savedAssessment.getId()));
        this.savedItemGroup = this.itemGroupRepository.save(DomainFactory.manufactureValidAdaptiveItemGroup("segment-id"));
    }

    @ApiDocExample(rank = 1)
    @Test
    public void saveEnemy() throws InterruptedException {
        final Enemy savedEnemy = callPOSTRestService(
                BASE_URL,
                buildParamObject(DomainFactory.manufactureValidEnemy(this.savedAssessment.getId(), this.savedItem.getTibIdentifier(), EnemyType.ITEM, this.savedItemGroup.getId(), EnemyType.ITEM_GROUP)),
                Enemy.class);
        final Enemy retrievedEnemy = this.mongoTemplate.findById(savedEnemy.getId(), Enemy.class);

        assertThat(retrievedEnemy, is(notNullValue()));
        assertThat(retrievedEnemy.getObjectId1(), is(equalTo(savedEnemy.getObjectId1())));
    }

    @ApiDocExample(rank = 2)
    @Test
    public void updateEnemy() throws InterruptedException {
        final Enemy savedEnemy = callPOSTRestService(
                BASE_URL,
                buildParamObject(DomainFactory.manufactureValidEnemy(this.savedAssessment.getId(), this.savedItem.getTibIdentifier(), EnemyType.ITEM, this.savedItemGroup.getId(), EnemyType.ITEM_GROUP)),
                Enemy.class);
        assertThat(savedEnemy, is(notNullValue()));

        savedEnemy.setObjectId1(this.savedItem2.getTibIdentifier());
        final Enemy updatedEnemy = callPUTRestService(BASE_URL + "/" + savedEnemy.getId(), buildParamObject(savedEnemy), Enemy.class);

        assertThat(updatedEnemy, is(notNullValue()));
        assertThat(updatedEnemy.getObjectId1(), is(equalTo(this.savedItem2.getTibIdentifier())));
    }

    @ApiDocExample(rank = 3)
    @Test
    public void testRemoveEnemy() throws InterruptedException {
        final Enemy savedEnemy1 = callPOSTRestService(
                BASE_URL,
                buildParamObject(DomainFactory.manufactureValidEnemy(this.savedAssessment.getId(), this.savedItem.getTibIdentifier(), EnemyType.ITEM, this.savedItemGroup.getId(), EnemyType.ITEM_GROUP)),
                Enemy.class);
        final Enemy savedEnemy2 = callPOSTRestService(BASE_URL,
                buildParamObject(DomainFactory.manufactureValidEnemy(this.savedAssessment.getId(), this.savedItem2.getTibIdentifier(), EnemyType.ITEM, this.savedItemGroup.getId(),
                        EnemyType.ITEM_GROUP)),
                Enemy.class);
        assertThat(this.mongoTemplate.findAll(Enemy.class).size(), is(equalTo(2)));

        callDeleteRestService(BASE_URL + "/" + savedEnemy2.getId());

        final Enemy fetchedEnemy1 = callGETRestService(BASE_URL + "/" + savedEnemy1.getId(), Enemy.class);
        assertThat(fetchedEnemy1, is(notNullValue()));

        final Enemy fetchedEnemy2 = callGETRestService(BASE_URL + "/" + savedEnemy2.getId(), Enemy.class);
        assertThat(fetchedEnemy2, is(nullValue()));
    }

    @ApiDocExample(rank = 4)
    @Test
    public void findEnemy() throws InterruptedException {
        final Enemy savedEnemy1 = callPOSTRestService(
                BASE_URL,
                buildParamObject(DomainFactory.manufactureValidEnemy(this.savedAssessment.getId(), this.savedItem.getTibIdentifier(), EnemyType.ITEM, this.savedItemGroup.getId(), EnemyType.ITEM_GROUP)),
                Enemy.class);

        final Enemy fetchedEnemy = callGETRestService(BASE_URL + "/" + savedEnemy1.getId(), Enemy.class);
        assertThat(fetchedEnemy, is(notNullValue()));
    }

    @ApiDocExample(rank = 5)
    @SuppressWarnings("unchecked")
    @Test
    public void findEnemies() throws InterruptedException {
        callPOSTRestService(
                BASE_URL,
                buildParamObject(DomainFactory.manufactureValidEnemy(this.savedAssessment.getId(), this.savedItem.getTibIdentifier(), EnemyType.ITEM, this.savedItemGroup.getId(), EnemyType.ITEM_GROUP)),
                Enemy.class);

        final SearchResponse<Enemy> response = callGETRestService(BASE_URL, SearchResponse.class);
        assertThat(response.getSearchResults().size(), is(1));
    }

    @ApiDocExample(rank = -1)
    @SuppressWarnings("unchecked")
    @Test
    public void searchEnemies() {
        callPOSTRestService(
                BASE_URL,
                buildParamObject(DomainFactory.manufactureValidEnemy(this.savedAssessment.getId(), this.savedItem.getTibIdentifier(), EnemyType.ITEM, this.savedItemGroup.getId(), EnemyType.ITEM_GROUP)),
                Enemy.class);
        callPOSTRestService(BASE_URL,
                buildParamObject(DomainFactory.manufactureValidEnemy(this.savedAssessment.getId(), this.savedItem2.getTibIdentifier(), EnemyType.ITEM, this.savedItemGroup.getId(),
                        EnemyType.ITEM_GROUP)),
                Enemy.class);

        final List<Enemy> savedEnemies = this.mongoTemplate.findAll(Enemy.class);
        assertThat(savedEnemies.size(), is(2));

        final Map<String, String> params = Maps.newHashMap();
        params.put("assessmentId", this.savedAssessment.getId());

        SearchResponse<Enemy> response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getSearchResults().size(), is(2));

        params.clear();
        params.put("assessmentId", "invalid-assessment");
        response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getSearchResults().size(), is(0));

        params.clear();
        params.put("assessmentId", this.savedAssessment.getId());
        params.put("objectId1", "invalid-item-id");
        response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getSearchResults().size(), is(0));

        params.clear();
        params.put("assessmentId", this.savedAssessment.getId());
        params.put("objectId1", savedEnemies.get(0).getObjectId1());
        response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getSearchResults().size(), is(1));

        params.clear();
        params.put("assessmentId", this.savedAssessment.getId());
        params.put("objectId1", savedEnemies.get(0).getObjectId1());
        params.put("objectId2", savedEnemies.get(0).getObjectId2());
        response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getSearchResults().size(), is(1));

        params.clear();
        response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getReturnCount(), is(2));
        assertThat(response.getSearchResults().size(), is(2));
    }

}
