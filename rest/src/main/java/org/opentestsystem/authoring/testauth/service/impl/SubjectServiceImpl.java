/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.service.impl;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.authoring.testauth.domain.Assessment;
import org.opentestsystem.authoring.testauth.domain.Publication;
import org.opentestsystem.authoring.testauth.domain.Subject;
import org.opentestsystem.authoring.testauth.domain.search.PublicationSearchRequest;
import org.opentestsystem.authoring.testauth.domain.search.SubjectSearchRequest;
import org.opentestsystem.authoring.testauth.persistence.SubjectRepository;
import org.opentestsystem.authoring.testauth.service.AssessmentService;
import org.opentestsystem.authoring.testauth.service.PublicationService;
import org.opentestsystem.authoring.testauth.service.SubjectService;
import org.opentestsystem.shared.exception.LocalizedException;
import org.opentestsystem.shared.progman.client.domain.Tenant;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DuplicateKeyException;
import org.springframework.stereotype.Service;

import com.google.common.collect.ImmutableMap;

@Service
public class SubjectServiceImpl implements SubjectService {

    @Autowired
    private transient SubjectRepository subjectRepository;

    @Autowired
    private transient AssessmentService assessmentService;

    @Autowired
    private transient PublicationService publicationService;

    @Autowired
    private TenantHelper tenantHelper;

    @Override
    public Subject getSubject(final String subjectId) {
        final Subject subject = this.subjectRepository.findOne(subjectId);
        loadReferenceData(subject);
        return subject;
    }

    @Override
    public Subject saveSubject(final Subject subject) {
        Subject savedSubject = null;

        if (StringUtils.isNotEmpty(subject.getId())) {
            final Subject originalSubject = this.subjectRepository.findOne(subject.getId());

            // if updating existing subject, validate it's not on an assessment
            final SearchResponse<Assessment> relatedAssessments = this.assessmentService.searchAssessments(
                    ImmutableMap.of("subjectId", new String[] { subject.getId() }, "tenantId", new String[] { originalSubject.getTenantId() }));

            if (relatedAssessments.getTotalCount() > 0) {
                throw new LocalizedException("subject.on.assessment");
            }

            // if updating existing subject's tenant, validate it's not on a publication
            if (!originalSubject.getTenantId().equals(subject.getTenantId())) {
                final SearchResponse<Publication> relatedPublications = this.publicationService.searchPublications(
                        new PublicationSearchRequest(ImmutableMap.of("subjectIds", new String[] { subject.getId() })));

                if (relatedPublications.getTotalCount() > 0) {
                    throw new LocalizedException("subject.on.publication");
                }
            }

        }

        try {
            savedSubject = this.subjectRepository.save(subject);
            loadReferenceData(savedSubject);
        } catch (final DuplicateKeyException dke) {
            throw new LocalizedException("subject.already.exists", new String[] { subject.getName(), subject.getAbbreviation() }, dke);
        }
        return savedSubject;
    }

    @Override
    public Subject retireSubject(final String subjectId, final boolean undoRetirement) {
        final Subject subject = getSubject(subjectId);
        subject.setInactive(!undoRetirement);
        this.subjectRepository.save(subject);
        loadReferenceData(subject);
        return subject;
    }

    @Override
    public void removeSubject(final String subjectId) {
        this.subjectRepository.delete(subjectId);
    }

    @Override
    public SearchResponse<Subject> searchSubjects(final SubjectSearchRequest searchRequest) {
        final SearchResponse<Subject> subjects = this.subjectRepository.search(searchRequest);
        for (final Subject subject : subjects.getSearchResults()) {
            loadReferenceData(subject);
        }
        return subjects;
    }

    private void loadReferenceData(final Subject subject) {
        if (subject != null && StringUtils.isNotBlank(subject.getTenantId())) {
            final Tenant tenant = this.tenantHelper.loadTenant(subject.getTenantId());
            if (tenant != null) {
                final String tenantName = tenant.getName() + (StringUtils.isNotBlank(tenant.getDescription()) ? " - " + tenant.getDescription() : "");
                subject.setTenantName(tenantName);
            }
        }
    }
}
