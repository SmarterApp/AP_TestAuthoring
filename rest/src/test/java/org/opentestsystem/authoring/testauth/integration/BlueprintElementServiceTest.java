/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.integration;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.Assert.fail;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import javax.validation.ConstraintViolationException;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.authoring.testauth.config.TestAuthUtil;
import org.opentestsystem.authoring.testauth.domain.AdaptiveItemLocation;
import org.opentestsystem.authoring.testauth.domain.Assessment;
import org.opentestsystem.authoring.testauth.domain.BlueprintDenotationType;
import org.opentestsystem.authoring.testauth.domain.BlueprintElement;
import org.opentestsystem.authoring.testauth.domain.BlueprintElementValue;
import org.opentestsystem.authoring.testauth.domain.BlueprintReferenceType;
import org.opentestsystem.authoring.testauth.domain.ComputationRule;
import org.opentestsystem.authoring.testauth.domain.ConversionTableType;
import org.opentestsystem.authoring.testauth.domain.CoreStandardPublicationPayloadElement;
import org.opentestsystem.authoring.testauth.domain.CoreStandardPublicationResponse;
import org.opentestsystem.authoring.testauth.domain.DomainFactory;
import org.opentestsystem.authoring.testauth.domain.Item;
import org.opentestsystem.authoring.testauth.domain.ItemLocation;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionAlgorithm;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionAlgorithmType;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionPurpose;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionType;
import org.opentestsystem.authoring.testauth.domain.PerformanceLevel;
import org.opentestsystem.authoring.testauth.domain.Publication;
import org.opentestsystem.authoring.testauth.domain.PublishingRecord;
import org.opentestsystem.authoring.testauth.domain.ScoringRule;
import org.opentestsystem.authoring.testauth.domain.Segment;
import org.opentestsystem.authoring.testauth.domain.Subject;
import org.opentestsystem.authoring.testauth.domain.ValidationResult;
import org.opentestsystem.authoring.testauth.persistence.AssessmentRepository;
import org.opentestsystem.authoring.testauth.persistence.BlueprintElementRepository;
import org.opentestsystem.authoring.testauth.persistence.SegmentRepository;
import org.opentestsystem.authoring.testauth.rest.AbstractRestEmbeddedMongoTest;
import org.opentestsystem.authoring.testauth.service.AssessmentService;
import org.opentestsystem.authoring.testauth.service.BlueprintElementService;
import org.opentestsystem.authoring.testauth.service.ComputationRuleService;
import org.opentestsystem.authoring.testauth.service.CoreStandardsService;
import org.opentestsystem.authoring.testauth.service.ItemSelectionAlgorithmService;
import org.opentestsystem.authoring.testauth.service.ItemService;
import org.opentestsystem.authoring.testauth.service.PerformanceLevelService;
import org.opentestsystem.authoring.testauth.service.PublicationService;
import org.opentestsystem.authoring.testauth.service.PublishingRecordService;
import org.opentestsystem.authoring.testauth.service.ScoringRuleService;
import org.opentestsystem.authoring.testauth.service.SegmentService;
import org.opentestsystem.authoring.testauth.service.SubjectService;
import org.opentestsystem.shared.exception.LocalizedException;
import org.opentestsystem.shared.progman.client.ProgManClient;
import org.opentestsystem.shared.progman.client.domain.Tenant;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.util.ReflectionTestUtils;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;

public class BlueprintElementServiceTest extends AbstractRestEmbeddedMongoTest {

    @Autowired
    private BlueprintElementRepository blueprintElementRepository;

    @Autowired
    private BlueprintElementService blueprintElementService;

    @Autowired
    private PublicationService publicationService;

    @Autowired
    private SubjectService subjectService;

    @Autowired
    private AssessmentRepository assessmentRepository;

    @Autowired
    private AssessmentService assessmentService;

    @Autowired
    private ItemSelectionAlgorithmService itemSelectionAlgorithmService;

    @Autowired
    private SegmentService segmentService;

    @Autowired
    private SegmentRepository segmentRepository;

    @Autowired
    private ItemService itemService;

    @Autowired
    private PublishingRecordService publishingRecordService;

    @Autowired
    private ComputationRuleService computationRuleService;

    @Autowired
    private ScoringRuleService scoringRuleService;

    @Autowired
    private PerformanceLevelService performanceLevelService;

    @Autowired
    private ProgManClient progManClient; // mocked client

    private CoreStandardsService coreStandardsService;

    private Assessment savedAssessment = null;
    private Assessment savedAssessment2 = null;
    private ItemSelectionAlgorithm savedAlgorithm = null;

    @Before
    public void setupTestData() {
        final Subject savedSubject = this.subjectService.saveSubject(DomainFactory.manufactureValidSubject("abb"));
        final Publication savedPublication = this.publicationService.savePublication(DomainFactory.manufactureValidPublication(savedSubject.getTenantId(), ImmutableSet.of(savedSubject)));
        this.savedAssessment = this.assessmentService.saveAssessment(DomainFactory.manufactureValidAssessment(savedSubject, savedPublication));
        this.savedAssessment2 = this.assessmentService.saveAssessment(DomainFactory.manufactureValidAssessment(savedSubject, savedPublication));

        final ItemSelectionAlgorithm algorithm = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.BOOLEAN);
        algorithm.setItemSelectionAlgorithmType(ItemSelectionAlgorithmType.ADAPTIVE);
        this.savedAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithm);

        saveNewSegment(this.savedAlgorithm, null, "segment1", "segment2", "segment3", "segment4", "segmentA", "segmentB", "segmentX", "segmentY");

        this.coreStandardsService = mock(CoreStandardsService.class);
        ReflectionTestUtils.setField(this.blueprintElementService, "coreStandardsService", this.coreStandardsService);
    }

    @After
    public void done() {
        this.savedAssessment = null;
        this.savedAssessment2 = null;
        this.savedAlgorithm = null;
        this.coreStandardsService = null;
    }

    private List<Segment> getSegmentListForAssessment(final String assessmentId) {
        final List<Segment> segments = this.segmentService.findSegmentListByAssessmentId(assessmentId);
        this.segmentService.loadReferenceData(segments);
        return segments;
    }

    @Test
    public void getBlueprintElementsByAssessmentId() {
        final BlueprintElement blueprintElementToSave = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), getSegmentListForAssessment(this.savedAssessment.getId()));
        final BlueprintElement savedBlueprintElement = this.blueprintElementService.saveBlueprintElement(null, blueprintElementToSave);
        assertThat(savedBlueprintElement, is(not(nullValue())));

        final BlueprintElement blueprintElementToSave2 = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), getSegmentListForAssessment(this.savedAssessment.getId()));
        final BlueprintElement savedBlueprintElement2 = this.blueprintElementService.saveBlueprintElement(null, blueprintElementToSave2);
        assertThat(savedBlueprintElement2, is(not(nullValue())));

        final BlueprintElement blueprintElementToSave3 = DomainFactory.manufactureValidBlueprintElement("parent-id-XXX", getSegmentListForAssessment("parent-id-XXX"));
        blueprintElementToSave3.setAssessmentId("parent-id-XXX");
        final BlueprintElement savedBlueprintElement3 = this.blueprintElementService.saveBlueprintElement(null, blueprintElementToSave3);
        assertThat(savedBlueprintElement3, is(not(nullValue())));

        assertThat(this.blueprintElementService.getBlueprintElementsByAssessmentId(this.savedAssessment.getId()).size(), is(2));
        assertThat(this.blueprintElementService.getBlueprintElementsByAssessmentId("parent-id-XXX").size(), is(1));
        assertThat(this.blueprintElementService.getBlueprintElementsByAssessmentId("invalid-id").size(), is(0));
    }

    @Test
    public void saveNewBlueprintElementTest() {
        final BlueprintElement blueprintElementToSave = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), getSegmentListForAssessment(this.savedAssessment.getId()));
        final BlueprintElement savedBlueprintElement = this.blueprintElementService.saveBlueprintElement(null, blueprintElementToSave);
        assertThat(savedBlueprintElement, is(notNullValue()));
        final BlueprintElement retrievedBlueprintElement = this.blueprintElementService.getBlueprintElement(savedBlueprintElement.getId());
        assertThat(retrievedBlueprintElement, is(notNullValue()));
    }

    @Test
    public void saveExistingBlueprintElementTest() {
        final BlueprintElement blueprintElementToSave = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), getSegmentListForAssessment(this.savedAssessment.getId()));
        final BlueprintElement savedBlueprintElement = this.blueprintElementService.saveBlueprintElement(null, blueprintElementToSave);
        assertThat(savedBlueprintElement, is(notNullValue()));
        final BlueprintElement retrievedBlueprintElement = this.blueprintElementService.getBlueprintElement(savedBlueprintElement.getId());
        assertThat(retrievedBlueprintElement, is(notNullValue()));
        retrievedBlueprintElement.setTextDescription("new textDescription");
        final BlueprintElement resavedBlueprintElement = this.blueprintElementService.saveBlueprintElement(savedBlueprintElement.getId(), retrievedBlueprintElement);
        assertThat(resavedBlueprintElement, is(notNullValue()));
        assertThat(resavedBlueprintElement.getTextDescription(), is(equalTo("new textDescription")));
    }

    @Test
    public void saveExistingBlueprintElementLockedAssessmentTest() {
        final BlueprintElement blueprintElementToSave = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), getSegmentListForAssessment(this.savedAssessment.getId()));
        blueprintElementToSave.setGrade(this.savedAssessment.getGrade()[0]);
        blueprintElementToSave.setLevel("1");
        blueprintElementToSave.setStandardKey("CC-ELA-v1");
        blueprintElementToSave.setTextDescription("textDescription");
        blueprintElementToSave.setActive(true);
        final BlueprintElement savedBlueprintElement = this.blueprintElementService.saveBlueprintElement(null, blueprintElementToSave);
        assertThat(savedBlueprintElement, is(notNullValue()));

        final Tenant tenant1 = buildTenant("id1", "tenant1", "description1");
        when(this.progManClient.getTenantById(this.savedAssessment.getTenantId())).thenReturn(tenant1);
        PublishingRecord publishingRecord = this.publishingRecordService.retrievePublishingRecordWithAllowablePurposes(this.savedAssessment.getId());
        publishingRecord = this.publishingRecordService.savePublishingRecord(publishingRecord, false);
        this.publishingRecordService.savePublishingRecord(publishingRecord, false);

        final BlueprintElement retrievedBlueprintElement = this.blueprintElementService.getBlueprintElement(savedBlueprintElement.getId());
        assertThat(retrievedBlueprintElement, is(notNullValue()));
        retrievedBlueprintElement.setTextDescription("new textDescription");
        try {
            this.blueprintElementService.saveBlueprintElement(savedBlueprintElement.getId(), retrievedBlueprintElement);
            fail("exception should be thrown when trying to save blueprintElement data for an already locked assessment");
        } catch (final LocalizedException e) {
            assertThat(e.getMessage(), is("cannot.be.altered.assessment.locked"));
        }
    }

    @Test
    public void removeBlueprintElementByAssessmentIdTest() {
        final BlueprintElement blueprintElementToSave = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), getSegmentListForAssessment(this.savedAssessment.getId()));
        blueprintElementToSave.setId(null);
        final BlueprintElement savedBlueprintElement = this.blueprintElementService.saveBlueprintElement(null, blueprintElementToSave);
        assertThat(savedBlueprintElement, is(notNullValue()));

        final BlueprintElement blueprintElementToSave2 = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), getSegmentListForAssessment(this.savedAssessment.getId()));
        blueprintElementToSave2.setId(null);
        final BlueprintElement savedBlueprintElement2 = this.blueprintElementService.saveBlueprintElement(null, blueprintElementToSave2);
        assertThat(savedBlueprintElement2, is(notNullValue()));

        this.blueprintElementService.removeByAssessmentId(savedBlueprintElement.getAssessmentId());

        final BlueprintElement retrievedBlueprintElement = this.blueprintElementService.getBlueprintElement(savedBlueprintElement.getId());
        assertThat(retrievedBlueprintElement, is(nullValue()));

        final BlueprintElement retrievedBlueprintElement2 = this.blueprintElementService.getBlueprintElement(savedBlueprintElement2.getId());
        assertThat(retrievedBlueprintElement2, is(nullValue()));
    }

    @Test
    public void removeBlueprintElementByAssessmentIdLockedAssessmentTest() {
        final BlueprintElement blueprintElementToSave = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), getSegmentListForAssessment(this.savedAssessment.getId()));
        blueprintElementToSave.setGrade(this.savedAssessment.getGrade()[0]);
        blueprintElementToSave.setLevel("1");
        blueprintElementToSave.setStandardKey("CC-ELA-v1");
        blueprintElementToSave.setTextDescription("textDescription");
        blueprintElementToSave.setActive(true);
        final BlueprintElement savedBlueprintElement = this.blueprintElementService.saveBlueprintElement(null, blueprintElementToSave);
        assertThat(savedBlueprintElement, is(notNullValue()));

        final Tenant tenant1 = buildTenant("id1", "tenant1", "description1");
        when(this.progManClient.getTenantById(this.savedAssessment.getTenantId())).thenReturn(tenant1);
        PublishingRecord publishingRecord = this.publishingRecordService.retrievePublishingRecordWithAllowablePurposes(this.savedAssessment.getId());
        // publishingRecord.setPurpose(Purpose.ADMINISTRATION);
        publishingRecord = this.publishingRecordService.savePublishingRecord(publishingRecord, false);
        this.publishingRecordService.savePublishingRecord(publishingRecord, false);

        final BlueprintElement retrievedBlueprintElement = this.blueprintElementService.getBlueprintElement(savedBlueprintElement.getId());
        assertThat(retrievedBlueprintElement, is(notNullValue()));
        retrievedBlueprintElement.setTextDescription("new textDescription");
        try {
            this.blueprintElementService.removeByAssessmentId(retrievedBlueprintElement.getAssessmentId());
            fail("exception should be thrown when trying to save blueprintElement data for an already locked assessment");
        } catch (final LocalizedException e) {
            assertThat(e.getMessage(), is("cannot.be.altered.assessment.locked"));
        }
    }

    @Test
    public void searchBlueprintElements() {
        final List<Segment> segments = this.segmentService.findSegmentListByAssessmentId(this.savedAssessment.getId());
        this.segmentService.loadReferenceData(segments);
        final BlueprintElement blueprintElementToSave = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), segments);
        blueprintElementToSave.setAssessmentId(this.savedAssessment.getId());
        final BlueprintElement savedBlueprintElement = this.blueprintElementService.saveBlueprintElement(null, blueprintElementToSave);
        assertThat(savedBlueprintElement, is(not(nullValue())));

        final List<Segment> segments2 = this.segmentService.findSegmentListByAssessmentId("different-parent-id");
        this.segmentService.loadReferenceData(segments2);
        final BlueprintElement blueprintElementToSave2 = DomainFactory.manufactureValidBlueprintElement("different-parent-id", segments2);
        final BlueprintElement savedBlueprintElement2 = this.blueprintElementService.saveBlueprintElement(null, blueprintElementToSave2);
        assertThat(savedBlueprintElement2, is(not(nullValue())));

        final Map<String, String[]> params = ImmutableMap.of(this.savedAssessment.getId(), new String[] { savedBlueprintElement.getAssessmentId() });
        final SearchResponse<BlueprintElement> searchResponse = this.blueprintElementService.searchBlueprintElements(params);
        assertThat(searchResponse.getReturnCount(), is(2));
        assertThat(searchResponse.getSearchResults().size(), is(2));
    }

    @Test
    public void saveBlueprintElementWithNullValuesTest() {
        final List<Segment> segments = this.segmentService.findSegmentListByAssessmentId(this.savedAssessment.getId());
        this.segmentService.loadReferenceData(segments);
        final BlueprintElement blueprintElement = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), segments);
        blueprintElement.getBlueprintElementValueMap().put("segment1", new BlueprintElementValue());

        try {
            this.blueprintElementService.saveBlueprintElement(blueprintElement.getId(), blueprintElement);
            fail("exception should be thrown for null min/max values");
        } catch (final ConstraintViolationException e) {
            assertThat(e.getConstraintViolations().size(), is(4));
        }
    }

    @Test
    public void saveBlueprintElementWithInvalidMinTest() {
        final List<Segment> segments = this.segmentService.findSegmentListByAssessmentId(this.savedAssessment.getId());
        this.segmentService.loadReferenceData(segments);
        final BlueprintElement blueprintElement = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), segments);
        blueprintElement.getBlueprintElementValueMap().put("segment1", new BlueprintElementValue(-5, 10, 10, 10));

        try {
            this.blueprintElementService.saveBlueprintElement(blueprintElement.getId(), blueprintElement);
            fail("exception should be thrown for min constraint value");
        } catch (final ConstraintViolationException e) {
            assertThat(e.getConstraintViolations().size(), is(1));
        }
    }

    @Test
    public void saveBlueprintElementWithInvalidMaxTest() {
        final List<Segment> segments = this.segmentService.findSegmentListByAssessmentId(this.savedAssessment.getId());
        this.segmentService.loadReferenceData(segments);
        final BlueprintElement blueprintElement = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), segments);
        blueprintElement.getBlueprintElementValueMap().put("segment1", new BlueprintElementValue(10, 1000, 10, 1000));

        try {
            this.blueprintElementService.saveBlueprintElement(blueprintElement.getId(), blueprintElement);
            fail("exception should be thrown for max constraint values");
        } catch (final ConstraintViolationException e) {
            assertThat(e.getConstraintViolations().size(), is(2));
        }
    }

    @Test
    public void saveBlueprintElementListWithNullInputWorks() {
        this.blueprintElementService.saveBlueprintElementList(null);
        assertThat(this.mongoTemplate.findAll(BlueprintElement.class).size(), is(0));
    }

    @Test
    public void saveBlueprintElementListWithEmptyInputWorks() {
        this.blueprintElementService.saveBlueprintElementList(new ArrayList<BlueprintElement>());
        assertThat(this.mongoTemplate.findAll(BlueprintElement.class).size(), is(0));
    }

    @Test
    public void saveBlueprintElementWithIsaParamWithDotKey() {
        // create BP algorithm
        final ItemSelectionAlgorithm algorithm = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.BLUEPRINT, ItemSelectionType.BOOLEAN);
        algorithm.setItemSelectionAlgorithmType(ItemSelectionAlgorithmType.ADAPTIVE);
        algorithm.getParameters().get(0).setParameterName("param.1.name");
        final ItemSelectionAlgorithm blueprintAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithm);
        this.saveNewSegment(blueprintAlgorithm, "bp-segment", 10);

        // create data
        final List<Segment> segments = this.segmentService.findSegmentListByAssessmentId(this.savedAssessment.getId());
        this.segmentService.loadReferenceData(segments);
        BlueprintElement blueprintElement = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), segments);
        blueprintElement.setActive(true);
        blueprintElement.getBlueprintElementValueMap().put("bp-segment", buildBlueprintElementValue(1, 10, 5, 20));
        blueprintElement.getBlueprintElementValueMap().put("segment2", buildBlueprintElementValue(2, 11, 6, 21));
        blueprintElement.getBlueprintElementValueMap().put("segment3", buildBlueprintElementValue(3, 12, 7, 22));
        blueprintElement.getBlueprintElementValueMap().put("segment4", buildBlueprintElementValue(4, 13, 8, 23));
        blueprintElement.getBlueprintElementValueMap().get("bp-segment").setItemSelectionParameters(ImmutableMap.of("param.1.name", "true"));

        // should allow save of map key with . in it
        blueprintElement = this.blueprintElementService.saveBlueprintElement(null, blueprintElement);
        assertThat(blueprintElement, is(notNullValue()));
    }

    @Test
    public void synchronizeWithCoreStandardsWithNoExistingBlueprintElementsBehavesAsExpected() {
        assertThat(this.blueprintElementService.getBlueprintElementsByAssessmentId(this.savedAssessment.getId()).size(), is(0));

        final CoreStandardPublicationPayloadElement coreStandard1 = PODAM_FACTORY.manufacturePojo(CoreStandardPublicationPayloadElement.class);
        coreStandard1.setFkGradeLevel(this.savedAssessment.getGrade()[0]);
        final CoreStandardPublicationPayloadElement coreStandard2 = PODAM_FACTORY.manufacturePojo(CoreStandardPublicationPayloadElement.class);
        coreStandard2.setFkGradeLevel(this.savedAssessment.getGrade()[0]);
        final CoreStandardPublicationPayloadElement coreStandard3 = PODAM_FACTORY.manufacturePojo(CoreStandardPublicationPayloadElement.class);
        coreStandard3.setFkGradeLevel(this.savedAssessment.getGrade()[0]);
        final CoreStandardPublicationResponse csResponse = new CoreStandardPublicationResponse();
        csResponse.setPayload(ImmutableList.of(coreStandard1, coreStandard2, coreStandard3));
        when(this.coreStandardsService.getCoreStandardsForPublication(this.savedAssessment.getPublication().getCoreStandardsPublicationKey())).thenReturn(csResponse);

        final int updateCount = this.blueprintElementService.synchronizeWithCoreStandards(this.savedAssessment.getId());
        verify(this.coreStandardsService).getCoreStandardsForPublication(this.savedAssessment.getPublication().getCoreStandardsPublicationKey());
        assertThat(updateCount, is(equalTo(3)));
    }

    @Test
    public void synchronizeWithCoreStandardsIgnoresBlueprintElementsWithEmptyGrades() {
        assertThat(this.blueprintElementService.getBlueprintElementsByAssessmentId(this.savedAssessment.getId()).size(), is(0));

        final CoreStandardPublicationPayloadElement coreStandard1 = PODAM_FACTORY.manufacturePojo(CoreStandardPublicationPayloadElement.class);
        coreStandard1.setFkGradeLevel(this.savedAssessment.getGrade()[0]);
        final CoreStandardPublicationPayloadElement coreStandard2 = PODAM_FACTORY.manufacturePojo(CoreStandardPublicationPayloadElement.class);
        coreStandard2.setFkGradeLevel(null);
        final CoreStandardPublicationPayloadElement coreStandard3 = PODAM_FACTORY.manufacturePojo(CoreStandardPublicationPayloadElement.class);
        coreStandard3.setFkGradeLevel("");
        final CoreStandardPublicationResponse csResponse = new CoreStandardPublicationResponse();
        csResponse.setPayload(ImmutableList.of(coreStandard1, coreStandard2, coreStandard3));
        when(this.coreStandardsService.getCoreStandardsForPublication(this.savedAssessment.getPublication().getCoreStandardsPublicationKey())).thenReturn(csResponse);

        final int updateCount = this.blueprintElementService.synchronizeWithCoreStandards(this.savedAssessment.getId());
        verify(this.coreStandardsService).getCoreStandardsForPublication(this.savedAssessment.getPublication().getCoreStandardsPublicationKey());
        assertThat(updateCount, is(equalTo(1)));
    }

    @Test
    public void synchronizeWithCoreStandardsWithExactMatchingBlueprintElementsBehavesAsExpected() {
        final BlueprintElement blueprintElement1 = buildBlueprintElement();
        final BlueprintElement blueprintElement2 = buildBlueprintElement();
        final BlueprintElement blueprintElement3 = buildBlueprintElement();
        assertThat(this.blueprintElementService.saveBlueprintElementList(ImmutableList.of(blueprintElement1, blueprintElement2, blueprintElement3)).size(), is(3));
        assertThat(this.blueprintElementService.getBlueprintElementsByAssessmentId(this.savedAssessment.getId()).size(), is(3));

        final CoreStandardPublicationPayloadElement coreStandard1 = buildCoreStandardPublicationPayloadElementFromBlueprintElement(blueprintElement1);
        final CoreStandardPublicationPayloadElement coreStandard2 = buildCoreStandardPublicationPayloadElementFromBlueprintElement(blueprintElement2);
        final CoreStandardPublicationPayloadElement coreStandard3 = buildCoreStandardPublicationPayloadElementFromBlueprintElement(blueprintElement3);
        final CoreStandardPublicationResponse csResponse = new CoreStandardPublicationResponse();
        csResponse.setPayload(ImmutableList.of(coreStandard1, coreStandard2, coreStandard3));
        when(this.coreStandardsService.getCoreStandardsForPublication(this.savedAssessment.getPublication().getCoreStandardsPublicationKey())).thenReturn(csResponse);

        final int updateCount = this.blueprintElementService.synchronizeWithCoreStandards(this.savedAssessment.getId());
        verify(this.coreStandardsService).getCoreStandardsForPublication(this.savedAssessment.getPublication().getCoreStandardsPublicationKey());
        assertThat(updateCount, is(equalTo(0)));
    }

    @Test
    public void synchronizeWithCoreStandardsWithResultingAddAndDeleteBehavesAsExpected() {
        final BlueprintElement blueprintElement1 = buildBlueprintElement();
        final BlueprintElement blueprintElement2 = buildBlueprintElement();
        final BlueprintElement blueprintElement3 = buildBlueprintElement();
        assertThat(this.blueprintElementService.saveBlueprintElementList(ImmutableList.of(blueprintElement1, blueprintElement2, blueprintElement3)).size(), is(3));
        assertThat(this.blueprintElementService.getBlueprintElementsByAssessmentId(this.savedAssessment.getId()).size(), is(3));

        final CoreStandardPublicationPayloadElement coreStandard1 = buildCoreStandardPublicationPayloadElementFromBlueprintElement(blueprintElement1);
        final CoreStandardPublicationPayloadElement coreStandard2 = buildCoreStandardPublicationPayloadElementFromBlueprintElement(blueprintElement2);
        final CoreStandardPublicationPayloadElement coreStandard3 = PODAM_FACTORY.manufacturePojo(CoreStandardPublicationPayloadElement.class);
        coreStandard3.setFkGradeLevel(this.savedAssessment.getGrade()[0]);
        final CoreStandardPublicationResponse csResponse = new CoreStandardPublicationResponse();
        csResponse.setPayload(ImmutableList.of(coreStandard1, coreStandard2, coreStandard3));
        when(this.coreStandardsService.getCoreStandardsForPublication(this.savedAssessment.getPublication().getCoreStandardsPublicationKey())).thenReturn(csResponse);

        final int updateCount = this.blueprintElementService.synchronizeWithCoreStandards(this.savedAssessment.getId());
        verify(this.coreStandardsService).getCoreStandardsForPublication(this.savedAssessment.getPublication().getCoreStandardsPublicationKey());
        assertThat(updateCount, is(equalTo(2)));
    }

    @Test
    public void synchronizeWithCoreStandardsWithResultingAddUpdateAndDeleteBehavesAsExpected() {
        final BlueprintElement blueprintElement1 = buildBlueprintElement();
        final BlueprintElement blueprintElement2 = buildBlueprintElement();
        final BlueprintElement blueprintElement3 = buildBlueprintElement();
        assertThat(this.blueprintElementService.saveBlueprintElementList(ImmutableList.of(blueprintElement1, blueprintElement2, blueprintElement3)).size(), is(3));
        assertThat(this.blueprintElementService.getBlueprintElementsByAssessmentId(this.savedAssessment.getId()).size(), is(3));

        final CoreStandardPublicationPayloadElement coreStandard1 = buildCoreStandardPublicationPayloadElementFromBlueprintElement(blueprintElement1);
        final CoreStandardPublicationPayloadElement coreStandard2 = buildCoreStandardPublicationPayloadElementFromBlueprintElement(blueprintElement2);
        coreStandard2.setDescription("snazzy-new-description");
        final CoreStandardPublicationPayloadElement coreStandard3 = PODAM_FACTORY.manufacturePojo(CoreStandardPublicationPayloadElement.class);
        coreStandard3.setFkGradeLevel(this.savedAssessment.getGrade()[0]);
        final CoreStandardPublicationResponse csResponse = new CoreStandardPublicationResponse();
        csResponse.setPayload(ImmutableList.of(coreStandard1, coreStandard2, coreStandard3));
        when(this.coreStandardsService.getCoreStandardsForPublication(this.savedAssessment.getPublication().getCoreStandardsPublicationKey())).thenReturn(csResponse);

        final int updateCount = this.blueprintElementService.synchronizeWithCoreStandards(this.savedAssessment.getId());
        verify(this.coreStandardsService).getCoreStandardsForPublication(this.savedAssessment.getPublication().getCoreStandardsPublicationKey());
        assertThat(updateCount, is(equalTo(3)));
    }

    @Test
    public void synchronizeWithCoreStandardsWithPartialKeyUpdateBehavesAsExpected() {
        final BlueprintElement blueprintElement1 = buildBlueprintElement();
        final BlueprintElement blueprintElement2 = buildBlueprintElement();
        final BlueprintElement blueprintElement3 = buildBlueprintElement();
        assertThat(this.blueprintElementService.saveBlueprintElementList(ImmutableList.of(blueprintElement1, blueprintElement2, blueprintElement3)).size(), is(3));
        assertThat(this.blueprintElementService.getBlueprintElementsByAssessmentId(this.savedAssessment.getId()).size(), is(3));

        final CoreStandardPublicationPayloadElement coreStandard1 = buildCoreStandardPublicationPayloadElementFromBlueprintElement(blueprintElement1);
        final CoreStandardPublicationPayloadElement coreStandard2 = buildCoreStandardPublicationPayloadElementFromBlueprintElement(blueprintElement2);
        coreStandard2.setFkGradeLevel(this.savedAssessment.getGrade()[1]);
        final CoreStandardPublicationPayloadElement coreStandard3 = buildCoreStandardPublicationPayloadElementFromBlueprintElement(blueprintElement3);
        final CoreStandardPublicationResponse csResponse = new CoreStandardPublicationResponse();
        csResponse.setPayload(ImmutableList.of(coreStandard1, coreStandard2, coreStandard3));
        when(this.coreStandardsService.getCoreStandardsForPublication(this.savedAssessment.getPublication().getCoreStandardsPublicationKey())).thenReturn(csResponse);

        final int updateCount = this.blueprintElementService.synchronizeWithCoreStandards(this.savedAssessment.getId());
        verify(this.coreStandardsService).getCoreStandardsForPublication(this.savedAssessment.getPublication().getCoreStandardsPublicationKey());
        assertThat(updateCount, is(equalTo(2)));
    }

    @Test
    public void synchronizeWithCoreStandardsLockedAssessmentTest() {
        final BlueprintElement blueprintElement1 = buildBlueprintElement();
        final BlueprintElement blueprintElement2 = buildBlueprintElement();
        final BlueprintElement blueprintElement3 = buildBlueprintElement();
        assertThat(this.blueprintElementService.saveBlueprintElementList(ImmutableList.of(blueprintElement1, blueprintElement2, blueprintElement3)).size(), is(3));
        assertThat(this.blueprintElementService.getBlueprintElementsByAssessmentId(this.savedAssessment.getId()).size(), is(3));

        final Assessment retrievedAssessment = this.assessmentRepository.findOne(this.savedAssessment.getId());
        retrievedAssessment.setLocked(true);
        final Assessment reSavedAssessment = this.assessmentRepository.save(retrievedAssessment);
        assertThat(reSavedAssessment.isLocked(), is(true));

        final CoreStandardPublicationPayloadElement coreStandard1 = buildCoreStandardPublicationPayloadElementFromBlueprintElement(blueprintElement1);
        final CoreStandardPublicationPayloadElement coreStandard2 = buildCoreStandardPublicationPayloadElementFromBlueprintElement(blueprintElement2);
        coreStandard2.setFkGradeLevel(this.savedAssessment.getGrade()[1]);
        final CoreStandardPublicationPayloadElement coreStandard3 = buildCoreStandardPublicationPayloadElementFromBlueprintElement(blueprintElement3);
        final CoreStandardPublicationResponse csResponse = new CoreStandardPublicationResponse();
        csResponse.setPayload(ImmutableList.of(coreStandard1, coreStandard2, coreStandard3));
        when(this.coreStandardsService.getCoreStandardsForPublication(this.savedAssessment.getPublication().getCoreStandardsPublicationKey())).thenReturn(csResponse);

        try {
            this.blueprintElementService.synchronizeWithCoreStandards(this.savedAssessment.getId());
            fail("exception should be thrown when trying to save blueprintElement data for an already locked assessment");
        } catch (final LocalizedException e) {
            assertThat(e.getMessage(), is("cannot.be.altered.assessment.locked"));
        }
    }

    @Test
    public void verifyThatActiveGetsSetCorrectlyDuringSynchronizeWithCoreStandards() {
        final BlueprintElement blueprintElement1 = buildBlueprintElement();
        final BlueprintElement blueprintElement2 = buildBlueprintElement();
        final BlueprintElement blueprintElement3 = buildBlueprintElement();
        assertThat(this.blueprintElementService.saveBlueprintElementList(ImmutableList.of(blueprintElement1, blueprintElement2, blueprintElement3)).size(), is(3));
        assertThat(this.blueprintElementService.getBlueprintElementsByAssessmentId(this.savedAssessment.getId()).size(), is(3));

        final CoreStandardPublicationPayloadElement coreStandard1 = buildCoreStandardPublicationPayloadElementFromBlueprintElement(blueprintElement1);
        final CoreStandardPublicationPayloadElement coreStandard2 = buildCoreStandardPublicationPayloadElementFromBlueprintElement(blueprintElement2);
        final CoreStandardPublicationPayloadElement coreStandard3 = buildCoreStandardPublicationPayloadElementFromBlueprintElement(blueprintElement3);
        final CoreStandardPublicationPayloadElement coreStandard4 = PODAM_FACTORY.manufacturePojo(CoreStandardPublicationPayloadElement.class);
        coreStandard4.setFkGradeLevel(blueprintElement1.getGrade());
        final CoreStandardPublicationPayloadElement coreStandard5 = PODAM_FACTORY.manufacturePojo(CoreStandardPublicationPayloadElement.class);
        coreStandard5.setFkGradeLevel(blueprintElement2.getGrade());
        final CoreStandardPublicationPayloadElement coreStandard6 = PODAM_FACTORY.manufacturePojo(CoreStandardPublicationPayloadElement.class);
        final CoreStandardPublicationResponse csResponse = new CoreStandardPublicationResponse();
        csResponse.setPayload(ImmutableList.of(coreStandard1, coreStandard2, coreStandard3, coreStandard4, coreStandard5, coreStandard6));
        when(this.coreStandardsService.getCoreStandardsForPublication(this.savedAssessment.getPublication().getCoreStandardsPublicationKey())).thenReturn(csResponse);

        final int updateCount = this.blueprintElementService.synchronizeWithCoreStandards(this.savedAssessment.getId());
        verify(this.coreStandardsService).getCoreStandardsForPublication(this.savedAssessment.getPublication().getCoreStandardsPublicationKey());
        assertThat(updateCount, is(equalTo(2)));
        final List<BlueprintElement> savedBlueprintElementList = this.blueprintElementService.getBlueprintElementsByAssessmentId(this.savedAssessment.getId());
        assertThat(findMatchingBlueprintElement(coreStandard4.getKey(), coreStandard4.getFkGradeLevel(), savedBlueprintElementList).isActive(), is(equalTo(true)));
        assertThat(findMatchingBlueprintElement(coreStandard5.getKey(), coreStandard5.getFkGradeLevel(), savedBlueprintElementList).isActive(), is(equalTo(true)));
        assertThat(findMatchingBlueprintElement(coreStandard6.getKey(), coreStandard6.getFkGradeLevel(), savedBlueprintElementList).isActive(), is(equalTo(false)));

        // verify blueprintElement gets its internal segment map set up correctly
        assertThat(findMatchingBlueprintElement(coreStandard4.getKey(), coreStandard4.getFkGradeLevel(), savedBlueprintElementList).getBlueprintElementValueMap().size(), is(equalTo(9)));
        assertThat(findMatchingBlueprintElement(coreStandard4.getKey(), coreStandard4.getFkGradeLevel(), savedBlueprintElementList).getMasterValue(), is(notNullValue()));
    }

    @Test
    public void verifySegmentAddNoCloning() {
        final BlueprintElement blueprintElement1 = buildBlueprintElement();
        final BlueprintElement blueprintElement2 = buildBlueprintElement();
        final BlueprintElement blueprintElement3 = buildBlueprintElement();
        assertThat(this.blueprintElementService.saveBlueprintElementList(ImmutableList.of(blueprintElement1, blueprintElement2, blueprintElement3)).size(), is(3));
        assertThat(this.blueprintElementService.getBlueprintElementsByAssessmentId(this.savedAssessment.getId()).size(), is(3));
        final SearchResponse<Segment> segmentSearchResponse = this.segmentService.searchSegments(ImmutableMap.of("assessmentId", new String[] { this.savedAssessment.getId() }));
        final String segmentId = segmentSearchResponse.getSearchResults().get(0).getId();
        final List<BlueprintElement> blueprintElementList = this.blueprintElementService.addBlueprintElementValueGroup(this.savedAssessment.getId(), segmentId, null);
        // verify blueprintElement got the addition
        assertThat(blueprintElementList.get(0).getBlueprintElementValueMap().get(segmentId), is(notNullValue()));
    }

    @Test
    public void verifySegmentAddWithCloning() {
        final SearchResponse<Segment> segmentSearchResponse = this.segmentService.searchSegments(ImmutableMap.of("assessmentId", new String[] { this.savedAssessment.getId() }));
        final Segment firstSegment = segmentSearchResponse.getSearchResults().get(0);

        final Segment segmentToSave = this.segmentService.searchSegments(TestAuthUtil.searchParamsByAssessmentIdSmall(this.savedAssessment.getId())).getSearchResults().get(0);
        segmentToSave.setItemPoolId(firstSegment.getItemPoolId());
        final Segment savedSegment = this.segmentService.updateSegment(segmentToSave);

        final BlueprintElement blueprintElement1 = buildBlueprintElement();
        final BlueprintElement blueprintElement2 = buildBlueprintElement();
        final BlueprintElement blueprintElement3 = buildBlueprintElement();
        assertThat(this.blueprintElementService.saveBlueprintElementList(ImmutableList.of(blueprintElement1, blueprintElement2, blueprintElement3)).size(), is(3));
        assertThat(this.blueprintElementService.getBlueprintElementsByAssessmentId(this.savedAssessment.getId()).size(), is(3));
        final List<BlueprintElement> blueprintElementList = this.blueprintElementService.addBlueprintElementValueGroup(this.savedAssessment.getId(), firstSegment.getId(), null);
        // verify blueprintElement got the addition
        assertThat(blueprintElementList.get(0).getBlueprintElementValueMap().get(firstSegment.getId()), is(notNullValue()));
        final BlueprintElement savedBlueprintElement = blueprintElementList.get(0);
        savedBlueprintElement.getBlueprintElementValueMap().put(firstSegment.getId(), new BlueprintElementValue(8, 9, 8, 9));
        this.blueprintElementService.saveBlueprintElement(savedBlueprintElement.getId(), savedBlueprintElement);

        final List<BlueprintElement> updatedBlueprintElementList = this.blueprintElementService.addBlueprintElementValueGroup(this.savedAssessment.getId(), savedSegment.getId(), firstSegment.getId());
        // verify blueprintElement got the addition and matches the one it cloned
        assertThat(updatedBlueprintElementList.get(0).getBlueprintElementValueMap().get(firstSegment.getId()),
                is(updatedBlueprintElementList.get(0).getBlueprintElementValueMap().get(savedSegment.getId())));
    }

    @Test
    public void addBlueprintElementValueGroupLockedAssessmentTest() {
        final BlueprintElement blueprintElement1 = buildBlueprintElement();
        final BlueprintElement blueprintElement2 = buildBlueprintElement();
        final BlueprintElement blueprintElement3 = buildBlueprintElement();
        assertThat(this.blueprintElementService.saveBlueprintElementList(ImmutableList.of(blueprintElement1, blueprintElement2, blueprintElement3)).size(), is(3));
        assertThat(this.blueprintElementService.getBlueprintElementsByAssessmentId(this.savedAssessment.getId()).size(), is(3));
        final SearchResponse<Segment> segmentSearchResponse = this.segmentService.searchSegments(ImmutableMap.of("assessmentId", new String[] { this.savedAssessment.getId() }));
        final String segmentId = segmentSearchResponse.getSearchResults().get(0).getId();

        final Assessment retrievedAssessment = this.assessmentRepository.findOne(this.savedAssessment.getId());
        retrievedAssessment.setLocked(true);
        final Assessment reSavedAssessment = this.assessmentRepository.save(retrievedAssessment);
        assertThat(reSavedAssessment.isLocked(), is(true));

        try {
            this.blueprintElementService.addBlueprintElementValueGroup(this.savedAssessment.getId(), segmentId, null);
            fail("exception should be thrown when trying to save blueprintElement data for an already locked assessment");
        } catch (final LocalizedException e) {
            assertThat(e.getMessage(), is("cannot.be.altered.assessment.locked"));
        }
    }

    @Test
    public void verifySegmentRemove() {
        final BlueprintElement blueprintElement1 = buildBlueprintElement();
        final BlueprintElement blueprintElement2 = buildBlueprintElement();
        final BlueprintElement blueprintElement3 = buildBlueprintElement();
        assertThat(this.blueprintElementService.saveBlueprintElementList(ImmutableList.of(blueprintElement1, blueprintElement2, blueprintElement3)).size(), is(3));
        assertThat(this.blueprintElementService.getBlueprintElementsByAssessmentId(this.savedAssessment.getId()).size(), is(3));
        final SearchResponse<Segment> segmentSearchResponse = this.segmentService.searchSegments(ImmutableMap.of("assessmentId", new String[] { this.savedAssessment.getId() }));
        final String segmentId = segmentSearchResponse.getSearchResults().get(0).getId();
        final List<BlueprintElement> blueprintElementList = this.blueprintElementService.addBlueprintElementValueGroup(this.savedAssessment.getId(), segmentId, null);
        // verify blueprintElement got the addition
        assertThat(blueprintElementList.get(0).getBlueprintElementValueMap().get(segmentId), is(notNullValue()));
        final List<BlueprintElement> updatedBlueprintElementList = this.blueprintElementService.removeBlueprintElementValueGroup(this.savedAssessment.getId(), segmentId);
        // verify blueprintElement no longer has the previous addition
        assertThat(updatedBlueprintElementList.get(0).getBlueprintElementValueMap().get(segmentId), is(nullValue()));
    }

    @Test
    public void removeBlueprintElementValueGroupLockedAssessmentTest() {
        final BlueprintElement blueprintElement1 = buildBlueprintElement();
        final BlueprintElement blueprintElement2 = buildBlueprintElement();
        final BlueprintElement blueprintElement3 = buildBlueprintElement();
        assertThat(this.blueprintElementService.saveBlueprintElementList(ImmutableList.of(blueprintElement1, blueprintElement2, blueprintElement3)).size(), is(3));
        assertThat(this.blueprintElementService.getBlueprintElementsByAssessmentId(this.savedAssessment.getId()).size(), is(3));
        final SearchResponse<Segment> segmentSearchResponse = this.segmentService.searchSegments(ImmutableMap.of("assessmentId", new String[] { this.savedAssessment.getId() }));
        final String segmentId = segmentSearchResponse.getSearchResults().get(0).getId();
        final List<BlueprintElement> blueprintElementList = this.blueprintElementService.addBlueprintElementValueGroup(this.savedAssessment.getId(), segmentId, null);
        // verify blueprintElement got the addition
        assertThat(blueprintElementList.get(0).getBlueprintElementValueMap().get(segmentId), is(notNullValue()));

        final Assessment retrievedAssessment = this.assessmentRepository.findOne(this.savedAssessment.getId());
        retrievedAssessment.setLocked(true);
        final Assessment reSavedAssessment = this.assessmentRepository.save(retrievedAssessment);
        assertThat(reSavedAssessment.isLocked(), is(true));

        try {
            this.blueprintElementService.removeBlueprintElementValueGroup(this.savedAssessment.getId(), segmentId);
            fail("exception should be thrown when trying to save blueprintElement data for an already locked assessment");
        } catch (final LocalizedException e) {
            assertThat(e.getMessage(), is("cannot.be.altered.assessment.locked"));
        }
    }

    private BlueprintElement buildBlueprintElement() {
        final BlueprintElement blueprintElement = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), getSegmentListForAssessment(this.savedAssessment.getId()));
        blueprintElement.setGrade(this.savedAssessment.getGrade()[0]);
        return blueprintElement;
    }

    private CoreStandardPublicationPayloadElement buildCoreStandardPublicationPayloadElementFromBlueprintElement(final BlueprintElement blueprintElement) {
        final CoreStandardPublicationPayloadElement coreStandardPublicationPayloadElement = PODAM_FACTORY.manufacturePojo(CoreStandardPublicationPayloadElement.class);
        coreStandardPublicationPayloadElement.setKey(blueprintElement.getStandardKey());
        coreStandardPublicationPayloadElement.setTreeLevel(blueprintElement.getLevel());
        coreStandardPublicationPayloadElement.setFkGradeLevel(blueprintElement.getGrade());
        coreStandardPublicationPayloadElement.setDescription(blueprintElement.getTextDescription());
        return coreStandardPublicationPayloadElement;
    }

    private BlueprintElement findMatchingBlueprintElement(final String standardKey, final String grade, final List<BlueprintElement> blueprintElementList) {
        for (final BlueprintElement blueprintElement : blueprintElementList) {
            if (blueprintElement.getStandardKey().equals(standardKey)
                    && Arrays.asList(blueprintElement.getGrade()).containsAll(Arrays.asList(org.springframework.util.StringUtils.commaDelimitedListToStringArray(grade)))) {
                return blueprintElement;
            }
        }

        return new BlueprintElement();
    }

    @Test
    public void activateBlueprintElementGradesWith1MatchingGradeTest() {
        // create data
        final List<BlueprintElement> data = buildBlueprintElementDataForActivateGradeTest();

        // execute tests
        this.blueprintElementService.activateBlueprintElementGrades(this.savedAssessment.getId(), new String[] { "1" }, true);
        final List<BlueprintElement> allBpElements = this.mongoTemplate.findAll(BlueprintElement.class);
        assertThat(findMatchingBlueprintElement(data.get(0).getStandardKey(), data.get(0).getGrade(), allBpElements).isActive(), is(true));
        assertThat(findMatchingBlueprintElement(data.get(1).getStandardKey(), data.get(1).getGrade(), allBpElements).isActive(), is(true));
        assertThat(findMatchingBlueprintElement(data.get(2).getStandardKey(), data.get(2).getGrade(), allBpElements).isActive(), is(false));
        assertThat(findMatchingBlueprintElement(data.get(3).getStandardKey(), data.get(3).getGrade(), allBpElements).isActive(), is(false));
    }

    @Test
    public void activateBlueprintElementGradesWith1MatchingGradeTest2() {
        // create data
        final List<BlueprintElement> data = buildBlueprintElementDataForActivateGradeTest();

        // execute tests
        this.blueprintElementService.activateBlueprintElementGrades(this.savedAssessment.getId(), new String[] { "2" }, true);
        final List<BlueprintElement> allBpElements = this.mongoTemplate.findAll(BlueprintElement.class);
        assertThat(findMatchingBlueprintElement(data.get(0).getStandardKey(), data.get(0).getGrade(), allBpElements).isActive(), is(false));
        assertThat(findMatchingBlueprintElement(data.get(1).getStandardKey(), data.get(1).getGrade(), allBpElements).isActive(), is(false));
        assertThat(findMatchingBlueprintElement(data.get(2).getStandardKey(), data.get(2).getGrade(), allBpElements).isActive(), is(true));
        assertThat(findMatchingBlueprintElement(data.get(3).getStandardKey(), data.get(3).getGrade(), allBpElements).isActive(), is(false));
    }

    @Test
    public void activateBlueprintElementGradesWithNoMatchingGradesTest() {
        // create data
        final List<BlueprintElement> data = buildBlueprintElementDataForActivateGradeTest();

        // execute tests
        this.blueprintElementService.activateBlueprintElementGrades(this.savedAssessment.getId(), new String[] { "3" }, true);
        final List<BlueprintElement> allBpElements = this.mongoTemplate.findAll(BlueprintElement.class);
        assertThat(findMatchingBlueprintElement(data.get(0).getStandardKey(), data.get(0).getGrade(), allBpElements).isActive(), is(false));
        assertThat(findMatchingBlueprintElement(data.get(1).getStandardKey(), data.get(1).getGrade(), allBpElements).isActive(), is(false));
        assertThat(findMatchingBlueprintElement(data.get(2).getStandardKey(), data.get(2).getGrade(), allBpElements).isActive(), is(false));
        assertThat(findMatchingBlueprintElement(data.get(3).getStandardKey(), data.get(3).getGrade(), allBpElements).isActive(), is(false));
    }

    @Test
    public void activateBlueprintElementGradesWithMultipleGradesTest() {
        // create data
        final List<BlueprintElement> data = buildBlueprintElementDataForActivateGradeTest();

        // execute tests
        this.blueprintElementService.activateBlueprintElementGrades(this.savedAssessment.getId(), new String[] { "1", "2", "3" }, true);
        final List<BlueprintElement> allBpElements = this.mongoTemplate.findAll(BlueprintElement.class);
        assertThat(findMatchingBlueprintElement(data.get(0).getStandardKey(), data.get(0).getGrade(), allBpElements).isActive(), is(true));
        assertThat(findMatchingBlueprintElement(data.get(1).getStandardKey(), data.get(1).getGrade(), allBpElements).isActive(), is(true));
        assertThat(findMatchingBlueprintElement(data.get(2).getStandardKey(), data.get(2).getGrade(), allBpElements).isActive(), is(true));
        assertThat(findMatchingBlueprintElement(data.get(3).getStandardKey(), data.get(3).getGrade(), allBpElements).isActive(), is(false));
    }

    @Test
    public void activateBlueprintElementGradesWithMultipleGradesTest2() {
        // create data
        final List<BlueprintElement> data = buildBlueprintElementDataForActivateGradeTest();

        // execute tests
        this.blueprintElementService.activateBlueprintElementGrades(this.savedAssessment2.getId(), new String[] { "1", "2", "3" }, true);
        final List<BlueprintElement> allBpElements = this.mongoTemplate.findAll(BlueprintElement.class);
        assertThat(findMatchingBlueprintElement(data.get(0).getStandardKey(), data.get(0).getGrade(), allBpElements).isActive(), is(false));
        assertThat(findMatchingBlueprintElement(data.get(1).getStandardKey(), data.get(1).getGrade(), allBpElements).isActive(), is(false));
        assertThat(findMatchingBlueprintElement(data.get(2).getStandardKey(), data.get(2).getGrade(), allBpElements).isActive(), is(false));
        assertThat(findMatchingBlueprintElement(data.get(3).getStandardKey(), data.get(3).getGrade(), allBpElements).isActive(), is(true));
    }

    @Test
    public void activateBlueprintElementGradesLockedAssessmentTest() {
        buildBlueprintElementDataForActivateGradeTest();

        final Assessment retrievedAssessment = this.assessmentRepository.findOne(this.savedAssessment.getId());
        retrievedAssessment.setLocked(true);
        final Assessment reSavedAssessment = this.assessmentRepository.save(retrievedAssessment);
        assertThat(reSavedAssessment.isLocked(), is(true));

        try {
            this.blueprintElementService.activateBlueprintElementGrades(this.savedAssessment.getId(), new String[] { "1", "2", "3" }, true);
            fail("exception should be thrown when trying to save blueprintElement data for an already locked assessment");
        } catch (final LocalizedException e) {
            assertThat(e.getMessage(), is("cannot.be.altered.assessment.locked"));
        }
    }

    @Test
    public void activateBlueprintElementGradesWithFalseBooleanTest() {
        // create data
        final List<BlueprintElement> data = buildBlueprintElementDataForActivateGradeTest();

        // execute tests
        this.blueprintElementService.activateBlueprintElementGrades(this.savedAssessment.getId(), new String[] { "1", "2", "3" }, true);
        List<BlueprintElement> allBpElements = this.mongoTemplate.findAll(BlueprintElement.class);
        assertThat(findMatchingBlueprintElement(data.get(0).getStandardKey(), data.get(0).getGrade(), allBpElements).isActive(), is(true));
        assertThat(findMatchingBlueprintElement(data.get(1).getStandardKey(), data.get(1).getGrade(), allBpElements).isActive(), is(true));
        assertThat(findMatchingBlueprintElement(data.get(2).getStandardKey(), data.get(2).getGrade(), allBpElements).isActive(), is(true));
        assertThat(findMatchingBlueprintElement(data.get(3).getStandardKey(), data.get(3).getGrade(), allBpElements).isActive(), is(false));

        this.blueprintElementService.activateBlueprintElementGrades(this.savedAssessment.getId(), new String[] { "1", "2", "3" }, false);
        allBpElements = this.mongoTemplate.findAll(BlueprintElement.class);
        assertThat(findMatchingBlueprintElement(data.get(0).getStandardKey(), data.get(0).getGrade(), allBpElements).isActive(), is(false));
        assertThat(findMatchingBlueprintElement(data.get(1).getStandardKey(), data.get(1).getGrade(), allBpElements).isActive(), is(false));
        assertThat(findMatchingBlueprintElement(data.get(2).getStandardKey(), data.get(2).getGrade(), allBpElements).isActive(), is(false));
        assertThat(findMatchingBlueprintElement(data.get(3).getStandardKey(), data.get(3).getGrade(), allBpElements).isActive(), is(false));
    }

    @Test
    public void activateBlueprintElementGradesWithFalseBooleanCleansUpScoringRulePerformanceLevelTest() {
        // create data
        final List<BlueprintElement> data = buildBlueprintElementDataForActivateGradeTest();

        // execute tests
        this.blueprintElementService.activateBlueprintElementGrades(this.savedAssessment.getId(), new String[] { "1", "2", "3" }, true);
        List<BlueprintElement> allBpElements = this.mongoTemplate.findAll(BlueprintElement.class);
        assertThat(findMatchingBlueprintElement(data.get(0).getStandardKey(), data.get(0).getGrade(), allBpElements).isActive(), is(true));
        assertThat(findMatchingBlueprintElement(data.get(1).getStandardKey(), data.get(1).getGrade(), allBpElements).isActive(), is(true));
        assertThat(findMatchingBlueprintElement(data.get(2).getStandardKey(), data.get(2).getGrade(), allBpElements).isActive(), is(true));
        assertThat(findMatchingBlueprintElement(data.get(3).getStandardKey(), data.get(3).getGrade(), allBpElements).isActive(), is(false));
        final ComputationRule computationRule = PODAM_FACTORY.manufacturePojo(ComputationRule.class);
        computationRule.setId(null);
        computationRule.setConversionTableType(ConversionTableType.NONE);
        computationRule.getParameters().clear();
        computationRule.setVersion("1.0");
        final ComputationRule savedComputationRule = this.computationRuleService.createComputationRule(computationRule);
        final ScoringRule scoringRule = new ScoringRule();
        scoringRule.setAssessmentId(this.savedAssessment.getId());
        scoringRule.setComputationRuleId(savedComputationRule.getId());
        scoringRule.setBlueprintReferenceType(BlueprintReferenceType.STANDARD);
        scoringRule.setBlueprintDenotationType(BlueprintDenotationType.LEAF_NODES);
        scoringRule.setOrder(1);
        scoringRule.setLabel("sco-leaf");
        final ScoringRule savedScoringRule = this.scoringRuleService.saveScoringRule(null, scoringRule);
        final PerformanceLevel performanceLevelToSave = DomainFactory.manufactureValidPerformanceLevel(this.savedAssessment.getId());
        final BlueprintElement bpElement = findMatchingBlueprintElement(data.get(0).getStandardKey(), data.get(0).getGrade(), allBpElements);
        performanceLevelToSave.setBlueprintReferenceId(bpElement.getId());
        performanceLevelToSave.setBlueprintReferenceType(BlueprintReferenceType.STANDARD);
        final PerformanceLevel savedPerformanceLevel = this.performanceLevelService.savePerformanceLevel(null, performanceLevelToSave);

        this.blueprintElementService.activateBlueprintElementGrades(this.savedAssessment.getId(), new String[] { "1", "2", "3" }, false);
        allBpElements = this.mongoTemplate.findAll(BlueprintElement.class);
        assertThat(findMatchingBlueprintElement(data.get(0).getStandardKey(), data.get(0).getGrade(), allBpElements).isActive(), is(false));
        assertThat(findMatchingBlueprintElement(data.get(1).getStandardKey(), data.get(1).getGrade(), allBpElements).isActive(), is(false));
        assertThat(findMatchingBlueprintElement(data.get(2).getStandardKey(), data.get(2).getGrade(), allBpElements).isActive(), is(false));
        assertThat(findMatchingBlueprintElement(data.get(3).getStandardKey(), data.get(3).getGrade(), allBpElements).isActive(), is(false));
        assertThat(this.scoringRuleService.getScoringRule(savedScoringRule.getId()), nullValue());
        assertThat(this.performanceLevelService.getPerformanceLevel(savedPerformanceLevel.getId()), nullValue());
    }

    /**
     * Create test data for activate grade test. Data will be a list of blueprint elements as shown below: <br/>
     * <ul>
     * <li>data[0] = { assessmentId: 'assessment-id', grade: '1', active: false }</li>
     * <li>data[1] = { assessmentId: 'assessment-id', grade: '1', active: false }</li>
     * <li>data[2] = { assessmentId: 'assessment-id', grade: '2', active: false }</li>
     * <li>data[3] = { assessmentId: 'assessment-id2', grade: '2', active: false }</li>
     * </ul>
     * 
     * @return data - list of blueprint elements that have been saved to the database
     */
    private List<BlueprintElement> buildBlueprintElementDataForActivateGradeTest() {
        final BlueprintElement savedBpElement = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), getSegmentListForAssessment(this.savedAssessment.getId()));
        final BlueprintElement savedBpElement2 = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), getSegmentListForAssessment(this.savedAssessment.getId()));
        final BlueprintElement savedBpElement3 = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), getSegmentListForAssessment(this.savedAssessment.getId()));
        final BlueprintElement savedBpElement4 = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment2.getId(), getSegmentListForAssessment(this.savedAssessment2.getId()));

        savedBpElement.setGrade("1");
        savedBpElement.setActive(false);

        savedBpElement2.setGrade("1");
        savedBpElement2.setActive(false);

        savedBpElement3.setGrade("2");
        savedBpElement3.setActive(false);

        savedBpElement4.setGrade("2");
        savedBpElement4.setActive(false);

        final List<BlueprintElement> data = ImmutableList.of(savedBpElement, savedBpElement2, savedBpElement3, savedBpElement4);
        return this.blueprintElementService.saveBlueprintElementList(data);
    }

    @Test
    public void validateBlueprintTestWithNoErrors() {
        // create data
        final BlueprintElement blueprintElement = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), getSegmentListForAssessment(this.savedAssessment.getId()));
        blueprintElement.getBlueprintElementValueMap().clear();
        blueprintElement.getBlueprintElementValueMap().put("segment1", buildBlueprintElementValue(1, 10, 1, 10));
        blueprintElement.getBlueprintElementValueMap().put("segment2", buildBlueprintElementValue(1, 10, 1, 10));
        blueprintElement.getBlueprintElementValueMap().put("segment3", buildBlueprintElementValue(1, 10, 1, 10));
        blueprintElement.getBlueprintElementValueMap().put("segment4", buildBlueprintElementValue(1, 10, 1, 10));

        final BlueprintElement blueprintElement2 = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), getSegmentListForAssessment(this.savedAssessment.getId()));
        blueprintElement2.getBlueprintElementValueMap().clear();
        blueprintElement2.getBlueprintElementValueMap().put("segment1", buildBlueprintElementValue(1, 10, 1, 10));
        blueprintElement2.getBlueprintElementValueMap().put("segment2", buildBlueprintElementValue(1, 10, 1, 10));

        final BlueprintElement blueprintElement3 = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), getSegmentListForAssessment(this.savedAssessment.getId()));
        blueprintElement3.getBlueprintElementValueMap().clear();
        blueprintElement3.getBlueprintElementValueMap().put("segment1", buildBlueprintElementValue(1, 10, 1, 10));
        blueprintElement3.getBlueprintElementValueMap().put("segment2", buildBlueprintElementValue(1, 10, 1, 10));

        this.blueprintElementService.saveBlueprintElementList(Lists.newArrayList(blueprintElement, blueprintElement2, blueprintElement3));

        // execute tests
        final List<ValidationResult<BlueprintElement>> errors = this.blueprintElementService.validateBlueprint(this.savedAssessment.getId());
        assertThat(errors.size(), is(0));
    }

    @Test
    public void validateBlueprintTestWithVariousErrors() {
        // create data
        final BlueprintElement blueprintElement = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), getSegmentListForAssessment(this.savedAssessment.getId()));
        blueprintElement.getBlueprintElementValueMap().put("segment1", buildBlueprintElementValue(1, 2, 1, 10)); // valid
        blueprintElement.getBlueprintElementValueMap().put("segment2", buildBlueprintElementValue(1, 2, 1, 10)); // valid
        blueprintElement.getBlueprintElementValueMap().put("segment3", buildBlueprintElementValue(1, 2, 4, 10)); // valid
        blueprintElement.getBlueprintElementValueMap().put("segment4", buildBlueprintElementValue(1, 2, 10, 5)); // min can't be more than max

        final BlueprintElement blueprintElement2 = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), getSegmentListForAssessment(this.savedAssessment.getId()));
        blueprintElement2.getBlueprintElementValueMap().put("segmentA", buildBlueprintElementValue(1, 10, 1, 10)); // valid
        blueprintElement2.getBlueprintElementValueMap().put("segmentB", buildBlueprintElementValue(20, 10, 99, 1)); // can't be over 99 and can't be greater than max

        final BlueprintElement blueprintElement3 = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment2.getId(), getSegmentListForAssessment(this.savedAssessment2.getId()));
        blueprintElement3.getBlueprintElementValueMap().put("segmentX", buildBlueprintElementValue(1, 10, 1, 10));
        blueprintElement3.getBlueprintElementValueMap().put("segmentY", buildBlueprintElementValue(1, 10, 1, 10));

        this.blueprintElementService.saveBlueprintElementList(Lists.newArrayList(blueprintElement, blueprintElement2, blueprintElement3));

        // execute tests
        final List<ValidationResult<BlueprintElement>> errors = this.blueprintElementService.validateBlueprint(this.savedAssessment.getId());
        assertThat(errors.size(), is(3));
        assertThat(findResultsForSegmentId(errors, "segment1").size(), is(0));
        assertThat(findResultsForSegmentId(errors, "segment2").size(), is(0));
        assertThat(findResultsForSegmentId(errors, "segment3").size(), is(0));
        assertThat(findResultsForSegmentId(errors, "segment4").size(), is(1));
        assertThat(findResultsForSegmentId(errors, "segment4").get(0).getFieldName(), is("fieldTestItemMinValue"));
        assertThat(findResultsForSegmentId(errors, "segmentA").size(), is(0));
        assertThat(findResultsForSegmentId(errors, "segmentB").size(), is(2));
        assertThat(findResultsForSegmentId(errors, "segmentB").get(0).getFieldName(), is("operationalItemMinValue"));
        assertThat(findResultsForSegmentId(errors, "segmentB").get(1).getFieldName(), is("fieldTestItemMinValue"));
        assertThat(findResultsForSegmentId(errors, "MASTER").size(), is(0));
    }

    @Test
    public void validateBlueprintTestWithInactiveElements() {
        // create data
        final BlueprintElement blueprintElement = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), getSegmentListForAssessment(this.savedAssessment.getId()));
        blueprintElement.setActive(true);
        blueprintElement.getBlueprintElementValueMap().put("segment1", buildBlueprintElementValue(1, 2, 1, 10)); // valid
        blueprintElement.getBlueprintElementValueMap().put("segment2", buildBlueprintElementValue(1, 1, 1, 10)); // valid
        blueprintElement.getBlueprintElementValueMap().put("segment3", buildBlueprintElementValue(1, 2, 4, 10)); // valid
        blueprintElement.getBlueprintElementValueMap().put("segment4", buildBlueprintElementValue(1, 2, 10, 5)); // min can't be more than max

        final BlueprintElement blueprintElement2 = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), getSegmentListForAssessment(this.savedAssessment.getId()));
        blueprintElement2.setActive(false);
        blueprintElement2.getBlueprintElementValueMap().put("segmentA", buildBlueprintElementValue(1, 10, 1, 10)); // valid
        blueprintElement2.getBlueprintElementValueMap().put("segmentB", buildBlueprintElementValue(1, 10, 1, 99)); // valid

        final BlueprintElement blueprintElement3 = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment2.getId(), getSegmentListForAssessment(this.savedAssessment2.getId()));
        blueprintElement3.setActive(true);
        blueprintElement3.getBlueprintElementValueMap().put("MASTER", buildBlueprintElementValue(1, 10, 1, 10));
        blueprintElement3.getBlueprintElementValueMap().put("segmentX", buildBlueprintElementValue(1, 10, 1, 10));
        blueprintElement3.getBlueprintElementValueMap().put("segmentY", buildBlueprintElementValue(1, 10, 1, 10));

        this.blueprintElementService.saveBlueprintElementList(Lists.newArrayList(blueprintElement, blueprintElement2, blueprintElement3));

        // execute tests
        final List<ValidationResult<BlueprintElement>> errors = this.blueprintElementService.validateBlueprint(this.savedAssessment.getId());
        assertThat(errors.size(), is(1));
        assertThat(findResultsForSegmentId(errors, "MASTER").size(), is(0));
        assertThat(findResultsForSegmentId(errors, "segment1").size(), is(0));
        assertThat(findResultsForSegmentId(errors, "segment2").size(), is(0));
        assertThat(findResultsForSegmentId(errors, "segment3").size(), is(0));
        assertThat(findResultsForSegmentId(errors, "segment4").get(0).getFieldName(), is("fieldTestItemMinValue"));
    }

    private static BlueprintElementValue buildBlueprintElementValue(final int opMin, final int opMax, final int ftMin, final int ftMax) {
        final BlueprintElementValue val = new BlueprintElementValue();
        val.setOperationalItemMinValue(new Integer(opMin));
        val.setOperationalItemMaxValue(new Integer(opMax));
        val.setFieldTestItemMinValue(new Integer(ftMin));
        val.setFieldTestItemMaxValue(new Integer(ftMax));
        return val;
    }

    private static List<ValidationResult<BlueprintElement>> findResultsForSegmentId(final List<ValidationResult<BlueprintElement>> results, final String segmentId) {
        final List<ValidationResult<BlueprintElement>> foundResults = Lists.newArrayList();
        for (final ValidationResult<BlueprintElement> result : results) {
            if (result.getSegmentId().equals(segmentId)) {
                foundResults.add(result);
            }
        }
        return foundResults;
    }

    @Test
    public void clearBlueprintTest() {
        // create data
        BlueprintElement blueprintElement = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), getSegmentListForAssessment(this.savedAssessment.getId()));
        blueprintElement.setActive(true);

        blueprintElement.getBlueprintElementValueMap().put("segment1", buildBlueprintElementValue(1, 10, 5, 20));
        blueprintElement.getBlueprintElementValueMap().put("segment2", buildBlueprintElementValue(2, 11, 6, 21));
        blueprintElement.getBlueprintElementValueMap().put("segment3", buildBlueprintElementValue(3, 12, 7, 22));
        blueprintElement.getBlueprintElementValueMap().put("segment4", buildBlueprintElementValue(4, 13, 8, 23));

        BlueprintElement blueprintElement2 = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), getSegmentListForAssessment(this.savedAssessment.getId()));
        blueprintElement2.setActive(false);
        blueprintElement2.getBlueprintElementValueMap().put("segment1", buildBlueprintElementValue(5, 30, 6, 31));
        blueprintElement2.getBlueprintElementValueMap().put("segment2", buildBlueprintElementValue(10, 40, 11, 41));

        BlueprintElement blueprintElement3 = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment2.getId(), getSegmentListForAssessment(this.savedAssessment2.getId()));
        blueprintElement3.setActive(true);
        blueprintElement3.getBlueprintElementValueMap().put("segment1", buildBlueprintElementValue(1, 10, 1, 10));
        blueprintElement3.getBlueprintElementValueMap().put("segment2", buildBlueprintElementValue(1, 10, 1, 10));

        final List<BlueprintElement> blueprintElementList = this.blueprintElementService.saveBlueprintElementList(Lists.newArrayList(blueprintElement, blueprintElement2, blueprintElement3));
        blueprintElement = blueprintElementList.get(0);
        blueprintElement2 = blueprintElementList.get(1);
        blueprintElement3 = blueprintElementList.get(2);

        // execute tests
        this.blueprintElementService.clearBlueprint(this.savedAssessment.getId(), "segment2");
        final List<BlueprintElement> updatedBpElements = this.mongoTemplate.findAll(BlueprintElement.class);

        final BlueprintElement updatedBpElement = findMatchingBlueprintElement(blueprintElement.getStandardKey(), blueprintElement.getGrade(), updatedBpElements);
        final BlueprintElement updatedBpElement2 = findMatchingBlueprintElement(blueprintElement2.getStandardKey(), blueprintElement2.getGrade(), updatedBpElements);
        final BlueprintElement updatedBpElement3 = findMatchingBlueprintElement(blueprintElement3.getStandardKey(), blueprintElement3.getGrade(), updatedBpElements);

        validateBlueprintElementValue(updatedBpElement.getMasterValue(), 8, 35, 20, 65);
        validateBlueprintElementValue(updatedBpElement.getBlueprintElementValueMap().get("segment1"), 1, 10, 5, 20);
        validateBlueprintElementValue(updatedBpElement.getBlueprintElementValueMap().get("segment2"), 0, 0, 0, 0);
        validateBlueprintElementValue(updatedBpElement.getBlueprintElementValueMap().get("segment3"), 3, 12, 7, 22);
        validateBlueprintElementValue(updatedBpElement.getBlueprintElementValueMap().get("segment4"), 4, 13, 8, 23);
        validateBlueprintElementValue(updatedBpElement2.getMasterValue(), 5, 30, 6, 31);
        validateBlueprintElementValue(updatedBpElement2.getBlueprintElementValueMap().get("segment1"), 5, 30, 6, 31);
        validateBlueprintElementValue(updatedBpElement2.getBlueprintElementValueMap().get("segment2"), 0, 0, 0, 0);
        validateBlueprintElementValue(updatedBpElement3.getMasterValue(), 2, 20, 2, 20);
        validateBlueprintElementValue(updatedBpElement3.getBlueprintElementValueMap().get("segment1"), 1, 10, 1, 10);
        validateBlueprintElementValue(updatedBpElement3.getBlueprintElementValueMap().get("segment2"), 1, 10, 1, 10);
    }

    @Test
    public void clearBlueprintLockedAssessmentTest() {
        final BlueprintElement blueprintElement = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), getSegmentListForAssessment(this.savedAssessment.getId()));
        blueprintElement.setActive(true);
        blueprintElement.getBlueprintElementValueMap().put("segment1", buildBlueprintElementValue(1, 10, 5, 20));
        blueprintElement.getBlueprintElementValueMap().put("segment2", buildBlueprintElementValue(2, 11, 6, 21));
        blueprintElement.getBlueprintElementValueMap().put("segment3", buildBlueprintElementValue(3, 12, 7, 22));
        blueprintElement.getBlueprintElementValueMap().put("segment4", buildBlueprintElementValue(4, 13, 8, 23));

        final BlueprintElement blueprintElement2 = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), getSegmentListForAssessment(this.savedAssessment.getId()));
        blueprintElement2.setActive(false);
        blueprintElement2.getBlueprintElementValueMap().put("segment1", buildBlueprintElementValue(5, 30, 6, 31));
        blueprintElement2.getBlueprintElementValueMap().put("segment2", buildBlueprintElementValue(10, 40, 11, 41));

        final BlueprintElement blueprintElement3 = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment2.getId(), getSegmentListForAssessment(this.savedAssessment2.getId()));
        blueprintElement3.setActive(true);
        blueprintElement3.getBlueprintElementValueMap().put("segment1", buildBlueprintElementValue(1, 10, 1, 10));
        blueprintElement3.getBlueprintElementValueMap().put("segment2", buildBlueprintElementValue(1, 10, 1, 10));

        this.blueprintElementService.saveBlueprintElementList(Lists.newArrayList(blueprintElement, blueprintElement2, blueprintElement3));

        final Assessment retrievedAssessment = this.assessmentRepository.findOne(this.savedAssessment.getId());
        retrievedAssessment.setLocked(true);
        final Assessment reSavedAssessment = this.assessmentRepository.save(retrievedAssessment);
        assertThat(reSavedAssessment.isLocked(), is(true));

        try {
            this.blueprintElementService.clearBlueprint(this.savedAssessment.getId(), "segment2");
            fail("exception should be thrown when trying to save blueprintElement data for an already locked assessment");
        } catch (final LocalizedException e) {
            assertThat(e.getMessage(), is("cannot.be.altered.assessment.locked"));
        }
    }

    @Test
    public void validateBlueprintHierarchyWithNoErrors() {
        // create data
        final BlueprintElement blueprintElement = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), getSegmentListForAssessment(this.savedAssessment.getId()));
        blueprintElement.setActive(true);
        blueprintElement.setGrade("2");
        blueprintElement.getBlueprintElementValueMap().put("segment1", buildBlueprintElementValue(2, 20, 2, 20));
        blueprintElement.getBlueprintElementValueMap().put("segment2", buildBlueprintElementValue(2, 20, 2, 20));
        blueprintElement.getBlueprintElementValueMap().put("segment3", buildBlueprintElementValue(2, 20, 2, 20));
        blueprintElement.getBlueprintElementValueMap().put("segment4", buildBlueprintElementValue(2, 20, 2, 20));

        final BlueprintElement blueprintElement2 = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), getSegmentListForAssessment(this.savedAssessment.getId()));
        blueprintElement2.setActive(true);
        blueprintElement2.setGrade("2");
        blueprintElement2.setParentKey(blueprintElement.getStandardKey());
        blueprintElement2.getBlueprintElementValueMap().put("segment1", buildBlueprintElementValue(1, 10, 1, 10));
        blueprintElement2.getBlueprintElementValueMap().put("segment2", buildBlueprintElementValue(1, 10, 1, 10));
        blueprintElement2.getBlueprintElementValueMap().put("segment3", buildBlueprintElementValue(1, 10, 1, 10));
        blueprintElement2.getBlueprintElementValueMap().put("segment4", buildBlueprintElementValue(1, 10, 1, 10));

        final BlueprintElement blueprintElement21 = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), getSegmentListForAssessment(this.savedAssessment.getId()));
        blueprintElement21.setActive(true);
        blueprintElement21.setGrade("2");
        blueprintElement21.setParentKey(blueprintElement2.getStandardKey());
        blueprintElement21.getBlueprintElementValueMap().put("segment1", buildBlueprintElementValue(0, 0, 0, 0));
        blueprintElement21.getBlueprintElementValueMap().put("segment2", buildBlueprintElementValue(1, 10, 1, 10));
        blueprintElement21.getBlueprintElementValueMap().put("segment3", buildBlueprintElementValue(0, 10, 0, 0));
        blueprintElement21.getBlueprintElementValueMap().put("segment4", buildBlueprintElementValue(1, 10, 1, 10));

        final BlueprintElement blueprintElement22 = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), getSegmentListForAssessment(this.savedAssessment.getId()));
        blueprintElement22.setActive(true);
        blueprintElement22.setGrade("2");
        blueprintElement22.setParentKey(blueprintElement2.getStandardKey());
        blueprintElement22.getBlueprintElementValueMap().put("segment1", buildBlueprintElementValue(1, 10, 1, 10));
        blueprintElement22.getBlueprintElementValueMap().put("segment2", buildBlueprintElementValue(0, 0, 0, 0));
        blueprintElement22.getBlueprintElementValueMap().put("segment3", buildBlueprintElementValue(1, 10, 1, 10));
        blueprintElement22.getBlueprintElementValueMap().put("segment4", buildBlueprintElementValue(0, 0, 0, 0));

        final BlueprintElement blueprintElement3 = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), getSegmentListForAssessment(this.savedAssessment.getId()));
        blueprintElement3.setActive(true);
        blueprintElement3.setGrade("2");
        blueprintElement3.setParentKey(blueprintElement.getStandardKey());
        blueprintElement3.getBlueprintElementValueMap().put("segment1", buildBlueprintElementValue(1, 10, 1, 10));
        blueprintElement3.getBlueprintElementValueMap().put("segment2", buildBlueprintElementValue(1, 10, 1, 10));
        blueprintElement3.getBlueprintElementValueMap().put("segment3", buildBlueprintElementValue(1, 10, 1, 10));
        blueprintElement3.getBlueprintElementValueMap().put("segment4", buildBlueprintElementValue(1, 10, 1, 10));

        final BlueprintElement blueprintElement31 = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), getSegmentListForAssessment(this.savedAssessment.getId()));
        blueprintElement31.setActive(true);
        blueprintElement31.setGrade("2");
        blueprintElement31.setParentKey(blueprintElement3.getStandardKey());
        blueprintElement31.getBlueprintElementValueMap().put("segment1", buildBlueprintElementValue(0, 0, 0, 0));
        blueprintElement31.getBlueprintElementValueMap().put("segment2", buildBlueprintElementValue(1, 10, 1, 10));
        blueprintElement31.getBlueprintElementValueMap().put("segment3", buildBlueprintElementValue(0, 10, 0, 0));
        blueprintElement31.getBlueprintElementValueMap().put("segment4", buildBlueprintElementValue(1, 10, 1, 10));

        final BlueprintElement blueprintElement32 = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), getSegmentListForAssessment(this.savedAssessment.getId()));
        blueprintElement32.setActive(true);
        blueprintElement32.setGrade("2");
        blueprintElement32.setParentKey(blueprintElement3.getStandardKey());
        blueprintElement32.getBlueprintElementValueMap().put("segment1", buildBlueprintElementValue(1, 10, 1, 10));
        blueprintElement32.getBlueprintElementValueMap().put("segment2", buildBlueprintElementValue(0, 0, 0, 0));
        blueprintElement32.getBlueprintElementValueMap().put("segment3", buildBlueprintElementValue(1, 10, 1, 10));
        blueprintElement32.getBlueprintElementValueMap().put("segment4", buildBlueprintElementValue(0, 0, 0, 0));

        this.blueprintElementService.saveBlueprintElementList(Lists.newArrayList(blueprintElement, blueprintElement2, blueprintElement3, blueprintElement21, blueprintElement22, blueprintElement31,
                blueprintElement32));

        // execute tests
        final List<ValidationResult<BlueprintElement>> errors = this.blueprintElementService.validateBlueprint(this.savedAssessment.getId());
        assertThat(errors.size(), is(0));
    }

    @Test
    public void validateBlueprintHierarchyWithVariousErrors() {

        // create data
        BlueprintElement blueprintElement = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), getSegmentListForAssessment(this.savedAssessment.getId()));
        blueprintElement.setActive(true);
        blueprintElement.setGrade("2");
        blueprintElement.getBlueprintElementValueMap().put("segment1", buildBlueprintElementValue(2, 20, 2, 20));
        blueprintElement.getBlueprintElementValueMap().put("segment2", buildBlueprintElementValue(2, 20, 2, 20));
        blueprintElement.getBlueprintElementValueMap().put("segment3", buildBlueprintElementValue(2, 20, 2, 20));
        blueprintElement.getBlueprintElementValueMap().put("segment4", buildBlueprintElementValue(2, 20, 2, 20));

        BlueprintElement blueprintElement2 = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), getSegmentListForAssessment(this.savedAssessment.getId()));
        blueprintElement2.setActive(true);
        blueprintElement2.setGrade("2");
        blueprintElement2.setParentKey(blueprintElement.getStandardKey());
        blueprintElement2.getBlueprintElementValueMap().put("segment1", buildBlueprintElementValue(1, 10, 1, 10));
        blueprintElement2.getBlueprintElementValueMap().put("segment2", buildBlueprintElementValue(1, 20, 6, 10));
        blueprintElement2.getBlueprintElementValueMap().put("segment3", buildBlueprintElementValue(1, 10, 2, 10));
        blueprintElement2.getBlueprintElementValueMap().put("segment4", buildBlueprintElementValue(1, 10, 1, 10));

        final BlueprintElement blueprintElement21 = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), getSegmentListForAssessment(this.savedAssessment.getId()));
        blueprintElement21.setActive(true);
        blueprintElement21.setGrade("2");
        blueprintElement21.setParentKey(blueprintElement2.getStandardKey());
        blueprintElement21.getBlueprintElementValueMap().put("segment1", buildBlueprintElementValue(0, 0, 0, 0));
        blueprintElement21.getBlueprintElementValueMap().put("segment2", buildBlueprintElementValue(1, 10, 1, 4));
        blueprintElement21.getBlueprintElementValueMap().put("segment3", buildBlueprintElementValue(0, 10, 0, 0));
        blueprintElement21.getBlueprintElementValueMap().put("segment4", buildBlueprintElementValue(1, 10, 1, 4));

        final BlueprintElement blueprintElement22 = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), getSegmentListForAssessment(this.savedAssessment.getId()));
        blueprintElement22.setActive(true);
        blueprintElement22.setGrade("2");
        blueprintElement22.setParentKey(blueprintElement2.getStandardKey());
        blueprintElement22.getBlueprintElementValueMap().put("segment1", buildBlueprintElementValue(1, 10, 1, 16));
        blueprintElement22.getBlueprintElementValueMap().put("segment2", buildBlueprintElementValue(0, 10, 0, 0));
        blueprintElement22.getBlueprintElementValueMap().put("segment3", buildBlueprintElementValue(1, 10, 2, 4));
        blueprintElement22.getBlueprintElementValueMap().put("segment4", buildBlueprintElementValue(0, 0, 0, 0));

        BlueprintElement blueprintElement3 = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), getSegmentListForAssessment(this.savedAssessment.getId()));
        blueprintElement3.setActive(true);
        blueprintElement3.setGrade("2");
        blueprintElement3.setParentKey(blueprintElement.getStandardKey());
        blueprintElement3.getBlueprintElementValueMap().put("segment1", buildBlueprintElementValue(1, 10, 1, 10));
        blueprintElement3.getBlueprintElementValueMap().put("segment2", buildBlueprintElementValue(1, 10, 1, 10));
        blueprintElement3.getBlueprintElementValueMap().put("segment3", buildBlueprintElementValue(1, 10, 1, 10));
        blueprintElement3.getBlueprintElementValueMap().put("segment4", buildBlueprintElementValue(50, 50, 1, 10));

        final BlueprintElement blueprintElement31 = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), getSegmentListForAssessment(this.savedAssessment.getId()));
        blueprintElement31.setActive(true);
        blueprintElement31.setGrade("2");
        blueprintElement31.setParentKey(blueprintElement3.getStandardKey());
        blueprintElement31.getBlueprintElementValueMap().put("segment1", buildBlueprintElementValue(0, 0, 0, 0));
        blueprintElement31.getBlueprintElementValueMap().put("segment2", buildBlueprintElementValue(1, 10, 1, 10));
        blueprintElement31.getBlueprintElementValueMap().put("segment3", buildBlueprintElementValue(0, 10, 0, 0));
        blueprintElement31.getBlueprintElementValueMap().put("segment4", buildBlueprintElementValue(1, 10, 1, 10));

        final BlueprintElement blueprintElement32 = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), getSegmentListForAssessment(this.savedAssessment.getId()));
        blueprintElement32.setActive(true);
        blueprintElement32.setGrade("2");
        blueprintElement32.setParentKey(blueprintElement3.getStandardKey());
        blueprintElement32.getBlueprintElementValueMap().put("segment1", buildBlueprintElementValue(1, 10, 1, 10));
        blueprintElement32.getBlueprintElementValueMap().put("segment2", buildBlueprintElementValue(0, 0, 0, 0));
        blueprintElement32.getBlueprintElementValueMap().put("segment3", buildBlueprintElementValue(1, 10, 1, 10));
        blueprintElement32.getBlueprintElementValueMap().put("segment4", buildBlueprintElementValue(0, 0, 0, 0));

        final List<BlueprintElement> blueprintElementList = this.blueprintElementService.saveBlueprintElementList(Lists.newArrayList(
                blueprintElement, blueprintElement2, blueprintElement3, blueprintElement21, blueprintElement22, blueprintElement31, blueprintElement32));
        blueprintElement = blueprintElementList.get(0);
        blueprintElement2 = blueprintElementList.get(1);
        blueprintElement3 = blueprintElementList.get(2);

        // execute tests
        final List<ValidationResult<BlueprintElement>> errors = this.blueprintElementService.validateBlueprint(this.savedAssessment.getId());
        assertThat(errors.size(), is(3));
        assertThat(findResultsForSegmentId(errors, "MASTER").size(), is(0));
        assertThat(findResultsForSegmentId(errors, "segment1").size(), is(0));
        assertThat(findResultsForSegmentId(errors, "segment2").size(), is(1));
        assertThat(findResultsForSegmentId(errors, "segment3").size(), is(0));
        assertThat(findResultsForSegmentId(errors, "segment4").size(), is(2));

        final ValidationResult<BlueprintElement> segment2Error = findResultsForSegmentId(errors, "segment2").get(0);
        assertThat(segment2Error.getValidatedObject().getId(), is(blueprintElement2.getId()));
        assertThat(segment2Error.getFieldName(), is("fieldTestItemMinValue"));
        assertThat(segment2Error.getMessage(), is("The FT Min value of the content standard (6) is greater than the sum of its children's FT Max value (4)"));

        final ValidationResult<BlueprintElement> segment4Error1 = findResultsForSegmentId(errors, "segment4").get(0);
        assertThat(segment4Error1.getValidatedObject().getId(), is(blueprintElement.getId()));
        assertThat(segment4Error1.getFieldName(), is("operationalItemMaxValue"));
        assertThat(segment4Error1.getMessage(), is("The OP Max value of the content standard (20) is less than the sum of its children's OP Min value (51)"));

        final ValidationResult<BlueprintElement> segment4Error2 = findResultsForSegmentId(errors, "segment4").get(1);
        assertThat(segment4Error2.getValidatedObject().getId(), is(blueprintElement3.getId()));
        assertThat(segment4Error2.getFieldName(), is("operationalItemMinValue"));
        assertThat(segment4Error2.getMessage(), is("The OP Min value of the content standard (50) is greater than the sum of its children's OP Max value (10)"));
    }

    @Test
    public void validateBlueprintHierarchyWithInvalidActiveChildren() {
        // create data
        final BlueprintElement blueprintElement = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), getSegmentListForAssessment(this.savedAssessment.getId()));
        blueprintElement.setActive(false);
        blueprintElement.setGrade("2");
        blueprintElement.getBlueprintElementValueMap().put("segment1", buildBlueprintElementValue(2, 20, 2, 20));
        blueprintElement.getBlueprintElementValueMap().put("segment2", buildBlueprintElementValue(2, 20, 2, 20));
        blueprintElement.getBlueprintElementValueMap().put("segment3", buildBlueprintElementValue(2, 20, 2, 20));
        blueprintElement.getBlueprintElementValueMap().put("segment4", buildBlueprintElementValue(2, 20, 2, 20));

        final BlueprintElement blueprintElement2 = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), getSegmentListForAssessment(this.savedAssessment.getId()));
        blueprintElement2.setActive(true);
        blueprintElement2.setGrade("2");
        blueprintElement2.setParentKey(blueprintElement.getStandardKey());
        blueprintElement2.getBlueprintElementValueMap().put("segment1", buildBlueprintElementValue(1, 10, 1, 10));
        blueprintElement2.getBlueprintElementValueMap().put("segment2", buildBlueprintElementValue(1, 20, 1, 10));
        blueprintElement2.getBlueprintElementValueMap().put("segment3", buildBlueprintElementValue(1, 10, 2, 10));
        blueprintElement2.getBlueprintElementValueMap().put("segment4", buildBlueprintElementValue(1, 10, 1, 10));

        this.blueprintElementService.saveBlueprintElementList(Lists.newArrayList(blueprintElement, blueprintElement2));

        // execute tests
        final List<ValidationResult<BlueprintElement>> errors = this.blueprintElementService.validateBlueprint(this.savedAssessment.getId());
        assertThat(errors.size(), is(1));
        assertThat(findResultsForSegmentId(errors, "MASTER").size(), is(1));
        assertThat(findResultsForSegmentId(errors, "MASTER").get(0).getFieldName(), is("active"));
    }

    @Test
    public void validateBlueprintHierarchyWithValidInactiveChildren() {
        // create data
        final BlueprintElement blueprintElement = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), getSegmentListForAssessment(this.savedAssessment.getId()));
        blueprintElement.setActive(true);
        blueprintElement.setGrade("2");
        blueprintElement.getBlueprintElementValueMap().put("segment1", buildBlueprintElementValue(2, 20, 2, 20));
        blueprintElement.getBlueprintElementValueMap().put("segment2", buildBlueprintElementValue(2, 20, 2, 20));
        blueprintElement.getBlueprintElementValueMap().put("segment3", buildBlueprintElementValue(2, 20, 2, 20));
        blueprintElement.getBlueprintElementValueMap().put("segment4", buildBlueprintElementValue(2, 20, 2, 20));

        final BlueprintElement blueprintElement2 = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), getSegmentListForAssessment(this.savedAssessment.getId()));
        blueprintElement2.setActive(false);
        blueprintElement2.setGrade("2");
        blueprintElement2.setParentKey(blueprintElement.getStandardKey());
        blueprintElement2.getBlueprintElementValueMap().put("segment1", buildBlueprintElementValue(1, 10, 1, 10));
        blueprintElement2.getBlueprintElementValueMap().put("segment2", buildBlueprintElementValue(1, 20, 1, 10));
        blueprintElement2.getBlueprintElementValueMap().put("segment3", buildBlueprintElementValue(1, 10, 2, 10));
        blueprintElement2.getBlueprintElementValueMap().put("segment4", buildBlueprintElementValue(1, 10, 1, 10));

        this.blueprintElementService.saveBlueprintElementList(Lists.newArrayList(blueprintElement, blueprintElement2));
        // execute tests
        final List<ValidationResult<BlueprintElement>> errors = this.blueprintElementService.validateBlueprint(this.savedAssessment.getId());
        assertThat(errors.size(), is(0));
    }

    @Test
    public void validateBlueprintTopLevelStandardsVsSegmentValues() {
        // create data
        final Segment segment1 = this.segmentRepository.findOne("segment1");
        segment1.setMinOpItems(0);
        segment1.setMaxOpItems(0);
        segment1.setMinFtItems(10);
        segment1.setMaxFtItems(10);
        final Segment segment2 = this.segmentRepository.findOne("segment2");
        segment2.setMinOpItems(0);
        segment2.setMaxOpItems(0);
        segment2.setMinFtItems(10);
        segment2.setMaxFtItems(10);
        this.segmentService.saveSegmentList(ImmutableList.of(segment1, segment2), false);

        final BlueprintElement blueprintElement = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), getSegmentListForAssessment(this.savedAssessment.getId()));
        blueprintElement.setActive(true);
        blueprintElement.setGrade("2");
        blueprintElement.setLevel("1");
        blueprintElement.getBlueprintElementValueMap().put("segment1", buildBlueprintElementValue(4, 40, 5, 5));
        blueprintElement.getBlueprintElementValueMap().put("segment2", buildBlueprintElementValue(4, 40, 4, 5));

        final BlueprintElement blueprintElement2 = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), getSegmentListForAssessment(this.savedAssessment.getId()));
        blueprintElement2.setActive(true);
        blueprintElement2.setGrade("2");
        blueprintElement2.setLevel("1");
        blueprintElement2.getBlueprintElementValueMap().put("segment1", buildBlueprintElementValue(1, 10, 3, 3));
        blueprintElement2.getBlueprintElementValueMap().put("segment2", buildBlueprintElementValue(1, 20, 5, 5));

        this.blueprintElementService.saveBlueprintElementList(Lists.newArrayList(blueprintElement, blueprintElement2));
        // execute tests
        final List<ValidationResult<BlueprintElement>> errors = this.blueprintElementService.validateBlueprint(this.savedAssessment.getId());
        assertThat(errors.size(), is(3));
        assertThat(findResultsForSegmentId(errors, "MASTER").size(), is(0));
        assertThat(findResultsForSegmentId(errors, "segment1").size(), is(2));
        assertThat(findResultsForSegmentId(errors, "segment2").size(), is(1));

        final ValidationResult<BlueprintElement> segment1Error0 = findResultsForSegmentId(errors, "segment1").get(0);
        assertThat(segment1Error0.getValidatedObject(), is(nullValue()));
        assertThat(segment1Error0.getFieldName(), is("operationalItemMaxValue"));
        assertThat(segment1Error0.getMessage(), is("The OP Max value of the segment (0) is less than the sum of its blueprint's top-level standard's OP Min value (5)"));

        final ValidationResult<BlueprintElement> segment1Error1 = findResultsForSegmentId(errors, "segment1").get(1);
        assertThat(segment1Error1.getValidatedObject(), is(nullValue()));
        assertThat(segment1Error1.getFieldName(), is("fieldTestItemMinValue"));
        assertThat(segment1Error1.getMessage(), is("The FT Min value of the segment (10) is greater than the sum of its blueprint's top-level standard's FT Max value (8)"));

        final ValidationResult<BlueprintElement> segment2Error0 = findResultsForSegmentId(errors, "segment2").get(0);
        assertThat(segment2Error0.getValidatedObject(), is(nullValue()));
        assertThat(segment2Error0.getFieldName(), is("operationalItemMaxValue"));
        assertThat(segment2Error0.getMessage(), is("The OP Max value of the segment (0) is less than the sum of its blueprint's top-level standard's OP Min value (5)"));
    }

    private void validateBlueprintElementValue(final BlueprintElementValue testValue, final int expectedOpMin, final int expectedOpMax, final int expectedFtMin, final int expectedFtMax) {
        assertThat(testValue.getOperationalItemMinValue(), is(expectedOpMin));
        assertThat(testValue.getOperationalItemMaxValue(), is(expectedOpMax));
        assertThat(testValue.getFieldTestItemMinValue(), is(expectedFtMin));
        assertThat(testValue.getFieldTestItemMaxValue(), is(expectedFtMax));
    }

    private void saveNewSegment(final ItemSelectionAlgorithm algorithm, final String... segmentIdList) {
        final List<ItemLocation> itemLocationList = Lists.newArrayList();
        for (int i = 0; i < segmentIdList.length; i++) {
            final String segmentId = segmentIdList[i];
            final Segment savedSegment = DomainFactory.manufactureValidSegment(this.savedAssessment.getId(), algorithm, 1);
            savedSegment.setId(segmentId);
            savedSegment.setPosition(i + 1);
            this.segmentRepository.save(savedSegment);
            itemLocationList.add(new AdaptiveItemLocation(savedSegment.getId(), null));
        }
        final Item item = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        item.setId(null);
        item.setItemLocation(itemLocationList);
        this.itemService.saveItem(item);
    }

    private void saveNewSegment(final ItemSelectionAlgorithm algorithm, final String segmentId, final int position) {
        final List<ItemLocation> itemLocationList = Lists.newArrayList();
        final Segment savedSegment = DomainFactory.manufactureValidSegment(this.savedAssessment.getId(), algorithm, 1);
        savedSegment.setId(segmentId);
        savedSegment.setPosition(position);
        this.segmentRepository.save(savedSegment);
        itemLocationList.add(new AdaptiveItemLocation(savedSegment.getId(), null));

        final Item item = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        item.setId(null);
        item.setItemLocation(itemLocationList);
        this.itemService.saveItem(item);
    }
}
