/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.integration;

import static org.hamcrest.CoreMatchers.containsString;
import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.Assert.fail;

import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.Segment;
import org.opentestsystem.authoring.testauth.persistence.SegmentRepository;
import org.opentestsystem.authoring.testauth.rest.AbstractRestEmbeddedMongoTest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DuplicateKeyException;

public class SegmentRepositoryTest extends AbstractRestEmbeddedMongoTest {

    @Autowired
    private SegmentRepository segmentRepository;

    @Test
    public void saveSegmentTest() {
        final Segment segment = manufactureValidSegmentPojo("1");
        final Segment savedSegment = this.segmentRepository.save(segment);
        assertThat(savedSegment, is(notNullValue()));
        assertThat(savedSegment.getId(), is(notNullValue()));
    }

    @Test
    public void saveDuplicatePositionSegmentTest() {
        final Segment segment = manufactureValidSegmentPojo("1");
        final Segment savedSegment = this.segmentRepository.save(segment);
        assertThat(savedSegment, is(notNullValue()));
        assertThat(savedSegment.getId(), is(notNullValue()));

        final Segment duplicateSegment = manufactureValidSegmentPojo("1");
        duplicateSegment.setPosition(1);
        try {
            this.segmentRepository.save(duplicateSegment);
            fail("should have thrown exception");
        } catch (final DuplicateKeyException e) {
            assertThat(e.getMessage(), containsString("segment_position_indx"));
        }

    }

    @Test
    public void findSegmentTest() {
        final Segment segment = manufactureValidSegmentPojo("1");
        final Segment savedSegment = this.segmentRepository.save(segment);
        assertThat(savedSegment, is(notNullValue()));
        final Segment foundSegment = this.segmentRepository.findOne(savedSegment.getId());
        assertThat(savedSegment.getId(), is(equalTo(foundSegment.getId())));
        assertThat(savedSegment, is(equalTo(foundSegment)));
    }

    @Test
    public void removeSegmentTest() {
        final Segment segment = manufactureValidSegmentPojo("1");
        final Segment savedSegment = this.segmentRepository.save(segment);
        this.segmentRepository.delete(segment);
        final Segment foundSegment = this.segmentRepository.findOne(savedSegment.getId());
        assertThat(foundSegment, is(nullValue()));
    }

    private Segment manufactureValidSegmentPojo(final String assessmentId) {
        final Segment segment = PODAM_FACTORY.manufacturePojo(Segment.class);
        segment.setAssessmentId(assessmentId);
        segment.setPosition(1);
        segment.setMinFtItems(1);
        segment.setMaxFtItems(99);
        segment.setMinOpItems(21);
        segment.setMaxOpItems(21);
        return segment;
    }
}
