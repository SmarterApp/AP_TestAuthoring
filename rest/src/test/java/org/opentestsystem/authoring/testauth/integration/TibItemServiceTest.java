/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.integration;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.mockito.Mockito.atLeastOnce;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import org.opentestsystem.authoring.testauth.rest.AbstractRestEmbeddedMongoTest;
import org.opentestsystem.authoring.testauth.service.TibItemService;
import org.opentestsystem.authoring.testitembank.client.TestItemBankClientInterface;
import org.opentestsystem.authoring.testitembank.client.TibItemMetadata;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;

public class TibItemServiceTest extends AbstractRestEmbeddedMongoTest {

    private String responseList, filteredResponse;
    private TibItemMetadata metadataResponse;

    @Autowired
    private TestItemBankClientInterface tibClient;

    @Autowired
    private TibItemService tibItemService;

    @Before
    public void testSetup() {
        this.responseList = "{\"items\": [{\"identifier\":\"SQA001\", \"url\":\"item/apipitem_SQA001\"}, {\"identifier\":\"SQA643\", \"url\":\"item/apipitem_SQA643\"}] }";
        this.filteredResponse = "{\"items\": [{\"identifier\":\"SQA001\", \"url\":\"item/apipitem_SQA001\"}] }";
        metadataResponse = new TibItemMetadata();
        metadataResponse.setId("mongoId");
        metadataResponse.setTenantId("tenant-id");
        metadataResponse.setMetadataKeys(ImmutableSet.of("meta1", "meta2"));

        Mockito.reset(tibClient);
    }

    @Test
    public void getAllItems() {
        final Map<String, String[]> paramMap = ImmutableMap.of();
        when(this.tibClient.getItems(paramMap)).thenReturn(this.responseList);
        this.tibItemService.getItems(paramMap);
        verify(this.tibClient, atLeastOnce()).getItems(paramMap);
        assertThat(this.responseList.contains("SQA643"), is(true));
    }

    @Test
    public void getFilteredItems() {
        final Map<String, String[]> paramMap = ImmutableMap.of("identifier", new String[] { "SQA001" });
        when(this.tibClient.getItems(paramMap)).thenReturn(this.filteredResponse);
        this.tibItemService.getItems(paramMap);
        verify(this.tibClient).getItems(paramMap);
        assertThat(this.filteredResponse.contains("SQA001"), is(true));
    }

    @Test
    public void getItemMetadataByTenant() {
        when(this.tibClient.getItemMetadataByTenantId("tenant-id")).thenReturn(this.metadataResponse);
        final TibItemMetadata response = this.tibItemService.getItemMetadataByTenantId("tenant-id");
        verify(this.tibClient).getItemMetadataByTenantId("tenant-id");
        assertThat(response.getMetadataKeys().contains("meta1"), is(true));
    }
}
