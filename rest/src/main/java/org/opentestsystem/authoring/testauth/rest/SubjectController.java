/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.rest;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.authoring.testauth.domain.Subject;
import org.opentestsystem.authoring.testauth.domain.search.SubjectSearchRequest;
import org.opentestsystem.authoring.testauth.service.SubjectService;
import org.opentestsystem.shared.exception.LocalizedException;
import org.opentestsystem.shared.exception.RestException;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.opentestsystem.shared.web.AbstractRestController;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.access.annotation.Secured;
import org.springframework.security.access.prepost.PostAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

/**
 * Used to retrieve help messages
 */
@Controller
public class SubjectController extends AbstractRestController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SubjectController.class);

    @Autowired
    private SubjectService service;

    /**
     * Gets subject by id.
     * 
     * @param subject id.
     * @return Subject object.
     */
    @RequestMapping(value = "/subject/{subjectId}", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Setup Read" })
    @PostAuthorize("hasRole('ROLE_Setup Modify') or hasPermission(returnObject, 'ROLE_Setup Read')")
    @ResponseBody
    public Subject getSubject(@PathVariable final String subjectId) {
        LOGGER.debug("Finding subject for id: " + subjectId);
        return service.getSubject(subjectId);
    }

    /**
     * Creates Subject.
     * 
     * @param subject to be saved.
     * @param response HttpServletResponse.
     * @return Subject newly created subject object.
     */
    @ResponseStatus(HttpStatus.CREATED)
    @RequestMapping(value = "/subject", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Setup Modify" })
    // NOTE: there is intentionally no @PreAuthorize annotation...ability to modify setup is non-tenanted
    @ResponseBody
    public Subject saveSubject(@RequestBody @Valid final Subject subject, final HttpServletResponse response) {
        LOGGER.debug("Saving Subject");
        return service.saveSubject(subject);
    }

    /**
     * Updates Subject.
     * 
     * @param subject to be saved.
     * @param response HttpServletResponse.
     * @return Subject updated subject object.
     */
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "/subject/{subjectId}", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Setup Modify" })
    // NOTE: there is intentionally no @PreAuthorize annotation...ability to modify setup is non-tenanted
    @ResponseBody
    public Subject updateSubject(@PathVariable final String subjectId, @RequestBody @Valid final Subject subject, final HttpServletResponse response) {
        if (subject == null || StringUtils.isEmpty(subject.getId()) || !subjectId.equals(subject.getId())) {
            throw new LocalizedException("subject.invalid.id");
        } else {
            return service.saveSubject(subject);
        }
    }

    /**
     * Retires / restores Subject.
     * 
     * @param subject to be saved.
     * @param response HttpServletResponse.
     * @return Subject updated subject object.
     */
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "/subject/{subjectId}/retire", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Setup Modify" })
    // NOTE: there is intentionally no @PreAuthorize annotation...ability to modify setup is non-tenanted
    @ResponseBody
    public Subject retireSubject(@PathVariable final String subjectId, @RequestParam(value = "undoRetirement", required = false) final boolean undoRetirement) {
        if (subjectId == null || StringUtils.isEmpty(subjectId)) {
            throw new LocalizedException("subject.invalid.id");
        } else {
            return this.service.retireSubject(subjectId, undoRetirement);
        }
    }

    /**
     * Can query the /subject endpoint with query parameters or with JSON. <br />
     * Valid parameters are: name, abbreviation
     * 
     * @param request HttpServletRequest
     * @param response HttpServletResponse
     * @return SearchResponse<Subject>
     */
    @RequestMapping(value = "/subject", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Setup Read" })
    @PostAuthorize("hasRole('ROLE_Setup Modify') or hasPermission(returnObject, 'ROLE_Setup Read')")
    @ResponseBody
    public SearchResponse<Subject> searchSubject(final HttpServletRequest request, final HttpServletResponse response) {
        SubjectSearchRequest searchRequest = new SubjectSearchRequest(request.getParameterMap());
        SearchResponse<Subject> searchResponse;
        if (searchRequest.isValid()) {
            searchResponse = service.searchSubjects(searchRequest);
        } else {
            throw new RestException("subject.search.invalidSearchCriteria");
        }
        return searchResponse;
    }

}
