/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.domain;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Map;

import javax.validation.constraints.NotNull;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;
import org.hibernate.validator.constraints.Range;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

@JsonIgnoreProperties(ignoreUnknown = true)
public class BlueprintElementValue implements Serializable {
    private static final long serialVersionUID = 22664498859439709L;

    public static final int MAX_VALUE = 999;

    @NotNull(message = "blueprintElement.blueprintElementValueMap.operationalItemMinValue.required")
    @Range(min = 0, max = MAX_VALUE, message = "blueprintElement.blueprintElementValueMap.operationalItemMinValue.range")
    private Integer operationalItemMinValue;

    @NotNull(message = "blueprintElement.blueprintElementValueMap.operationalItemMaxValue.required")
    @Range(min = 0, max = MAX_VALUE, message = "blueprintElement.blueprintElementValueMap.operationalItemMaxValue.range")
    private Integer operationalItemMaxValue;

    @NotNull(message = "blueprintElement.blueprintElementValueMap.fieldTestItemMinValue.required")
    @Range(min = 0, max = MAX_VALUE, message = "blueprintElement.blueprintElementValueMap.fieldTestItemMinValue.range")
    private Integer fieldTestItemMinValue;

    @NotNull(message = "blueprintElement.blueprintElementValueMap.fieldTestItemMaxValue.required")
    @Range(min = 0, max = MAX_VALUE, message = "blueprintElement.blueprintElementValueMap.fieldTestItemMaxValue.range")
    private Integer fieldTestItemMaxValue;

    private Map<String, String> itemSelectionParameters;

    public BlueprintElementValue() {
    }

    public BlueprintElementValue(final int aFieldTestItemMinValue, final int aFieldTestItemMaxValue, final int anOperationalItemMinValue, final int anOperationalItemMaxValue) {
        setFieldTestItemMinValue(aFieldTestItemMinValue);
        setFieldTestItemMaxValue(aFieldTestItemMaxValue);
        setOperationalItemMinValue(anOperationalItemMinValue);
        setOperationalItemMaxValue(anOperationalItemMaxValue);
    }

    public Integer getOperationalItemMinValue() {
        return this.operationalItemMinValue;
    }

    public void setOperationalItemMinValue(final Integer anOperationalItemMinValue) {
        this.operationalItemMinValue = anOperationalItemMinValue;
    }

    public Integer getOperationalItemMaxValue() {
        return this.operationalItemMaxValue;
    }

    public void setOperationalItemMaxValue(final Integer anOperationalItemMaxValue) {
        this.operationalItemMaxValue = anOperationalItemMaxValue;
    }

    public Integer getFieldTestItemMinValue() {
        return this.fieldTestItemMinValue;
    }

    public void setFieldTestItemMinValue(final Integer aFieldTestItemMinValue) {
        this.fieldTestItemMinValue = aFieldTestItemMinValue;
    }

    public Integer getFieldTestItemMaxValue() {
        return this.fieldTestItemMaxValue;
    }

    public void setFieldTestItemMaxValue(final Integer aFieldTestItemMaxValue) {
        this.fieldTestItemMaxValue = aFieldTestItemMaxValue;
    }

    public int getItemSelectionParameterCount() {
        return this.itemSelectionParameters == null ? 0 : this.itemSelectionParameters.size();
    }

    public Map<String, String> getItemSelectionParameters() {
        return this.itemSelectionParameters;
    }

    public void setItemSelectionParameters(final Map<String, String> aItemSelectionParameters) {
        this.itemSelectionParameters = aItemSelectionParameters;
    }

    /**
     * Trims the item selection parameter values when the type is FLOAT or INTEGER
     */
    public void trimItemSelectionValues(final ItemSelectionAlgorithm algorithm) {
        if (algorithm != null && this.itemSelectionParameters != null) {
            for (final ItemSelectionAlgorithmParameter parameter : algorithm.getBlueprintParameters()) {
                if (ItemSelectionType.FLOAT == parameter.getItemSelectionType() || ItemSelectionType.INTEGER == parameter.getItemSelectionType()) {
                    final String paramValue = this.itemSelectionParameters.get(parameter.getParameterName());
                    this.itemSelectionParameters.put(parameter.getParameterName(), new BigDecimal(paramValue).stripTrailingZeros().toPlainString());
                }
            }
        }
    }

    /**
     * Sets the OP/FT min and max values to the values of the given element
     */
    public void copyMinMaxValuesToElement(final BlueprintElementValue elementToCopy) {
        this.setOperationalItemMinValue(elementToCopy.getOperationalItemMinValue());
        this.setOperationalItemMaxValue(elementToCopy.getOperationalItemMaxValue());
        this.setFieldTestItemMinValue(elementToCopy.getFieldTestItemMinValue());
        this.setFieldTestItemMaxValue(elementToCopy.getFieldTestItemMaxValue());
    }

    @Override
    public boolean equals(final Object obj) {
        return EqualsBuilder.reflectionEquals(this, obj);
    }

    @Override
    public String toString() {
        return ToStringBuilder.reflectionToString(this, ToStringStyle.SHORT_PREFIX_STYLE);
    }

    @Override
    public int hashCode() {
        return HashCodeBuilder.reflectionHashCode(this);
    }
}
