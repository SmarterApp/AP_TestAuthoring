/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.rest;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;

import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.AffinityGroup;
import org.opentestsystem.authoring.testauth.domain.Assessment;
import org.opentestsystem.authoring.testauth.domain.BlueprintDenotationType;
import org.opentestsystem.authoring.testauth.domain.BlueprintElement;
import org.opentestsystem.authoring.testauth.domain.BlueprintReferenceType;
import org.opentestsystem.authoring.testauth.domain.ComputationRule;
import org.opentestsystem.authoring.testauth.domain.ComputationRuleMultiplicityType;
import org.opentestsystem.authoring.testauth.domain.ComputationRuleParameter;
import org.opentestsystem.authoring.testauth.domain.ComputationRuleType;
import org.opentestsystem.authoring.testauth.domain.ConversionTableType;
import org.opentestsystem.authoring.testauth.domain.DomainFactory;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionAlgorithm;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionPurpose;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionType;
import org.opentestsystem.authoring.testauth.domain.Publication;
import org.opentestsystem.authoring.testauth.domain.ReportingMeasure;
import org.opentestsystem.authoring.testauth.domain.ScoringRule;
import org.opentestsystem.authoring.testauth.domain.ScoringRuleParameter;
import org.opentestsystem.authoring.testauth.domain.Segment;
import org.opentestsystem.authoring.testauth.domain.Subject;
import org.opentestsystem.authoring.testauth.service.AffinityGroupService;
import org.opentestsystem.authoring.testauth.service.AssessmentService;
import org.opentestsystem.authoring.testauth.service.BlueprintElementService;
import org.opentestsystem.authoring.testauth.service.ComputationRuleService;
import org.opentestsystem.authoring.testauth.service.ItemSelectionAlgorithmService;
import org.opentestsystem.authoring.testauth.service.PublicationService;
import org.opentestsystem.authoring.testauth.service.ScoringRuleService;
import org.opentestsystem.authoring.testauth.service.SegmentService;
import org.opentestsystem.authoring.testauth.service.SubjectService;
import org.opentestsystem.shared.docs.annotation.ApiDocExample;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;

public class ReportingMeasureControllerTest extends AbstractRestEmbeddedMongoTest {

    private static final String BASE_URL = "/reportingMeasure";

    @Autowired
    private PublicationService publicationService;

    @Autowired
    private SubjectService subjectService;

    @Autowired
    private AssessmentService assessmentService;

    @Autowired
    private ItemSelectionAlgorithmService itemSelectionAlgorithmService;

    @Autowired
    private SegmentService segmentService;

    @Autowired
    private AffinityGroupService affinityGroupService;

    @Autowired
    private BlueprintElementService blueprintElementService;

    @Autowired
    private ComputationRuleService computationRuleService;

    @Autowired
    private ScoringRuleService scoringRuleService;

    private Assessment savedAssessment;
    private ItemSelectionAlgorithm savedAlgorithm;
    private Segment savedSegment;
    private AffinityGroup savedAffinityGroup;
    private BlueprintElement savedBlueprintElement;
    private ComputationRule savedComputationRule;
    private ScoringRule savedScoringRule;
    private ScoringRule savedTestScoringRule;
    private ScoringRule savedAffinityGroupScoringRule;
    private ScoringRule savedStandardScoringRule;

    @ApiDocExample(rank = -1)
    @Before
    public void setupTestData() {
        final Subject savedSubject = this.subjectService.saveSubject(DomainFactory.manufactureValidSubject("ABB"));
        final Publication savedPublication = this.publicationService.savePublication(DomainFactory.manufactureValidPublication(savedSubject.getTenantId(), ImmutableSet.of(savedSubject)));
        this.savedAssessment = this.assessmentService.saveAssessment(DomainFactory.manufactureValidAssessment(savedSubject, savedPublication));
        final ItemSelectionAlgorithm algorithm = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.BOOLEAN);
        this.savedAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithm);

        final Segment segmentToSave = DomainFactory.manufactureValidSegment(this.savedAssessment.getId(), this.savedAlgorithm, 1);
        this.savedSegment = this.segmentService.createSegment(segmentToSave);

        final AffinityGroup affinityGroupToSave = DomainFactory.manufactureValidAffinityGroup(this.savedAssessment.getId());
        this.savedAffinityGroup = this.affinityGroupService.saveNewAffinityGroup(affinityGroupToSave);

        final BlueprintElement blueprintElementToSave = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), ImmutableList.of(this.savedSegment));
        this.savedBlueprintElement = this.blueprintElementService.saveBlueprintElement(null, blueprintElementToSave);

        final ComputationRule computationRule = PODAM_FACTORY.manufacturePojo(ComputationRule.class);
        computationRule.setId(null);
        computationRule.setConversionTableType(ConversionTableType.NONE);
        computationRule.getParameters().clear();
        computationRule.setVersion("1.0");
        final ComputationRuleParameter computationRuleParameter = new ComputationRuleParameter();
        computationRuleParameter.setParameterName("parameter1");
        computationRuleParameter.setComputationRuleType(ComputationRuleType.STRING);
        computationRuleParameter.setDefaultValue("Q");
        computationRuleParameter.setComputationRuleMultiplicityType(ComputationRuleMultiplicityType.SCALAR);
        computationRuleParameter.setPosition(1);
        computationRule.getParameters().add(computationRuleParameter);
        this.savedComputationRule = this.computationRuleService.createComputationRule(computationRule);

        this.savedScoringRule = this.scoringRuleService.saveScoringRule(null, buildScoringRule(BlueprintReferenceType.SEGMENT, 1));
        this.savedTestScoringRule = this.scoringRuleService.saveScoringRule(null, buildScoringRule(BlueprintReferenceType.TEST, 2));
        this.savedAffinityGroupScoringRule = this.scoringRuleService.saveScoringRule(null, buildScoringRule(BlueprintReferenceType.AFFINITY_GROUP, 3));
        this.savedStandardScoringRule = this.scoringRuleService.saveScoringRule(null, buildScoringRule(BlueprintReferenceType.STANDARD, 4));
    }

    @ApiDocExample(rank = 1)
    @Test
    public void saveReportingMeasure() throws InterruptedException {
        final ReportingMeasure savedReportingMeasure = callPOSTRestService(BASE_URL, buildParamObject(buildReportingMeasureMap()), ReportingMeasure.class);
        final ReportingMeasure retrievedReportingMeasure = this.mongoTemplate.findById(savedReportingMeasure.getId(), ReportingMeasure.class);

        assertThat(retrievedReportingMeasure, is(notNullValue()));
        assertThat(retrievedReportingMeasure.getBlueprintReferenceId(), is(equalTo(savedReportingMeasure.getBlueprintReferenceId())));
    }

    @ApiDocExample(rank = 2)
    @Test
    public void updateReportingMeasure() throws InterruptedException {
        final ReportingMeasure savedReportingMeasure = callPOSTRestService(BASE_URL, buildParamObject(buildReportingMeasureMap()), ReportingMeasure.class);
        assertThat(savedReportingMeasure, is(notNullValue()));

        savedReportingMeasure.setBlueprintReferenceType(BlueprintReferenceType.AFFINITY_GROUP);
        savedReportingMeasure.setBlueprintReferenceId(this.savedAffinityGroup.getId());
        savedReportingMeasure.setScoringRuleIdList(Lists.newArrayList(this.savedAffinityGroupScoringRule.getId()));
        final ReportingMeasure updatedReportingMeasure = callPUTRestService(BASE_URL + "/" + savedReportingMeasure.getId(), buildParamObject(savedReportingMeasure), ReportingMeasure.class);

        assertThat(updatedReportingMeasure, is(notNullValue()));
        assertThat(updatedReportingMeasure.getBlueprintReferenceType(), is(equalTo(BlueprintReferenceType.AFFINITY_GROUP)));
        assertThat(updatedReportingMeasure.getBlueprintReferenceId(), is(equalTo(this.savedAffinityGroup.getId())));
    }

    @ApiDocExample(rank = 3)
    @Test
    public void testRemoveReportingMeasure() throws InterruptedException {
        final ReportingMeasure savedReportingMeasure1 = callPOSTRestService(BASE_URL, buildParamObject(buildReportingMeasureMap()), ReportingMeasure.class);
        final ReportingMeasure savedReportingMeasure2 = callPOSTRestService(BASE_URL, buildParamObject(buildReportingMeasureMap(BlueprintReferenceType.STANDARD)), ReportingMeasure.class);
        assertThat(this.mongoTemplate.findAll(ReportingMeasure.class).size(), is(equalTo(2)));

        callDeleteRestService(BASE_URL + "/" + savedReportingMeasure2.getId());

        final ReportingMeasure fetchedReportingMeasure1 = callGETRestService(BASE_URL + "/" + savedReportingMeasure1.getId(), ReportingMeasure.class);
        assertThat(fetchedReportingMeasure1, is(notNullValue()));

        final ReportingMeasure fetchedReportingMeasure2 = callGETRestService(BASE_URL + "/" + savedReportingMeasure2.getId(), ReportingMeasure.class);
        assertThat(fetchedReportingMeasure2, is(nullValue()));
    }

    @ApiDocExample(rank = 4)
    @Test
    public void findReportingMeasure() throws InterruptedException {
        final ReportingMeasure savedReportingMeasure1 = callPOSTRestService(BASE_URL, buildParamObject(buildReportingMeasureMap()), ReportingMeasure.class);

        final ReportingMeasure fetchedReportingMeasure = callGETRestService(BASE_URL + "/" + savedReportingMeasure1.getId(), ReportingMeasure.class);
        assertThat(fetchedReportingMeasure, is(notNullValue()));
    }

    @ApiDocExample(rank = 5)
    @SuppressWarnings("unchecked")
    @Test
    public void findReportingMeasures() throws InterruptedException {
        callPOSTRestService(BASE_URL, buildParamObject(buildReportingMeasureMap()), ReportingMeasure.class);

        final SearchResponse<ReportingMeasure> response = callGETRestService(BASE_URL, SearchResponse.class);
        assertThat(response.getSearchResults().size(), is(1));
    }

    @ApiDocExample(rank = -1)
    @SuppressWarnings("unchecked")
    @Test
    public void searchReportingMeasures() {
        callPOSTRestService(BASE_URL, buildReportingMeasureMap(), ReportingMeasure.class);
        callPOSTRestService(BASE_URL, buildReportingMeasureMap(BlueprintReferenceType.TEST), ReportingMeasure.class);
        callPOSTRestService(BASE_URL, buildReportingMeasureMap(BlueprintReferenceType.STANDARD), ReportingMeasure.class);
        callPOSTRestService(BASE_URL, buildReportingMeasureMap(BlueprintReferenceType.AFFINITY_GROUP), ReportingMeasure.class);

        final List<ReportingMeasure> savedReportingMeasures = this.mongoTemplate.findAll(ReportingMeasure.class);
        assertThat(savedReportingMeasures.size(), is(4));

        final Map<String, String> params = Maps.newHashMap();
        params.put("assessmentId", this.savedAssessment.getId());

        SearchResponse<ReportingMeasure> response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getSearchResults().size(), is(4));

        params.clear();
        params.put("assessmentId", "invalid-assessment");
        response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getSearchResults().size(), is(0));

        params.clear();
        params.put("assessmentId", this.savedAssessment.getId());
        params.put("blueprintReferenceId", "invalid-blueprintReferenceId");
        response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getSearchResults().size(), is(0));

        params.clear();
        params.put("assessmentId", this.savedAssessment.getId());
        params.put("blueprintReferenceId", savedReportingMeasures.get(0).getBlueprintReferenceId());
        response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getSearchResults().size(), is(1));

        params.clear();
        response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getReturnCount(), is(4));
        assertThat(response.getSearchResults().size(), is(4));
    }

    private Map<String, Object> buildReportingMeasureMap() {
        return buildReportingMeasureMap(BlueprintReferenceType.SEGMENT);
    }

    private Map<String, Object> buildReportingMeasureMap(final BlueprintReferenceType blueprintReferenceType) {
        final ReportingMeasure reportingMeasure = buildValidReportingMeasure(blueprintReferenceType);
        return buildParamObject(reportingMeasure);
    }

    private ReportingMeasure buildValidReportingMeasure(final BlueprintReferenceType blueprintReferenceType) {
        final ReportingMeasure reportingMeasure = PODAM_FACTORY.manufacturePojo(ReportingMeasure.class);
        reportingMeasure.setId(null);
        reportingMeasure.setAssessmentId(this.savedAssessment.getId());
        reportingMeasure.setBlueprintReferenceType(blueprintReferenceType);
        switch (blueprintReferenceType) {
        case SEGMENT:
            reportingMeasure.setBlueprintReferenceId(this.savedSegment.getId());
            reportingMeasure.setScoringRuleIdList(Lists.newArrayList(this.savedScoringRule.getId()));
            break;
        case AFFINITY_GROUP:
            reportingMeasure.setBlueprintReferenceId(this.savedAffinityGroup.getId());
            reportingMeasure.setScoringRuleIdList(Lists.newArrayList(this.savedAffinityGroupScoringRule.getId()));
            break;
        case STANDARD:
            reportingMeasure.setBlueprintDenotationType(BlueprintDenotationType.STANDARD_KEY);
            reportingMeasure.setBlueprintReferenceId(this.savedBlueprintElement.getId());
            reportingMeasure.setScoringRuleIdList(Lists.newArrayList(this.savedStandardScoringRule.getId()));
            break;
        case TEST:
            reportingMeasure.setBlueprintReferenceId(this.savedAssessment.getId());
            reportingMeasure.setScoringRuleIdList(Lists.newArrayList(this.savedTestScoringRule.getId()));
            break;
        default:
            break;
        }
        return reportingMeasure;
    }

    private ScoringRule buildScoringRule(final BlueprintReferenceType blueprintReferenceType, final int i) {
        final ScoringRule scoringRule = new ScoringRule();
        scoringRule.setAssessmentId(this.savedAssessment.getId());
        scoringRule.setLabel("label" + i);
        scoringRule.setOrder(i);
        scoringRule.setBlueprintReferenceType(blueprintReferenceType);
        switch (blueprintReferenceType) {
        case SEGMENT:
            scoringRule.setBlueprintReferenceId(this.savedSegment.getId());
            break;
        case AFFINITY_GROUP:
            scoringRule.setBlueprintReferenceId(this.savedAffinityGroup.getId());
            break;
        case STANDARD:
            scoringRule.setBlueprintDenotationType(BlueprintDenotationType.STANDARD_KEY);
            scoringRule.setBlueprintReferenceId(this.savedBlueprintElement.getId());
            break;
        case TEST:
            scoringRule.setBlueprintReferenceId(this.savedAssessment.getId());
            break;
        default:
            break;
        }
        scoringRule.setComputationRuleId(this.savedComputationRule.getId());
        scoringRule.setParameters(Lists.newArrayList(new ScoringRuleParameter("parameter1", ComputationRuleMultiplicityType.SCALAR, "soleString")));
        return scoringRule;
    }
}
