/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.integration;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;

import java.util.ArrayList;
import java.util.List;

import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.FixedFormItemLocation;
import org.opentestsystem.authoring.testauth.domain.Item;
import org.opentestsystem.authoring.testauth.domain.ItemGroup;
import org.opentestsystem.authoring.testauth.domain.ItemLocation;
import org.opentestsystem.authoring.testauth.domain.ItemMoveRequest;
import org.opentestsystem.authoring.testauth.domain.ItemMoveResponse;

import com.google.common.collect.ImmutableList;

public class ItemServiceMoverTest extends AbstractAssessmentServiceTest {

    private FixedFormItemLocation getItemLocation(final String itemId, final String partitionId, final String groupId, final int index1, final int index2) {
        final FixedFormItemLocation itemLocation = new FixedFormItemLocation();
        itemLocation.setFormPartitionId(partitionId);
        itemLocation.setItemGroupId(groupId);
        itemLocation.setItemIdentifier(itemId);
        itemLocation.setLevel1SortIndex(index1);
        itemLocation.setLevel2SortIndex(index2);
        return itemLocation;
    }

    @Test
    public void testMoveItemToGroup() {
        String partId = form1Partition11.getId();
        ItemGroup group = addFixedFormItemGroup(savedAssessment, form1Partition11, "GROUP_1");

        ItemGroup group2 = addFixedFormItemGroup(savedAssessment, form1Partition21, "GROUP_2");

        addFixedFormItem(partId, "APIP_001", group.getId());
        addFixedFormItem(partId, "APIP_002", group.getId());
        addFixedFormItem(partId, "APIP_003", group.getId());

        assertNumberOfItemsInPartition(form1Partition11, 3);
        assertNumberOfItemsInGroup(group, 3);
        assertNumberOfItemsInPartition(form1Partition21, 0);
        assertNumberOfItemsInGroup(group2, 0);

        ItemMoveRequest req = new ItemMoveRequest();
        req.setSourceLocationId(form1Partition11.getId());
        req.setSourceGroupId(group.getId());
        req.setTargetLocationId(form1Partition21.getId());
        req.setTargetGroupId(group2.getId());
        req.setItemMetadataIds(ImmutableList.of("APIP_001", "APIP_002", "APIP_003"));

        ItemMoveResponse resp = itemService.moveFormPartitionItems(savedAssessment.getId(), req);

        assertThat(resp.getItemsImpacted(), is(3));
        assertThat(resp.getItemsOmitted(), is(0));

        assertNumberOfItemsInPartition(form1Partition11, 0);
        assertNumberOfItemsInGroup(group, 0);
        assertNumberOfItemsInPartition(form1Partition21, 3);
        assertNumberOfItemsInGroup(group2, 3);

    }

    @Test
    public void testMoveItemToGroupWithDups() {
        String partId = form1Partition11.getId();
        ItemGroup group = addFixedFormItemGroup(savedAssessment, form1Partition11, "GROUP_1");

        String part2Id = form1Partition21.getId();
        ItemGroup group2 = addFixedFormItemGroup(savedAssessment, form1Partition21, "GROUP_2");

        addFixedFormItem(partId, "APIP_001", group.getId());
        addFixedFormItem(partId, "APIP_002", group.getId());
        addFixedFormItem(partId, "APIP_003", group.getId());
        addLocationToItem(savedAssessment, getItemLocation("APIP_001", part2Id, group2.getId(), 0, 0));

        assertNumberOfItemsInPartition(form1Partition11, 3);
        assertNumberOfItemsInGroup(group, 3);
        assertNumberOfItemsInPartition(form1Partition21, 1);
        assertNumberOfItemsInGroup(group2, 1);

        ItemMoveRequest req = new ItemMoveRequest();
        req.setSourceLocationId(form1Partition11.getId());
        req.setSourceGroupId(group.getId());
        req.setTargetLocationId(form1Partition21.getId());
        req.setTargetGroupId(group2.getId());
        req.setItemMetadataIds(ImmutableList.of("APIP_001", "APIP_002", "APIP_003"));

        ItemMoveResponse resp = itemService.moveFormPartitionItems(savedAssessment.getId(), req);

        assertThat(resp.getItemsImpacted(), is(2));
        assertThat(resp.getItemsOmitted(), is(1));

        assertNumberOfItemsInPartition(form1Partition11, 1);
        assertNumberOfItemsInGroup(group, 1);
        assertNumberOfItemsInPartition(form1Partition21, 3);
        assertNumberOfItemsInGroup(group2, 3);

    }

    @Test
    public void testAutoSortedAfterMoveSamePartition() {
        String partId = form1Partition11.getId();
        ItemGroup group = addFixedFormItemGroup(savedAssessment, form1Partition11, "GROUP_1");
        ItemGroup group2 = addFixedFormItemGroup(savedAssessment, form1Partition11, "GROUP_2");

        addFixedFormItem(partId, "APIP_001", Item.NO_GROUP_KEY);
        addLocationToItem(savedAssessment, getItemLocation("APIP_001", partId, group.getId(), 0, 0));

        addFixedFormItem(partId, "APIP_002", Item.NO_GROUP_KEY);
        addLocationToItem(savedAssessment, getItemLocation("APIP_002", partId, group2.getId(), 0, 0));

        addFixedFormItem(partId, "APIP_003", group.getId());
        addLocationToItem(savedAssessment, getItemLocation("APIP_003", partId, group2.getId(), 0, 0));
        addFixedFormItem(partId, "APIP_005", Item.NO_GROUP_KEY);

        List<FixedFormItemLocation> itemsToReposition = new ArrayList<FixedFormItemLocation>();
        itemsToReposition.add(getItemLocation("APIP_003", partId, group.getId(), 1, 1));
        itemsToReposition.add(getItemLocation("APIP_001", partId, group.getId(), 1, 2));
        itemsToReposition.add(getItemLocation("APIP_002", partId, Item.NO_GROUP_KEY, 2, 1));
        itemsToReposition.add(getItemLocation("APIP_005", partId, Item.NO_GROUP_KEY, 3, 1));
        itemsToReposition.add(getItemLocation("APIP_002", partId, group2.getId(), 4, 1));
        itemsToReposition.add(getItemLocation("APIP_003", partId, group2.getId(), 4, 2));
        itemsToReposition.add(getItemLocation("APIP_001", partId, Item.NO_GROUP_KEY, 5, 1));

        List<Item> items = itemService.getItemsByFormPartitionId(form1Partition11.getId());
        itemService.updateItemLocationSortingInformation(form1Partition11.getAssessmentId(), items, itemsToReposition);

        ItemMoveRequest req = new ItemMoveRequest();
        req.setSourceLocationId(partId);
        req.setSourceGroupId(Item.NO_GROUP_KEY);

        req.setTargetLocationId(partId);
        req.setTargetGroupId(group2.getId());
        req.setItemMetadataIds(ImmutableList.of("APIP_005"));

        ItemMoveResponse resp = itemService.moveFormPartitionItems(savedAssessment.getId(), req);

        assertThat(resp.getItemsImpacted(), is(1));
        assertThat(resp.getItemsOmitted(), is(0));

        assertPosition("APIP_003", group.getId(), 1, 1);
        assertPosition("APIP_001", group.getId(), 1, 2);
        assertPosition("APIP_002", Item.NO_GROUP_KEY, 2, 1);

        assertPosition("APIP_002", group2.getId(), 3, 1);
        assertPosition("APIP_003", group2.getId(), 3, 2);
        assertPosition("APIP_005", group2.getId(), 3, 3);

        assertPosition("APIP_001", Item.NO_GROUP_KEY, 4, 1);

    }

    @Test
    public void testRemoveXItems() {
        String partId = form1Partition11.getId();

        ItemGroup group = addFixedFormItemGroup(savedAssessment, form1Partition11, "GROUP_1");
        String part2Id = form1Partition21.getId();

        ItemGroup group2 = addFixedFormItemGroup(savedAssessment, form1Partition21, "GROUP_2");

        addFixedFormItem(partId, "APIP_001", group.getId());
        addLocationToItem(savedAssessment, getItemLocation("APIP_001", part2Id, group2.getId(), 0, 0));

        addFixedFormItem(part2Id, "APIP_002", group2.getId());
        addFixedFormItem(part2Id, "APIP_003", group2.getId());
        addFixedFormItem(part2Id, "APIP_004", group2.getId());

        assertNumberOfItemsInPartition(form1Partition11, 1);
        assertNumberOfItemsInGroup(group, 1);
        assertNumberOfItemsInPartition(form1Partition21, 4);
        assertNumberOfItemsInGroup(group2, 4);

        ItemMoveRequest req = new ItemMoveRequest();
        req.setSourceLocationId(part2Id);
        req.setSourceGroupId(group2.getId());
        req.setItemMetadataIds(ImmutableList.of("APIP_001", "APIP_002", "APIP_003"));

        ItemMoveResponse resp = itemService.removeFormPartitionItems(savedAssessment.getId(), req);

        assertThat(resp.getItemsImpacted(), is(3));
        assertThat(resp.getItemsOmitted(), is(0));

        assertNumberOfItemsInPartition(form1Partition11, 1);
        assertNumberOfItemsInGroup(group, 1);
        assertNumberOfItemsInPartition(form1Partition21, 1);
        assertNumberOfItemsInGroup(group2, 1);

    }

    @Test
    public void testReindexAfterRemoveItems() {
        String partId = form1Partition11.getId();
        ItemGroup group = addFixedFormItemGroup(savedAssessment, form1Partition11, "GROUP_1");
        ItemGroup group2 = addFixedFormItemGroup(savedAssessment, form1Partition11, "GROUP_2");

        addFixedFormItem(partId, "APIP_001", Item.NO_GROUP_KEY);
        addLocationToItem(savedAssessment, getItemLocation("APIP_001", partId, group.getId(), 0, 0));

        addFixedFormItem(partId, "APIP_002", Item.NO_GROUP_KEY);
        addLocationToItem(savedAssessment, getItemLocation("APIP_002", partId, group2.getId(), 0, 0));

        addFixedFormItem(partId, "APIP_003", group.getId());
        addLocationToItem(savedAssessment, getItemLocation("APIP_003", partId, group2.getId(), 0, 0));

        addFixedFormItem(partId, "APIP_005", Item.NO_GROUP_KEY);

        List<FixedFormItemLocation> itemsToReposition = new ArrayList<FixedFormItemLocation>();
        itemsToReposition.add(getItemLocation("APIP_003", partId, group.getId(), 1, 1));
        itemsToReposition.add(getItemLocation("APIP_001", partId, group.getId(), 1, 2));
        itemsToReposition.add(getItemLocation("APIP_002", partId, Item.NO_GROUP_KEY, 2, 1));
        itemsToReposition.add(getItemLocation("APIP_005", partId, Item.NO_GROUP_KEY, 3, 1));
        itemsToReposition.add(getItemLocation("APIP_002", partId, group2.getId(), 4, 1));
        itemsToReposition.add(getItemLocation("APIP_003", partId, group2.getId(), 4, 2));
        itemsToReposition.add(getItemLocation("APIP_001", partId, Item.NO_GROUP_KEY, 5, 1));

        List<Item> items = itemService.getItemsByFormPartitionId(form1Partition11.getId());
        itemService.updateItemLocationSortingInformation(form1Partition11.getAssessmentId(), items, itemsToReposition);

        ItemMoveRequest req = new ItemMoveRequest();
        req.setSourceLocationId(partId);
        req.setSourceGroupId(Item.NO_GROUP_KEY);
        req.setItemMetadataIds(ImmutableList.of("APIP_002", "APIP_005"));

        itemService.removeFormPartitionItems(savedAssessment.getId(), req);

        assertPosition("APIP_003", group.getId(), 1, 1);
        assertPosition("APIP_001", group.getId(), 1, 2);
        assertPosition("APIP_002", group2.getId(), 2, 1);
        assertPosition("APIP_003", group2.getId(), 2, 2);
        assertPosition("APIP_001", Item.NO_GROUP_KEY, 3, 1);

    }

    private void assertPosition(final String itemId, final String groupId, final int index1, final int index2) {
        ItemLocation loc = getItemLocation(itemId, groupId);
        assertThat("index 1 is off", loc.getLevel1SortIndex(), is(index1));
        assertThat("index 2 is off", loc.getLevel2SortIndex(), is(index2));
    }

}
