/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.integration;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.junit.Before;
import org.opentestsystem.authoring.testauth.domain.AdaptiveItemLocation;
import org.opentestsystem.authoring.testauth.domain.AffinityGroup;
import org.opentestsystem.authoring.testauth.domain.AffinityGroupItemLocation;
import org.opentestsystem.authoring.testauth.domain.Assessment;
import org.opentestsystem.authoring.testauth.domain.DomainFactory;
import org.opentestsystem.authoring.testauth.domain.FixedFormItemLocation;
import org.opentestsystem.authoring.testauth.domain.Form;
import org.opentestsystem.authoring.testauth.domain.FormPartition;
import org.opentestsystem.authoring.testauth.domain.Item;
import org.opentestsystem.authoring.testauth.domain.ItemGroup;
import org.opentestsystem.authoring.testauth.domain.ItemGroupLocationType;
import org.opentestsystem.authoring.testauth.domain.ItemLocation;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionAlgorithm;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionAlgorithmType;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionPurpose;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionType;
import org.opentestsystem.authoring.testauth.domain.Publication;
import org.opentestsystem.authoring.testauth.domain.Segment;
import org.opentestsystem.authoring.testauth.domain.Subject;
import org.opentestsystem.authoring.testauth.persistence.AffinityGroupRepository;
import org.opentestsystem.authoring.testauth.persistence.AssessmentRepository;
import org.opentestsystem.authoring.testauth.rest.AbstractRestEmbeddedMongoTest;
import org.opentestsystem.authoring.testauth.service.AffinityGroupService;
import org.opentestsystem.authoring.testauth.service.AssessmentService;
import org.opentestsystem.authoring.testauth.service.FormPartitionService;
import org.opentestsystem.authoring.testauth.service.FormService;
import org.opentestsystem.authoring.testauth.service.ItemGroupService;
import org.opentestsystem.authoring.testauth.service.ItemSelectionAlgorithmService;
import org.opentestsystem.authoring.testauth.service.ItemService;
import org.opentestsystem.authoring.testauth.service.PublicationService;
import org.opentestsystem.authoring.testauth.service.SegmentService;
import org.opentestsystem.authoring.testauth.service.SubjectService;
import org.springframework.beans.factory.annotation.Autowired;

public abstract class AbstractAssessmentServiceTest extends AbstractRestEmbeddedMongoTest {

    @Autowired
    protected AssessmentRepository assessmentRepository;

    @Autowired
    protected ItemService itemService;

    @Autowired
    protected ItemGroupService itemGroupService;

    @Autowired
    protected AffinityGroupService affinityGroupService;

    @Autowired
    protected AffinityGroupRepository affinityGroupRepository;

    @Autowired
    protected PublicationService publicationService;

    @Autowired
    protected SubjectService subjectService;

    @Autowired
    protected AssessmentService assessmentService;

    @Autowired
    protected ItemSelectionAlgorithmService itemSelectionAlgorithmService;

    @Autowired
    protected SegmentService segmentService;

    @Autowired
    protected FormPartitionService formPartitionService;

    @Autowired
    protected FormService formService;

    protected Assessment savedAssessment;
    protected Segment savedAdaptiveSegment, savedAdaptiveSegment2;
    protected Segment savedFixedSegment, savedFixedSegment2;
    protected Segment savedFieldTestSegment, savedFieldTestSegment2;

    protected Form form1;
    protected FormPartition form1Partition11, form1Partition12, form1Partition21;

    protected Form form2;

    protected ItemSelectionAlgorithm savedAdaptiveAlgorithm;
    protected ItemSelectionAlgorithm savedFixedAlgorithm;
    protected ItemSelectionAlgorithm savedFieldTestAlgorithm;

    public static final String PUBLICATION_V1 = "EDDIE_LACY-J1-V1";
    public static final String PUBLICATION_V2 = "EDDIE_LACY-J1-V2";

    public static final String STANDARD_V1 = "EDDIE_LACY-J1-V1:JORDY_NELSON";
    public static final String STANDARD_V2 = "EDDIE_LACY-J1-V2:RANDALL_COBB";

    @Before
    public void setupTestData() {

        final Subject savedSubject = this.subjectService.saveSubject(DomainFactory.manufactureValidSubject("abb"));
        Publication pub = PODAM_FACTORY.manufacturePojo(Publication.class);
        Set<Subject> subjects = new HashSet<Subject>();
        subjects.add(savedSubject);
        pub.setSubjects(subjects);
        pub.setCoreStandardsPublicationKey(PUBLICATION_V1);

        final Publication savedPublication = this.publicationService.savePublication(pub);

        final ItemSelectionAlgorithm algorithm = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.BOOLEAN);
        algorithm.setItemSelectionAlgorithmType(ItemSelectionAlgorithmType.ADAPTIVE);
        this.savedAdaptiveAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithm);

        final ItemSelectionAlgorithm fixedAlgorithm = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.BOOLEAN);
        fixedAlgorithm.setItemSelectionAlgorithmType(ItemSelectionAlgorithmType.FIXEDFORM);
        this.savedFixedAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(fixedAlgorithm);

        final ItemSelectionAlgorithm fieldTestAlgorithm = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.BOOLEAN);
        fieldTestAlgorithm.setItemSelectionAlgorithmType(ItemSelectionAlgorithmType.FIELDTEST);
        this.savedFieldTestAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(fieldTestAlgorithm);

        Assessment ass = DomainFactory.manufactureValidAssessment(savedSubject, savedPublication);
        ass.setSubject(savedSubject);
        this.savedAssessment = this.assessmentService.saveAssessment(ass);

        this.savedAdaptiveSegment = this.segmentService.createSegment(DomainFactory.manufactureValidSegment(this.savedAssessment.getId(), this.savedAdaptiveAlgorithm, 1));
        this.savedAdaptiveSegment2 = this.segmentService.createSegment(DomainFactory.manufactureValidSegment(this.savedAssessment.getId(), this.savedAdaptiveAlgorithm, 2));

        this.savedFixedSegment = this.segmentService.createSegment(DomainFactory.manufactureValidSegment(this.savedAssessment.getId(), this.savedFixedAlgorithm, 3));
        this.savedFixedSegment2 = this.segmentService.createSegment(DomainFactory.manufactureValidSegment(this.savedAssessment.getId(), this.savedFixedAlgorithm, 4));

        this.savedFieldTestSegment = this.segmentService.createSegment(DomainFactory.manufactureValidSegment(this.savedAssessment.getId(), this.savedFieldTestAlgorithm, 5));
        this.savedFieldTestSegment2 = this.segmentService.createSegment(DomainFactory.manufactureValidSegment(this.savedAssessment.getId(), this.savedFieldTestAlgorithm, 6));

        final Form formToSave = new Form();
        formToSave.setId(null);
        formToSave.setName("form1");
        formToSave.setLanguage("foo");
        formToSave.setAssessmentId(this.savedAssessment.getId());
        this.form1 = this.formService.saveForm(null, formToSave);

        final Form formToSave2 = new Form();
        formToSave2.setId(null);
        formToSave2.setName("form2");
        formToSave2.setLanguage("foo");
        formToSave2.setAssessmentId(this.savedAssessment.getId());
        this.form2 = this.formService.saveForm(null, formToSave2);

        final FormPartition form1PartitionToSave11 = buildValidFormPartition(this.savedAssessment.getId(), "form1-part1", this.form1.getId(), this.savedFixedSegment.getId());
        final FormPartition form1PartitionToSave12 = buildValidFormPartition(this.savedAssessment.getId(), "form1-part2", this.form1.getId(), this.savedFixedSegment2.getId());
        this.form1Partition11 = this.formPartitionService.saveFormPartition(null, form1PartitionToSave11);
        this.form1Partition12 = this.formPartitionService.saveFormPartition(null, form1PartitionToSave12);
        final FormPartition form1PartitionToSave21 = buildValidFormPartition(this.savedAssessment.getId(), "form2-part1", this.form2.getId(), this.savedFixedSegment.getId());
        final FormPartition form1PartitionToSave22 = buildValidFormPartition(this.savedAssessment.getId(), "form2-part2", this.form2.getId(), this.savedFixedSegment2.getId());
        this.form1Partition21 = this.formPartitionService.saveFormPartition(null, form1PartitionToSave21);
        this.formPartitionService.saveFormPartition(null, form1PartitionToSave22);
    }

    protected FormPartition buildValidFormPartition(final String assessmentId, final String name, final String formId, final String segmentId) {
        final FormPartition formPartition = new FormPartition();
        formPartition.setId(null);
        formPartition.setFormId(formId);
        formPartition.setSegmentId(segmentId);
        formPartition.setSegment(null);
        formPartition.setForm(null);
        formPartition.setName(name);
        formPartition.setAssessmentId(assessmentId);
        return formPartition;
    }

    protected ItemGroup addAdaptiveItemGroup(final Assessment ass, final Segment segment, final String name) {
        ItemGroup itemGroup = new ItemGroup();
        itemGroup.setId(null);
        itemGroup.setAssessmentId(ass.getId());
        itemGroup.setLocationType(ItemGroupLocationType.SEGMENT);
        itemGroup.setLocationId(segment.getId());
        itemGroup.setFormPartition(null);
        itemGroup.setSegment(null);
        itemGroup.setMaxResponses(1);
        itemGroup.setMaxitems(3);
        itemGroup.setGroupName(name);
        itemGroup = this.itemGroupService.saveItemGroup(itemGroup);
        assertThat(itemGroup, is(not(nullValue())));
        return itemGroup;
    }

    protected ItemGroup addFixedFormItemGroup(final Assessment ass, final FormPartition partition, final String name) {
        ItemGroup itemGroup = new ItemGroup();
        itemGroup.setId(null);
        itemGroup.setAssessmentId(ass.getId());
        itemGroup.setLocationType(ItemGroupLocationType.FORM_PARTITION);
        itemGroup.setLocationId(partition.getId());
        itemGroup.setMaxResponses(1);
        itemGroup.setMaxitems(3);
        itemGroup.setGroupName(name);

        itemGroup = this.itemGroupService.saveItemGroup(itemGroup);
        assertThat(itemGroup, is(not(nullValue())));
        return itemGroup;
    }

    protected AffinityGroup addAffinityGroup(final Assessment ass, final String name) {
        AffinityGroup affinityGroup = DomainFactory.manufactureValidAffinityGroup(ass.getId());
        affinityGroup.setId(null);
        affinityGroup.setAssessmentId(ass.getId());
        affinityGroup.setGroupName(name);
        affinityGroup.setAffinityGroupValueMap(null); // will be populated by service

        affinityGroup = this.affinityGroupService.saveNewAffinityGroup(affinityGroup);
        assertThat(affinityGroup, is(not(nullValue())));
        return affinityGroup;
    }

    protected Item addFixedFormItem(final String partitionId, final String metadataId, final String itemGroupId, final String passageId) {
        final FixedFormItemLocation itemLocation = new FixedFormItemLocation();
        itemLocation.setFormPartitionId(partitionId);
        itemLocation.setItemGroupId(itemGroupId);
        itemLocation.setItemIdentifier(metadataId);
        return addItem(itemLocation, metadataId, passageId);
    }

    protected Item addFixedFormItem(final String partitionId, final String metadataId, final String itemGroupId) {
        return addFixedFormItem(partitionId, metadataId, itemGroupId, null);
    }

    protected Item addAdaptiveItem(final String segmentId, final String metadataId, final String itemGroupId) {
        return addAdaptiveItem(segmentId, metadataId, itemGroupId, null);
    }

    protected Item addAdaptiveItem(final String segmentId, final String metadataId, final String itemGroupId, final String passageId) {
        final AdaptiveItemLocation itemLocation = new AdaptiveItemLocation();
        itemLocation.setSegmentId(segmentId);
        itemLocation.setItemGroupId(itemGroupId);
        return addItem(itemLocation, metadataId, passageId);
    }

    protected Item addItem(final ItemLocation location, final String tibIdentifier, final String passageId) {
        Item item = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        item.setId(null);
        item.setTibIdentifier(tibIdentifier);
        item.setAssessmentId(this.savedAssessment.getId());
        item.setItemLocation(null);
        item.setAssociatedStimulus(passageId);

        item.setItemLocation(new ArrayList<ItemLocation>());
        item.getItemLocation().add(location);

        item = this.itemService.saveItem(item);
        assertThat(item, is(not(nullValue())));
        return item;
    }

    protected void addAdaptiveLocation(final Item i, final String segmentId, final String groupId) {
        final AdaptiveItemLocation location = new AdaptiveItemLocation();
        location.setSegmentId(segmentId);
        location.setItemGroupId(groupId);

        if (i.getItemLocation() == null) {
            i.setItemLocation(new ArrayList<ItemLocation>(1));
        }
        i.getItemLocation().add(location);
    }

    protected void addFixedFormLocation(final Item i, final String partitionId, final String groupId) {
        final FixedFormItemLocation location = new FixedFormItemLocation();
        location.setFormPartitionId(partitionId);
        location.setItemGroupId(groupId);

        if (i.getItemLocation() == null) {
            i.setItemLocation(new ArrayList<ItemLocation>());
        }
        i.getItemLocation().add(location);
    }

    protected void addAffinityGroupLocation(final Item i, final String affinityGroupId) {
        final AffinityGroupItemLocation location = new AffinityGroupItemLocation();
        location.setAffinityGroupId(affinityGroupId);

        if (i.getItemLocation() == null) {
            i.setItemLocation(new ArrayList<ItemLocation>());
        }
        i.getItemLocation().add(location);
    }

    protected static final String PASSAGE_ID_KEY = "stimulusId";

    protected void assertNumberOfItemsInSegment(final Segment segment, final int expectedItems) {
        final List<Item> items = this.itemService.getItemsBySegmentId(segment.getId());
        assertThat(items.size(), is(expectedItems));
    }

    protected void assertNumberOfItemsInAffinityGroup(final AffinityGroup affinityGroup, final int expectedItems) {
        final List<Item> items = this.itemService.getItemsByAffinityGroupId(affinityGroup.getId());
        assertThat(items.size(), is(expectedItems));
    }

    protected void assertNumberOfItemsInPartition(final FormPartition partition, final int expectedItems) {
        final List<Item> items = this.itemService.getItemsByFormPartitionId(partition.getId());
        assertThat(items.size(), is(expectedItems));
    }

    protected void assertNumberOfItemsInGroup(final ItemGroup grp, final int expectedItems) {
        final List<Item> items = this.itemService.getItemsByItemGroupId(grp.getId());
        assertThat(items.size(), is(expectedItems));
    }

    protected void assertNumberOfItemGroupsInSegment(final Segment segment, final int expectedItemGroups) {
        final List<ItemGroup> groups = this.itemGroupService.getItemGroupsBySegment(segment.getId());
        assertThat(groups.size(), is(expectedItemGroups));
    }

    protected void assertNumberOfItemGroupsInFormPartition(final FormPartition partition, final int expectedItemGroups) {
        final List<ItemGroup> groups = this.itemGroupService.getItemGroupsFormPartition(partition.getId());
        assertThat(groups.size(), is(expectedItemGroups));
    }

    protected void assertNumberOfAffinityGroupsInAssessment(final Assessment assessment, final int expectedAffinityGroups) {
        final List<AffinityGroup> groups = this.affinityGroupService.getAffinityGroupsByAssessment(assessment.getId());
        assertThat(groups.size(), is(expectedAffinityGroups));
    }

    protected ItemLocation getItemLocation(final String tibIdentifier, final String groupId) {
        final Item i = this.itemService.getItemByAssessmentIdAndTibIdentifier(this.savedAssessment.getId(), tibIdentifier);
        ItemLocation l = null;
        for (final ItemLocation location : i.getItemLocation()) {
            if (this.form1Partition11.getId().equals(location.getFormPartitionId())
                    && groupId.equals(location.getItemGroupId())) {
                l = location;
                break;
            }
        }
        return l;
    }

    protected void addLocationToItem(final Assessment ass, final ItemLocation location) {
        final Item i = this.itemService.getItemByAssessmentIdAndTibIdentifier(ass.getId(), location.getItemIdentifier());
        i.addItemLocation(location);
        this.itemService.saveItem(i);
    }

}
