/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.rest;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;

import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.Assessment;
import org.opentestsystem.authoring.testauth.domain.BlueprintReferenceType;
import org.opentestsystem.authoring.testauth.domain.DomainFactory;
import org.opentestsystem.authoring.testauth.domain.PerformanceLevel;
import org.opentestsystem.authoring.testauth.domain.Publication;
import org.opentestsystem.authoring.testauth.domain.Subject;
import org.opentestsystem.authoring.testauth.service.AssessmentService;
import org.opentestsystem.authoring.testauth.service.PerformanceLevelService;
import org.opentestsystem.authoring.testauth.service.PublicationService;
import org.opentestsystem.authoring.testauth.service.SubjectService;
import org.opentestsystem.shared.docs.annotation.ApiDocExample;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.Maps;
import com.google.common.collect.Sets;

public class PerformanceLevelControllerTest extends AbstractRestEmbeddedMongoTest {

    private static final String BASE_URL = "/performanceLevel";

    @Autowired
    private PublicationService publicationService;

    @Autowired
    private SubjectService subjectService;

    @Autowired
    private AssessmentService assessmentService;

    @Autowired
    private PerformanceLevelService performanceLevelService;

    private Subject savedSubject;
    private Publication savedPublication;
    private Assessment savedAssessment;
    private PerformanceLevel savedPerformanceLevel;

    @ApiDocExample(rank = -1)
    @Before
    public void setupTestData() {
        this.savedSubject = this.subjectService.saveSubject(DomainFactory.manufactureValidSubject("ABB"));
        final Publication publication = PODAM_FACTORY.manufacturePojo(Publication.class);
        publication.setId(null);
        publication.setSubjectIds(Sets.newHashSet(this.savedSubject.getId()));
        this.savedPublication = this.publicationService.savePublication(publication);
        this.savedAssessment = this.assessmentService.saveAssessment(DomainFactory.manufactureValidAssessment(this.savedSubject, this.savedPublication));

        final PerformanceLevel levelToSave = DomainFactory.manufactureValidPerformanceLevel(this.savedAssessment.getId());
        this.savedPerformanceLevel = this.performanceLevelService.savePerformanceLevel(null, levelToSave);
    }

    @ApiDocExample(rank = 1)
    @Test
    public void savePerformanceLevel() throws InterruptedException {
        assertThat(this.mongoTemplate.findAll(PerformanceLevel.class).size(), is(equalTo(1)));
        assertThat(this.savedPerformanceLevel, is(notNullValue()));
    }

    @ApiDocExample(rank = 2)
    @Test
    public void updatePerformanceLevel() throws InterruptedException {
        assertThat(this.savedPerformanceLevel, is(notNullValue()));
        this.savedPerformanceLevel.getPerformanceLevelValues().get(0).setScaledLo("10");
        this.savedPerformanceLevel.getPerformanceLevelValues().get(0).setScaledHi("20");
        final PerformanceLevel updatedPerformanceLevel = callPUTRestService(BASE_URL + "/" + this.savedPerformanceLevel.getId(), buildParamObject(this.savedPerformanceLevel), PerformanceLevel.class);
        assertThat(updatedPerformanceLevel, is(notNullValue()));
        assertThat(updatedPerformanceLevel.getPerformanceLevelValues().get(0).getScaledLo(), is(equalTo("10")));
        assertThat(updatedPerformanceLevel.getPerformanceLevelValues().get(0).getScaledHi(), is(equalTo("20")));
    }

    @ApiDocExample(rank = 3)
    @Test
    public void testRemovePerformanceLevel() throws InterruptedException {
        final Map<String, Object> performanceLevel = buildPerformanceLevelMap(2);
        final PerformanceLevel savedPerformanceLevel2 = callPOSTRestService(BASE_URL, performanceLevel, PerformanceLevel.class);
        assertThat(savedPerformanceLevel2, is(notNullValue()));
        assertThat(this.mongoTemplate.findAll(PerformanceLevel.class).size(), is(equalTo(2)));

        callDeleteRestService(BASE_URL + "/" + this.savedPerformanceLevel.getId());

        final PerformanceLevel fetchedPerformanceLevel = callGETRestService(BASE_URL + "/" + this.savedPerformanceLevel.getId(), PerformanceLevel.class);
        assertThat(fetchedPerformanceLevel, is(nullValue()));

        final PerformanceLevel fetchedPerformanceLevel2 = callGETRestService(BASE_URL + "/" + savedPerformanceLevel2.getId(), PerformanceLevel.class);
        assertThat(fetchedPerformanceLevel2, is(notNullValue()));
    }

    @ApiDocExample(rank = 4)
    @Test
    public void findPerformanceLevel() throws InterruptedException {
        final PerformanceLevel fetchedPerformanceLevel = callGETRestService(BASE_URL + "/" + this.savedPerformanceLevel.getId(), PerformanceLevel.class);
        assertThat(fetchedPerformanceLevel, is(notNullValue()));
    }

    @ApiDocExample(rank = 5)
    @SuppressWarnings("unchecked")
    @Test
    public void findPerformanceLevels() throws InterruptedException {
        final SearchResponse<PerformanceLevel> response = callGETRestService(BASE_URL, SearchResponse.class);
        assertThat(response.getSearchResults().size(), is(1));
    }

    @ApiDocExample(rank = -1)
    @SuppressWarnings("unchecked")
    @Test
    public void searchPerformanceLevels() {
        for (int i = 2; i < 11; i++) {
            callPOSTRestService(BASE_URL, buildPerformanceLevelMap(i), PerformanceLevel.class);
        }

        final List<PerformanceLevel> savedPerformanceLevels = this.mongoTemplate.findAll(PerformanceLevel.class);
        assertThat(savedPerformanceLevels.size(), is(10));

        final Map<String, String> params = Maps.newHashMap();
        params.put("blueprintReferenceId", savedPerformanceLevels.get(9).getBlueprintReferenceId());

        SearchResponse<PerformanceLevel> response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getReturnCount(), is(1));
        assertThat(response.getSearchResults().size(), is(1));

        params.clear();
        params.put("blueprintReferenceId", savedPerformanceLevels.get(3).getBlueprintReferenceId());
        response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getReturnCount(), is(1));
        assertThat(response.getSearchResults().size(), is(1));

        params.clear();
        params.put("blueprintReferenceId", "invalid-id");
        response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getReturnCount(), is(0));
        assertThat(response.getSearchResults().size(), is(0));

        params.clear();
        response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getReturnCount(), is(10));
        assertThat(response.getSearchResults().size(), is(10));
    }

    private Map<String, Object> buildPerformanceLevelMap(final int uniqueId) {
        final Assessment newAssessment = this.assessmentService.saveAssessment(DomainFactory.manufactureValidAssessment(this.savedSubject, this.savedPublication));

        final PerformanceLevel performanceLevel = DomainFactory.manufactureValidPerformanceLevel(newAssessment.getId());
        performanceLevel.setBlueprintReferenceType(BlueprintReferenceType.TEST);
        performanceLevel.setBlueprintReferenceId(newAssessment.getId());
        return buildParamObject(performanceLevel);
    }
}
