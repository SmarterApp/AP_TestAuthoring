/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.service.impl;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.authoring.testauth.config.TestAuthUtil;
import org.opentestsystem.authoring.testauth.domain.Enemy;
import org.opentestsystem.authoring.testauth.domain.Item;
import org.opentestsystem.authoring.testauth.domain.ItemLocation;
import org.opentestsystem.authoring.testauth.domain.ItemScoreDimension;
import org.opentestsystem.authoring.testauth.domain.ItemScoreParameter;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionAlgorithmType;
import org.opentestsystem.authoring.testauth.domain.Segment;
import org.opentestsystem.authoring.testitembank.client.TibItemScoreDimension;
import org.opentestsystem.authoring.testitembank.client.TibItemScoreParameter;

import com.google.common.base.Function;
import com.google.common.base.Predicate;
import com.google.common.collect.ComparisonChain;
import com.google.common.collect.Ordering;

public final class ItemHelper {

    private ItemHelper() {
        // do not instantiate
    }

    protected static final Predicate<Item> ITEM_ELEMENT_FILTER_REMOVE = new Predicate<Item>() {
        @Override
        public boolean apply(final Item item) {
            return item != null && item.getId() != null && item.getVersion() == null;
        }
    };

    public static final Predicate<Segment> FT_OR_ADAPTIVE_SEGMENT_FILTER = new Predicate<Segment>() {
        @Override
        public boolean apply(final Segment segment) {
            return ItemSelectionAlgorithmType.ADAPTIVE.equals(segment.getItemSelectionAlgorithm().getItemSelectionAlgorithmType())
                    || ItemSelectionAlgorithmType.FIELDTEST.equals(segment.getItemSelectionAlgorithm().getItemSelectionAlgorithmType());
        }
    };

    protected static final class ITEM_STANDARD_KEY_AND_GRADE_FILTER implements Predicate<Item> {
        private final String targetParentStandardKey;
        private final String targetGrade;

        public static ITEM_STANDARD_KEY_AND_GRADE_FILTER getInstance(final String targetParentStandardKey, final String targetGrade) {
            return new ITEM_STANDARD_KEY_AND_GRADE_FILTER(targetParentStandardKey, targetGrade);
        }

        private ITEM_STANDARD_KEY_AND_GRADE_FILTER(final String aTargetParentStandardKey, final String aTargetGrade) {
            this.targetParentStandardKey = aTargetParentStandardKey;
            this.targetGrade = aTargetGrade;
        }

        @Override
        public boolean apply(final Item item) {
            boolean isStandardMatch = false;
            if (StringUtils.isNotBlank(item.getPrimaryStandard())
                && item.getPrimaryStandard().contains(this.targetParentStandardKey)) {

                isStandardMatch = true;
            }
            return isStandardMatch && item.getIntendedGrade().equals(this.targetGrade);
        }
    };

    protected static final Ordering<ItemLocation> LOCATION_ORDER = new Ordering<ItemLocation>() {
        @Override
        public int compare(final ItemLocation left, final ItemLocation right) {
            return ComparisonChain.start()
                    .compare(left.getLevel1SortIndex(), right.getLevel1SortIndex())
                    .compare(left.getLevel2SortIndex(), right.getLevel2SortIndex())
                    .result();
        }
    };

    protected static final Function<Enemy, String> ENEMY_ID_TRANSFORMER = new Function<Enemy, String>() {
        @Override
        public String apply(final Enemy enemy) {
            return enemy.getId();
        }
    };

    protected static final Function<Enemy, String> ENEMY_PAIRING_TRANSFORMER = new Function<Enemy, String>() {
        @Override
        public String apply(final Enemy enemy) {
            return enemy.getObjectId1() + "|" + enemy.getObjectId2();
        }
    };

    protected static final Function<Item, String> ITEM_TIB_IDENTIFIER_TRANSFORMER = new Function<Item, String>() {
        @Override
        public String apply(final Item item) {
            return item.getTibIdentifier();
        }
    };

    protected static final Function<TibItemScoreDimension, ItemScoreDimension> TIB_IRT_DIMENSION_TRANSFORMER = new Function<TibItemScoreDimension, ItemScoreDimension>() {
        @Override
        public ItemScoreDimension apply(final TibItemScoreDimension tibItemScoreDimension) {
            return new ItemScoreDimension(tibItemScoreDimension.getIrtModelType(), tibItemScoreDimension.getIrtScore(), tibItemScoreDimension.getIrtDimensionPurpose(),
                    tibItemScoreDimension.getIrtWeight(), tibItemScoreDimension.getIrtStatDomain (), TestAuthUtil.nullsafeListTransform(tibItemScoreDimension.getItemScoreParameterList(), TIB_IRT_DIMENSION_PARAM_TRANSFORMER));
        }
    };

    private static final Function<TibItemScoreParameter, ItemScoreParameter> TIB_IRT_DIMENSION_PARAM_TRANSFORMER = new Function<TibItemScoreParameter, ItemScoreParameter>() {
        @Override
        public ItemScoreParameter apply(final TibItemScoreParameter tibItemScoreParameter) {
            return new ItemScoreParameter(tibItemScoreParameter.getName(), tibItemScoreParameter.getValue());
        }
    };
}
