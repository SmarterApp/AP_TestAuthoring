/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.rest;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.authoring.testauth.domain.Assessment;
import org.opentestsystem.authoring.testauth.domain.AssessmentType;
import org.opentestsystem.authoring.testauth.domain.ItemCountSummary;
import org.opentestsystem.authoring.testauth.service.AssessmentService;
import org.opentestsystem.authoring.testauth.service.ItemService;
import org.opentestsystem.shared.exception.LocalizedException;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.opentestsystem.shared.web.AbstractRestController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.access.annotation.Secured;
import org.springframework.security.access.prepost.PostAuthorize;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * Used to retrieve test specifications
 */
@Controller
public class AssessmentController extends AbstractRestController {

    @Autowired
    private AssessmentService assessmentService;

    @Autowired
    private ItemService itemService;

    @Autowired
    private ObjectMapper objectMapper;
    
    @Value("${testauth.itembank}")
    private String itemBank;
    
    @Value("${testauth.client}")
    private String client;

    @RequestMapping(value = "/assessment/type", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Test Read" })
    // NOTE: there is intentionally no @PreAuthorize annotation. Types not tenanted.
    @ResponseBody
    public List<AssessmentType> getAssesmentTypes() {
        return Arrays.asList(AssessmentType.values());
    }

    /**
     * Gets assessmentService by assessmentId.
     * 
     * @param assessment id.
     * @return assessment object.
     */

    @RequestMapping(value = "/assessment/{assessmentId}", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Test Read" })
    @PostAuthorize("hasPermission(returnObject, 'ROLE_Test Read')")
    @ResponseBody
    public Assessment findAssessmentById(@PathVariable final String assessmentId) {
        return this.assessmentService.getAssessment(assessmentId);
    }

    /**
     * Creates assessment with initial segment.
     * 
     * @param assessment to be saved.
     * @param response HttpServletResponse.
     * @return assessment newly created assessment object.
     */
    @ResponseStatus(HttpStatus.CREATED)
    @RequestMapping(value = "/assessment", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Test Modify" })
    @PreAuthorize("hasPermission(#assessment, 'ROLE_Test Modify')")
    @ResponseBody
    public Assessment saveAssessment(@RequestBody @Valid final Assessment assessment, final HttpServletResponse response) {
      if (StringUtils.isBlank (assessment.getItemBank ()))
          assessment.setItemBank (this.itemBank);
      if (StringUtils.isBlank (assessment.getClient ()))
        assessment.setClient (this.client);
      return this.assessmentService.saveAssessment(assessment);
    }

    /**
     * Copies an existing assessment into a new assessment
     * 
     * @param assessment to be saved.
     * @param response HttpServletResponse.
     * @return assessment newly created assessment object.
     */
    @ResponseStatus(HttpStatus.CREATED)
    @RequestMapping(value = "/assessment/{assessmentId}", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Test Modify" })
    @PreAuthorize("hasPermission(#assessmentId, 'assessment', 'ROLE_Test Modify')")
    @ResponseBody
    public Assessment copyAssessment(@PathVariable final String assessmentId, final HttpServletResponse response) {
        return this.assessmentService.copyAssessment(assessmentId);
    }

    /**
     * Updates assessment.
     * 
     * @param assessment to be saved.
     * @param response HttpServletResponse.
     * @return assessment updated assessment object.
     */
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "/assessment/{assessmentId}", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Test Modify" })
    @PreAuthorize("hasPermission(#assessment, 'ROLE_Test Modify')")
    @ResponseBody
    public Assessment updateAssessment(@PathVariable final String assessmentId, @RequestBody @Valid final Assessment assessment, final HttpServletResponse response) {
        if (!StringUtils.equals(assessmentId, assessment.getId())) {
            throw new LocalizedException("assessment.invalid.id");
        }
        return this.assessmentService.updateAssessment(assessment);
    }

    /**
     * Removes assessment.
     * 
     * @param assessmentId assessment Id.
     */
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @RequestMapping(value = "/assessment/{assessmentId}", method = RequestMethod.DELETE)
    @Secured({ "ROLE_Test Modify" })
    @PreAuthorize("hasPermission(#assessmentId, 'assessment', 'ROLE_Test Modify')")
    public void removeAssessmentById(@PathVariable final String assessmentId) {
        this.assessmentService.removeAssessment(assessmentId);
    }

    @RequestMapping(value = "/assessment", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Test Read" })
    @PostAuthorize("hasPermission(returnObject, 'ROLE_Test Read')")
    @ResponseBody
    public SearchResponse<Assessment> searchAssessment(final HttpServletRequest request, final HttpServletResponse response) {
        return this.assessmentService.searchAssessments(request.getParameterMap());
    }

    @RequestMapping(value = "/assessment/{assessmentId}/affinityGroupItemCounts", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Pool Read" })
    @ResponseBody
    public Map<String, Map<String, ItemCountSummary>> getAffinityGroupItemCounts(@PathVariable final String assessmentId, final HttpServletResponse response) {
        return this.itemService.getAffinityGroupItemCountsByAssessment(assessmentId);
    }

}
