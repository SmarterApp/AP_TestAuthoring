/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.integration;

import static org.hamcrest.CoreMatchers.containsString;
import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.Assert.fail;

import java.util.List;

import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.FormPartition;
import org.opentestsystem.authoring.testauth.persistence.FormPartitionRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DuplicateKeyException;

public class FormPartitionRepositoryTest extends AbstractAssessmentServiceTest {

    @Autowired
    private FormPartitionRepository formPartitionRepository;

    @Test
    public void saveFormPartitionTest() {
        final FormPartition formPartition = manufactureValidFormPartitionPojo("1");
        final FormPartition savedFormPartition = this.formPartitionRepository.save(formPartition);
        assertThat(savedFormPartition, is(notNullValue()));
        assertThat(savedFormPartition.getId(), is(notNullValue()));
    }

    @Test
    public void saveDuplicateFormPartitionNameTest() {
        final FormPartition formPartition = manufactureValidFormPartitionPojo("1");
        this.formPartitionRepository.save(formPartition);

        final FormPartition duplicateFormPartition = manufactureValidFormPartitionPojo("1", "2", "name");
        try {
            this.formPartitionRepository.save(duplicateFormPartition);
            fail("should have thrown exception");
        } catch (final DuplicateKeyException e) {
            assertThat(e.getMessage(), containsString("formPartition_name_indx"));
        }
    }

    @Test
    public void saveDuplicateFormPartitionSegmentIdTest() {
        final FormPartition formPartition = manufactureValidFormPartitionPojo("1", this.savedFixedSegment.getId(), "name2");
        this.formPartitionRepository.save(formPartition);

        final FormPartition duplicateFormPartition = manufactureValidFormPartitionPojo("1", this.savedFixedSegment.getId() , "namadsf");
        try {
            this.formPartitionRepository.save(duplicateFormPartition);
            fail("should have thrown exception");
        } catch (final DuplicateKeyException e) {
            assertThat(e.getMessage(), containsString("formPartition_segmentId_indx"));
        }
    }

    @Test
    public void findFormPartitionTest() {
        final FormPartition formPartition = manufactureValidFormPartitionPojo("1");
        final FormPartition savedFormPartition = this.formPartitionRepository.save(formPartition);

        final FormPartition foundFormPartition = this.formPartitionRepository.findOne(savedFormPartition.getId());
        assertThat(savedFormPartition.getId(), is(equalTo(foundFormPartition.getId())));
        assertThat(savedFormPartition, is(equalTo(foundFormPartition)));
    }

    @Test
    public void findByFormIdTest() {
        final FormPartition formPartition = manufactureValidFormPartitionPojo("1");
        final FormPartition formPartition2 = manufactureValidFormPartitionPojo("1", "2", "name2");
        final FormPartition savedFormPartition1 = this.formPartitionRepository.save(formPartition);
        final FormPartition savedFormPartition2 = this.formPartitionRepository.save(formPartition2);

        final List<FormPartition> retrievedFormPartitions = this.formPartitionRepository.findAllByFormId("1");
        assertThat(retrievedFormPartitions.get(0), is(equalTo(savedFormPartition1)));
        assertThat(retrievedFormPartitions.get(1), is(equalTo(savedFormPartition2)));
    }

    @Test
    public void removeFormPartitionTest() {
        final FormPartition formPartition = manufactureValidFormPartitionPojo("1");
        final FormPartition savedFormPartition = this.formPartitionRepository.save(formPartition);

        this.formPartitionRepository.delete(formPartition);
        final FormPartition foundFormPartition = this.formPartitionRepository.findOne(savedFormPartition.getId());
        assertThat(foundFormPartition, is(nullValue()));
    }

    private FormPartition manufactureValidFormPartitionPojo(final String formId) {
        return manufactureValidFormPartitionPojo(formId, this.savedFixedSegment.getId(), "name");
    }

    private FormPartition manufactureValidFormPartitionPojo(final String formId, final String segmentId, final String name) {
     return  buildValidFormPartition(savedAssessment.getId(),name, formId, segmentId );
    }
}
