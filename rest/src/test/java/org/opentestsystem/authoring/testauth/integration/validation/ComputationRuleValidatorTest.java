/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.integration.validation;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.ComputationRule;
import org.opentestsystem.authoring.testauth.domain.ConversionTableType;
import org.opentestsystem.authoring.testauth.rest.AbstractRestEmbeddedMongoTest;
import org.opentestsystem.authoring.testauth.validation.ComputationRuleValidator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.BeanPropertyBindingResult;
import org.springframework.validation.Errors;

public class ComputationRuleValidatorTest extends AbstractRestEmbeddedMongoTest {

    @Autowired
    private ComputationRuleValidator validator;
    private ComputationRule computationRule;
    private Errors errors;

    @Before
    public void setup() {
        this.computationRule = new ComputationRule();
        this.computationRule.setName("name");
        this.computationRule.setDescription("description");
        this.computationRule.setVersion("1.0");
        this.computationRule.setConversionTableType(ConversionTableType.NONE);
        this.errors = new BeanPropertyBindingResult(this.computationRule, "");
    }

    @Test
    public void testEmptyName() {
        this.computationRule.setName("");
        this.validator.validate(this.computationRule, this.errors);
        assertTrue(this.errors.hasErrors());
    }

    @Test
    public void testNameTooLong() {
        this.computationRule.setName("123456789012345678901234567890123456789012345678901234567890X");
        this.validator.validate(this.computationRule, this.errors);
        assertTrue(this.errors.hasErrors());
    }

    @Test
    public void testEmptyVersion() {
        this.computationRule.setVersion("");
        this.validator.validate(this.computationRule, this.errors);
        assertTrue(this.errors.hasErrors());
    }

    @Test
    public void testVersionTooLong() {
        this.computationRule.setVersion("123456789012345678901234567890123456789012345678901234567890.0");
        this.validator.validate(this.computationRule, this.errors);
        assertTrue(this.errors.hasErrors());
    }

    @Test
    public void testEmptyDescription() {
        this.computationRule.setDescription("");
        this.validator.validate(this.computationRule, this.errors);
        assertFalse(this.errors.hasErrors());
    }

    @Test
    public void testNullConversionTableType() {
        this.computationRule.setConversionTableType(null);
        this.validator.validate(this.computationRule, this.errors);
        assertTrue(this.errors.hasErrors());
    }

    @Test
    public void testVersionCharacters() {
        this.computationRule.setVersion("x.y");
        this.validator.validate(this.computationRule, this.errors);
        assertTrue(this.errors.hasErrors());
    }

    @Test
    public void testVersionMajorCharacters() {
        this.computationRule.setVersion("x.0");
        this.validator.validate(this.computationRule, this.errors);
        assertTrue(this.errors.hasErrors());
    }

    @Test
    public void testVersionMinorCharacters() {
        this.computationRule.setVersion("1.x");
        this.validator.validate(this.computationRule, this.errors);
        assertTrue(this.errors.hasErrors());
    }

    @Test
    public void testVersionMajorZero() {
        this.computationRule.setVersion("0.1");
        this.validator.validate(this.computationRule, this.errors);
        assertTrue(this.errors.hasErrors());
    }

    @Test
    public void testVersionMinorTooLarge() {
        this.computationRule.setVersion("1.10");
        this.validator.validate(this.computationRule, this.errors);
        assertTrue(this.errors.hasErrors());
    }

    @Test
    public void testVersionMajorOnly() {
        this.computationRule.setVersion("1");
        this.validator.validate(this.computationRule, this.errors);
        assertTrue(this.errors.hasErrors());
    }

    @Test
    public void testVersionMinorOnly() {
        this.computationRule.setVersion(".9");
        this.validator.validate(this.computationRule, this.errors);
        assertTrue(this.errors.hasErrors());
    }

    @Test
    public void testVersionPatch() {
        this.computationRule.setVersion("1.1.1");
        this.validator.validate(this.computationRule, this.errors);
        assertTrue(this.errors.hasErrors());
    }

    @Test
    public void testVersionCorrect() {
        this.computationRule.setVersion("1.0");
        this.validator.validate(this.computationRule, this.errors);
        assertFalse(this.errors.hasErrors());
    }
}
