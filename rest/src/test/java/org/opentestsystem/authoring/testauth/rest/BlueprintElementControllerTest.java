/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.rest;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyString;
import static org.mockito.Mockito.when;

import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.Assessment;
import org.opentestsystem.authoring.testauth.domain.BlueprintElement;
import org.opentestsystem.authoring.testauth.domain.CoreStandardPublicationResponse;
import org.opentestsystem.authoring.testauth.domain.DomainFactory;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionAlgorithm;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionPurpose;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionType;
import org.opentestsystem.authoring.testauth.domain.Publication;
import org.opentestsystem.authoring.testauth.domain.Segment;
import org.opentestsystem.authoring.testauth.domain.Subject;
import org.opentestsystem.authoring.testauth.service.AssessmentService;
import org.opentestsystem.authoring.testauth.service.BlueprintElementService;
import org.opentestsystem.authoring.testauth.service.ItemSelectionAlgorithmService;
import org.opentestsystem.authoring.testauth.service.PublicationService;
import org.opentestsystem.authoring.testauth.service.SegmentService;
import org.opentestsystem.authoring.testauth.service.SubjectService;
import org.opentestsystem.shared.docs.annotation.ApiDocExample;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.client.RestOperations;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Maps;
import com.google.common.collect.Sets;

public class BlueprintElementControllerTest extends AbstractRestEmbeddedMongoTest {

    private static final String BASE_URL = "/blueprintElement";
    private BlueprintElement savedBlueprintElement;
    private Assessment savedAssessment;
    private String savedAssessmentId;
    private Segment savedSegment;
    private CoreStandardPublicationResponse expectedCsResponse;

    @Autowired
    private RestOperations restTemplate;

    @Autowired
    private SubjectService subjectService;

    @Autowired
    private PublicationService publicationService;

    @Autowired
    private AssessmentService assessmentService;

    @Autowired
    private BlueprintElementService blueprintElementService;

    @Autowired
    private ItemSelectionAlgorithmService itemSelectionAlgorithmService;

    @Autowired
    private SegmentService segmentService;

    @SuppressWarnings("unchecked")
    @ApiDocExample(rank = -1)
    @Before
    public void setupTestData() {
        final Subject savedSubject = this.subjectService.saveSubject(DomainFactory.manufactureValidSubject("ABB"));
        final Publication publication = PODAM_FACTORY.manufacturePojo(Publication.class);
        publication.setId(null);
        publication.setSubjectIds(Sets.newHashSet(savedSubject.getId()));
        final Publication savedPublication = this.publicationService.savePublication(publication);
        this.savedAssessment = this.assessmentService.saveAssessment(DomainFactory.manufactureValidAssessment(savedSubject, savedPublication));
        this.savedAssessmentId = this.savedAssessment.getId();

        final ItemSelectionAlgorithm algorithm = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.BOOLEAN);
        final ItemSelectionAlgorithm savedAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithm);
        this.savedSegment = this.segmentService.createSegment(DomainFactory.manufactureValidSegment(this.savedAssessmentId, savedAlgorithm, 1));

        this.savedBlueprintElement = this.blueprintElementService.saveBlueprintElement(null, buildBlueprintElement(0));
        assertThat(this.mongoTemplate.findAll(BlueprintElement.class).size(), is(equalTo(1)));
        assertThat(this.savedBlueprintElement, is(notNullValue()));

        this.expectedCsResponse = PODAM_FACTORY.manufacturePojo(CoreStandardPublicationResponse.class);
        this.expectedCsResponse.getPayload().get(0).setFkGradeLevel(this.savedAssessment.getGrade()[0]);
        when(this.restTemplate.getForObject(anyString(), any(Class.class))).thenReturn(this.expectedCsResponse);
    }

    @ApiDocExample(rank = 1)
    @Test
    public void findBlueprintElement() throws InterruptedException {
        final BlueprintElement fetchedBlueprintElement = callGETRestService(BASE_URL + "/" + this.savedBlueprintElement.getId(), BlueprintElement.class);
        assertThat(fetchedBlueprintElement, is(notNullValue()));
    }

    @ApiDocExample(rank = 2)
    @SuppressWarnings("unchecked")
    @Test
    public void findBlueprintElements() {
        final SearchResponse<BlueprintElement> response = callGETRestService(BASE_URL, SearchResponse.class);
        assertThat(1, is(equalTo(response.getSearchResults().size())));
    }

    @ApiDocExample(rank = 3)
    @SuppressWarnings("unchecked")
    @Test
    public void searchBlueprintElementByAssessmentId() {
        final Map<String, String> blueprintElement = Maps.newHashMap();
        blueprintElement.put("assessmentId", this.savedAssessmentId);
        final SearchResponse<BlueprintElement> response = callGETRestService(BASE_URL + buildQueryString(blueprintElement), SearchResponse.class);
        assertThat(response.getReturnCount(), is(equalTo(1)));
        assertThat(1, is(equalTo(response.getSearchResults().size())));
    }

    @ApiDocExample(rank = 4)
    @SuppressWarnings("unchecked")
    @Test
    public void searchBlueprintElementByStandardKey() {
        final Map<String, String> blueprintElement = Maps.newHashMap();
        blueprintElement.put("standardKey", "standard-key-0");
        final SearchResponse<BlueprintElement> response = callGETRestService(BASE_URL + buildQueryString(blueprintElement), SearchResponse.class);
        assertThat(response.getReturnCount(), is(equalTo(1)));
        assertThat(1, is(equalTo(response.getSearchResults().size())));
    }

    @ApiDocExample(rank = 5)
    @Test
    public void updateBlueprintElement() {
        final Map<String, Object> blueprintElementParams = buildParamObject(this.savedBlueprintElement);
        blueprintElementParams.put("textDescription", "new textDescription");
        final BlueprintElement updatedBlueprintElement = callPUTRestService(BASE_URL + "/" + this.savedBlueprintElement.getId(), blueprintElementParams, BlueprintElement.class);
        assertThat(updatedBlueprintElement, is(notNullValue()));
        assertThat(updatedBlueprintElement.getTextDescription(), is(equalTo("new textDescription")));
    }

    @SuppressWarnings("unchecked")
    @ApiDocExample(rank = 6)
    @Test
    public void updateBlueprintElementList() {
        final Map<String, Object> blueprintElementParams = buildParamObject(this.savedBlueprintElement);
        blueprintElementParams.put("textDescription", "new textDescription");

        final Map<String, Object> blueprintListParams = ImmutableMap.of("blueprintElements", (Object) ImmutableList.of(blueprintElementParams));

        final List<Map<String, Object>> updatedBlueprintElementList = callPUTRestService(BASE_URL, blueprintListParams, List.class);
        assertThat(updatedBlueprintElementList.size(), is(1));
        assertThat(updatedBlueprintElementList.get(0).get("textDescription").toString(), is(equalTo("new textDescription")));
    }

    @ApiDocExample(rank = 7)
    @Test
    public void synchronizeWithCoreStandardsTest() {
        final Integer updatedBlueprintElementCount = callPUTRestService(BASE_URL + "/" + this.savedAssessmentId + "/synch", null, Integer.class);
        assertThat(updatedBlueprintElementCount, is(not(equalTo(Integer.valueOf(0)))));
    }

    @SuppressWarnings("unchecked")
    @ApiDocExample(rank = 8)
    @Test
    public void addSegmentToBlueprintElementDataTest() {
        final Integer updatedBlueprintElementCount = callPUTRestService(BASE_URL + "/" + this.savedAssessmentId + "/synch", null, Integer.class);
        assertThat(updatedBlueprintElementCount, is(not(equalTo(Integer.valueOf(0)))));
        final List<BlueprintElement> updatedBlueprintElementList = callPUTRestService(BASE_URL + "/" + this.savedAssessmentId + "/segment/" + this.savedSegment.getId() + "/add", null, List.class);
        assertThat(updatedBlueprintElementList.size(), is(notNullValue()));
    }

    @ApiDocExample(rank = -1)
    @SuppressWarnings("unchecked")
    @Test
    public void searchBlueprintElements() {
        for (int i = 1; i < 11; i++) {
            this.blueprintElementService.saveBlueprintElement(null, buildBlueprintElement(i));
        }
        assertThat(this.mongoTemplate.findAll(BlueprintElement.class).size(), is(equalTo(11)));

        final Map<String, String> searchParams = Maps.newHashMap();

        searchParams.put("standardKey", "standard-key-10");
        SearchResponse<BlueprintElement> response = callGETRestService(BASE_URL + buildQueryString(searchParams), SearchResponse.class);
        assertThat(response.getReturnCount(), is(equalTo(1)));
        assertThat(1, is(equalTo(response.getSearchResults().size())));

        searchParams.put("standardKey", "standard-key-3");
        response = callGETRestService(BASE_URL + buildQueryString(searchParams), SearchResponse.class);
        assertThat(response.getReturnCount(), is(equalTo(1)));
        assertThat(response.getSearchResults().size(), is(equalTo(1)));

        searchParams.put("standardKey", "invalid");
        response = callGETRestService(BASE_URL + buildQueryString(searchParams), SearchResponse.class);
        assertThat(response.getReturnCount(), is(equalTo(0)));
        assertThat(response.getSearchResults().size(), is(equalTo(0)));

        searchParams.put("standardKey", "standard-key-");
        // search pageable default size is 10
        response = callGETRestService(BASE_URL + buildQueryString(searchParams), SearchResponse.class);
        assertThat(response.getReturnCount(), is(equalTo(10)));
        assertThat(response.getSearchResults().size(), is(equalTo(10)));

        searchParams.clear();
        // search pageable default size is 10
        response = callGETRestService(BASE_URL + buildQueryString(searchParams), SearchResponse.class);
        assertThat(response.getReturnCount(), is(equalTo(10)));
        assertThat(response.getSearchResults().size(), is(equalTo(10)));
    }

    @ApiDocExample(rank = 10)
    @Test
    public void activateBlueprintElementGradesTest() throws InterruptedException {
        this.blueprintElementService.saveBlueprintElement(null, buildBlueprintElement(1));
        this.blueprintElementService.saveBlueprintElement(null, buildBlueprintElement(2));
        this.blueprintElementService.saveBlueprintElement(null, buildBlueprintElement(3));

        Integer matchedBpElementCount = callPUTRestService(BASE_URL + "/" + this.savedAssessmentId + "/activate?grades=" + this.savedAssessment.getGrade()[0] + "&active=true", null, Integer.class);
        assertThat(matchedBpElementCount, is(not(0)));

        matchedBpElementCount = callPUTRestService(BASE_URL + "/" + this.savedAssessmentId + "/activate?grades=15&active=true", null, Integer.class);
        assertThat(matchedBpElementCount, is(0));

        matchedBpElementCount = callPUTRestService(BASE_URL + "/" + this.savedAssessmentId + "/activate?grades=" + this.savedAssessment.getGrade()[0] + "&active=true", null, Integer.class);
        assertThat(matchedBpElementCount, is(not(0)));
    }

    @ApiDocExample(rank = 11)
    @Test
    public void activateBlueprintElementStandardsTest() throws InterruptedException {
        this.blueprintElementService.saveBlueprintElement(null, buildBlueprintElement(1));
        this.blueprintElementService.saveBlueprintElement(null, buildBlueprintElement(2));
        this.blueprintElementService.saveBlueprintElement(null, buildBlueprintElement(3));

        final String grade = this.savedAssessment.getGrade()[0];
        Integer matchedBpElementCount = callPUTRestService(BASE_URL + "/" + this.savedAssessmentId + "/activateStandard?standardKey=parent-key&grade=" + grade + "&active=true", null, Integer.class);
        assertThat(matchedBpElementCount, is(4));

        matchedBpElementCount = callPUTRestService(BASE_URL + "/" + this.savedAssessmentId + "/activateStandard?standardKey=parent-key2&grade=" + grade + "&active=true", null, Integer.class);
        assertThat(matchedBpElementCount, is(0));

        matchedBpElementCount = callPUTRestService(BASE_URL + "/" + this.savedAssessmentId + "/activateStandard?standardKey=parent-ke&grade=" + grade + "&active=true", null, Integer.class);
        assertThat(matchedBpElementCount, is(0));
    }

    @SuppressWarnings("unchecked")
    @ApiDocExample(rank = 12)
    @Test
    public void clearBlueprintEst() throws InterruptedException {
        this.blueprintElementService.saveBlueprintElement(null, buildBlueprintElement(1));
        this.blueprintElementService.saveBlueprintElement(null, buildBlueprintElement(2));
        this.blueprintElementService.saveBlueprintElement(null, buildBlueprintElement(3));

        List<BlueprintElement> updatedBlueprintElements = callPUTRestService(BASE_URL + "/" + this.savedAssessmentId + "/clear?segmentId=MASTER", null, List.class);
        assertThat(updatedBlueprintElements.size(), is(4));

        updatedBlueprintElements = callPUTRestService(BASE_URL + "/" + this.savedAssessmentId + "/clear?segmentId=XXX", null, List.class);
        assertThat(updatedBlueprintElements.size(), is(4));

        updatedBlueprintElements = callPUTRestService(BASE_URL + "/" + "invalid-assessment-id" + "/clear?segmentId=MASTER", null, List.class);
        assertThat(updatedBlueprintElements.size(), is(0));
    }

    private BlueprintElement buildBlueprintElement(final int uniqueId) {
        final List<Segment> segments = segmentService.findSegmentListByAssessmentId(this.savedAssessment.getId());
        segmentService.loadReferenceData(segments);
        final BlueprintElement bpe = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), segments);
        bpe.setParentKey("parent-key");
        bpe.setStandardKey("standard-key-" + uniqueId);
        bpe.setLevel("level" + uniqueId);
        bpe.setGrade(this.savedAssessment.getGrade()[0]);
        bpe.setTextDescription("textDescription" + uniqueId);
        bpe.setActive(true);
        bpe.setLevel("level" + uniqueId);
        return bpe;
    }
}
