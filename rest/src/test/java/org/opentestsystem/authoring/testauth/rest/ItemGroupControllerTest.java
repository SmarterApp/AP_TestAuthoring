/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.rest;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;

import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.ItemGroup;

public class ItemGroupControllerTest extends AbstractRestEmbeddedMongoTest {

    private static final String BASE_URL = "/itemGroup/";

    private ItemGroup justGiveMeOne() {
        final ItemGroup grp = PODAM_FACTORY.manufacturePojo(ItemGroup.class);
        grp.setMaxitems(Math.abs(grp.getMaxitems()));
        grp.setMaxResponses(Math.abs(grp.getMaxResponses()));
        final ItemGroup savedGroup = callPOSTRestService(BASE_URL, buildParamObject(grp), ItemGroup.class);
        assertThat(savedGroup, is(notNullValue()));
        assertThat(savedGroup.getId(), is(notNullValue()));
        return grp;
    }

    @Test
    public void saveReadItemGroup() throws InterruptedException {
        final ItemGroup grp = justGiveMeOne();

        final ItemGroup readObj = callGETRestService(BASE_URL + grp.getId(), ItemGroup.class);
        assertThat(readObj.getId(), is(equalTo(grp.getId())));
        assertThat(readObj.getGroupName(), is(equalTo(grp.getGroupName())));
        assertThat(readObj.getLocationId(), is(equalTo(grp.getLocationId())));
        assertThat(readObj.getLocationType(), is(equalTo(grp.getLocationType())));
        assertThat(readObj.getAssessmentId(), is(equalTo(grp.getAssessmentId())));
        assertThat(readObj.getMaxitems(), is(equalTo(grp.getMaxitems())));
        assertThat(readObj.getMaxResponses(), is(equalTo(grp.getMaxResponses())));
        assertThat(readObj.getPassageId(), is(equalTo(grp.getPassageId())));
        assertThat(readObj.getPassageName(), is(equalTo(grp.getPassageName())));
    }

    @Test
    public void updateOne() throws InterruptedException {
        final ItemGroup grp = justGiveMeOne();

        final ItemGroup untouched = callGETRestService(BASE_URL + grp.getId(), ItemGroup.class);

        grp.setGroupName("JonnyUtah");
        final ItemGroup updated = callPUTRestService(BASE_URL + grp.getId(), buildParamObject(grp), ItemGroup.class);

        assertThat(grp.getId(), is(equalTo(updated.getId())));
        assertThat(grp.getGroupName(), is(equalTo(updated.getGroupName())));
        assertThat(grp.getLocationId(), is(equalTo(updated.getLocationId())));
        assertThat(grp.getLocationType(), is(equalTo(updated.getLocationType())));
        assertThat(grp.getAssessmentId(), is(equalTo(updated.getAssessmentId())));
        assertThat(grp.getMaxitems(), is(equalTo(updated.getMaxitems())));
        assertThat(grp.getMaxResponses(), is(equalTo(updated.getMaxResponses())));
        assertThat(grp.getPassageId(), is(equalTo(updated.getPassageId())));
        assertThat(grp.getPassageName(), is(equalTo(updated.getPassageName())));

        assertThat(untouched.getId(), is(equalTo(updated.getId())));
        assertThat(untouched.getGroupName(), is(not(equalTo(updated.getGroupName()))));
        assertThat(untouched.getLocationId(), is(equalTo(updated.getLocationId())));
        assertThat(untouched.getLocationType(), is(equalTo(updated.getLocationType())));
        assertThat(untouched.getAssessmentId(), is(equalTo(updated.getAssessmentId())));
        assertThat(untouched.getMaxitems(), is(equalTo(updated.getMaxitems())));
        assertThat(untouched.getMaxResponses(), is(equalTo(updated.getMaxResponses())));
        assertThat(untouched.getPassageId(), is(equalTo(updated.getPassageId())));
        assertThat(untouched.getPassageName(), is(equalTo(updated.getPassageName())));
    }

    @Test
    public void deleteOne() throws InterruptedException {
        final ItemGroup grp = justGiveMeOne();
        callDeleteRestService(BASE_URL + grp.getId());
        final ItemGroup nonthere = callGETRestService(BASE_URL + grp.getId(), ItemGroup.class);
        assertThat(nonthere, is(nullValue()));
    }

}
