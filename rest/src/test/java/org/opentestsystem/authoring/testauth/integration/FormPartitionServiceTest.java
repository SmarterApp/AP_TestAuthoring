/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.integration;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.greaterThan;
import static org.junit.Assert.fail;

import java.util.List;

import javax.validation.ConstraintViolationException;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.Assessment;
import org.opentestsystem.authoring.testauth.domain.DomainFactory;
import org.opentestsystem.authoring.testauth.domain.Form;
import org.opentestsystem.authoring.testauth.domain.FormPartition;
import org.opentestsystem.authoring.testauth.domain.Item;
import org.opentestsystem.authoring.testauth.domain.ItemGroup;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionAlgorithm;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionAlgorithmType;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionPurpose;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionType;
import org.opentestsystem.authoring.testauth.domain.Publication;
import org.opentestsystem.authoring.testauth.domain.Segment;
import org.opentestsystem.authoring.testauth.domain.Subject;
import org.opentestsystem.authoring.testauth.persistence.AssessmentRepository;
import org.opentestsystem.authoring.testauth.service.FormPartitionService;
import org.opentestsystem.authoring.testauth.service.FormService;
import org.opentestsystem.authoring.testauth.service.ItemGroupService;
import org.opentestsystem.authoring.testauth.service.ItemSelectionAlgorithmService;
import org.opentestsystem.authoring.testauth.service.ItemService;
import org.opentestsystem.authoring.testauth.service.PublicationService;
import org.opentestsystem.authoring.testauth.service.SegmentService;
import org.opentestsystem.authoring.testauth.service.SubjectService;
import org.opentestsystem.shared.exception.LocalizedException;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;

public class FormPartitionServiceTest extends AbstractAssessmentServiceTest {

    @Autowired
    private FormPartitionService formPartitionService;

    @Autowired
    private ItemService itemService;

    @Autowired
    private ItemGroupService itemGroupService;

    @Autowired
    private SubjectService subjectService;

    @Autowired
    private PublicationService publicationService;

    @Autowired
    private AssessmentRepository assessmentRepository;

    @Autowired
    private ItemSelectionAlgorithmService itemSelectionAlgorithmService;

    @Autowired
    private SegmentService segmentService;

    @Autowired
    private FormService formService;

    private Assessment savedAssessment;
    private ItemSelectionAlgorithm savedAlgorithm;
    private Segment savedSegment;
    private Form savedForm;

    @Override
    @Before
    public void setupTestData() {
        final Subject savedSubject = this.subjectService.saveSubject(DomainFactory.manufactureValidSubject("abb"));
        final Publication savedPublication = this.publicationService.savePublication(DomainFactory.manufactureValidPublication(savedSubject.getTenantId(), ImmutableSet.of(savedSubject)));
        this.savedAssessment = this.assessmentRepository.save(DomainFactory.manufactureValidAssessment(savedSubject, savedPublication));

        final ItemSelectionAlgorithm algorithm = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.BOOLEAN);
        algorithm.setItemSelectionAlgorithmType(ItemSelectionAlgorithmType.FIXEDFORM);
        this.savedAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithm);

        final Segment segmentToSave = DomainFactory.manufactureValidSegment(this.savedAssessment.getId(), this.savedAlgorithm, 1);
        this.savedSegment = this.segmentService.createSegment(segmentToSave);

        final Form form = DomainFactory.manufactureValidForm(this.savedAssessment.getId());
        this.savedForm = this.formService.saveForm(null, form);
    }

    @Test
    public void saveNewFormPartitionTest() {
        final FormPartition formPartitionToSave = buildValidFormPartition();

        final FormPartition savedFormPartition = this.formPartitionService.saveFormPartition(null, formPartitionToSave);
        assertThat(savedFormPartition, is(notNullValue()));

        final FormPartition retrievedFormPartition = this.formPartitionService.getFormPartition(savedFormPartition.getId());
        assertThat(retrievedFormPartition, is(notNullValue()));
    }

    @Test
    public void saveNewFormPartitionWithMissingDataTest() {
        final FormPartition formPartitionToSave = buildValidFormPartition();
        formPartitionToSave.setName(null);

        try {
            this.formPartitionService.saveFormPartition(null, formPartitionToSave);
            fail("exception should be thrown when trying to add a new formPartition w/ missing data");
        } catch (final ConstraintViolationException e) {
            assertThat(e.getConstraintViolations().size(), is(1));
            assertThat(getConstraintViolation(e, "formPartition.name.required").size(), is(1));
        }
    }

    @Test
    public void saveNewFormPartitionWithMissingFormIdTest() {
        final FormPartition formPartitionToSave = buildValidFormPartition();
        formPartitionToSave.setFormId(null);

        try {
            this.formPartitionService.saveFormPartition(null, formPartitionToSave);
            fail("exception should be thrown when trying to add a new formPartition w/ missing data");
        } catch (final ConstraintViolationException e) {
            assertThat(e.getConstraintViolations().size(), is(1));
            assertThat(getConstraintViolation(e, "formPartition.formId.required").size(), is(1));
        }
    }

    @Test
    public void saveNewFormPartitionWithInvalidFormIdTest() {
        final FormPartition formPartitionToSave = buildValidFormPartition();
        formPartitionToSave.setFormId("invalid-formId");

        try {
            this.formPartitionService.saveFormPartition(null, formPartitionToSave);
            fail("exception should be thrown when trying to add a new formPartition w/ invalid data");
        } catch (final ConstraintViolationException e) {
            assertThat(e.getConstraintViolations().size(), is(1));
            assertThat(getConstraintViolation(e, "formPartition.formId.notfound").size(), is(1));
        }
    }

    @Test
    public void saveNewFormPartitionWithMissingSegmentIdTest() {
        final FormPartition formPartitionToSave = buildValidFormPartition();
        formPartitionToSave.setSegmentId(null);

        try {
            this.formPartitionService.saveFormPartition(null, formPartitionToSave);
            fail("exception should be thrown when trying to add a new formPartition w/ missing data");
        } catch (final ConstraintViolationException e) {
            assertThat(e.getConstraintViolations().size(), is(1));
            assertThat(getConstraintViolation(e, "formPartition.segmentId.required").size(), is(1));
        }
    }

    @Test
    public void saveNewFormPartitionWithInvalidSegmentIdTest() {
        final FormPartition formPartitionToSave = buildValidFormPartition();
        formPartitionToSave.setSegmentId("invalid-segmentId");

        try {
            this.formPartitionService.saveFormPartition(null, formPartitionToSave);
            fail("exception should be thrown when trying to add a new formPartition w/ invalid data");
        } catch (final ConstraintViolationException e) {
            assertThat(e.getConstraintViolations().size(), is(1));
            assertThat(getConstraintViolation(e, "formPartition.segmentId.notfound").size(), is(1));
        }
    }

    @Test
    public void saveNewFormPartitionWithNonFixedFormSegmentIdTest() {
        final FormPartition formPartitionToSave = buildValidFormPartition();

        final ItemSelectionAlgorithm algorithm = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.BOOLEAN);
        algorithm.setItemSelectionAlgorithmType(ItemSelectionAlgorithmType.ADAPTIVE);
        final ItemSelectionAlgorithm savedAlgorithm2 = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithm);

        final Segment segmentToSave2 = DomainFactory.manufactureValidSegment(this.savedAssessment.getId(), savedAlgorithm2, 2);
        final Segment savedSegment2 = this.segmentService.createSegment(segmentToSave2);

        formPartitionToSave.setSegmentId(savedSegment2.getId());

        try {
            this.formPartitionService.saveFormPartition(null, formPartitionToSave);
            fail("exception should be thrown when trying to add a new formPartition w/ invalid data");
        } catch (final ConstraintViolationException e) {
            assertThat(e.getConstraintViolations().size(), is(1));
            assertThat(getConstraintViolation(e, "formPartition.segmentId.notfixed").size(), is(1));
        }
    }

    @Test
    public void saveNewFormPartitionAssessmentAlreadyLockedTest() {
        this.savedAssessment.setLocked(true);
        this.assessmentRepository.save(this.savedAssessment);

        final FormPartition formPartitionToSave = buildValidFormPartition();
        try {
            this.formPartitionService.saveFormPartition(null, formPartitionToSave);
            fail("exception should be thrown when trying to save a new formPartition after assessment is locked");
        } catch (final LocalizedException e) {
            assertThat(e.getMessage(), is("cannot.be.altered.assessment.locked"));
        }
    }

    @Test
    public void saveExistingFormPartitionTest() {
        final FormPartition formPartitionToSave = buildValidFormPartition();
        final FormPartition savedFormPartition = this.formPartitionService.saveFormPartition(null, formPartitionToSave);
        final Segment segmentToSave = DomainFactory.manufactureValidSegment(this.savedAssessment.getId(), this.savedAlgorithm, 2);
        final Segment savedSegment2 = this.segmentService.createSegment(segmentToSave);

        savedFormPartition.setSegmentId(savedSegment2.getId());
        final FormPartition resavedFormPartition = this.formPartitionService.saveFormPartition(savedFormPartition.getId(), savedFormPartition);
        assertThat(resavedFormPartition, is(notNullValue()));
        assertThat(resavedFormPartition.getSegmentId(), is(equalTo(savedSegment2.getId())));
    }

    @Test
    public void toggleSegmentIdsOnExistingFormPartitionsTest() {
        final FormPartition formPartitionToSave = buildValidFormPartition();
        final FormPartition savedFormPartition = this.formPartitionService.saveFormPartition(null, formPartitionToSave);
        final Segment segmentToSave2 = DomainFactory.manufactureValidSegment(this.savedAssessment.getId(), this.savedAlgorithm, 2);
        final Segment savedSegment2 = this.segmentService.createSegment(segmentToSave2);
        final FormPartition formPartitionToSave2 = buildValidFormPartition("name2");
        formPartitionToSave2.setSegmentId(savedSegment2.getId());
        final FormPartition savedFormPartition2 = this.formPartitionService.saveFormPartition(null, formPartitionToSave2);

        savedFormPartition.setSegmentId(savedSegment2.getId());
        final FormPartition resavedFormPartition = this.formPartitionService.saveFormPartition(savedFormPartition.getId(), savedFormPartition);
        assertThat(resavedFormPartition, is(notNullValue()));
        assertThat(resavedFormPartition.getSegmentId(), is(equalTo(savedSegment2.getId())));
        final FormPartition resavedFormPartition2 = this.formPartitionService.getFormPartition(savedFormPartition2.getId());
        assertThat(resavedFormPartition2, is(notNullValue()));
        assertThat(resavedFormPartition2.getSegmentId(), is(equalTo(this.savedSegment.getId())));
    }

    @Test
    public void saveFormPartitionDuplicateNameTest() {
        final FormPartition formPartitionToSave = buildValidFormPartition();
        final FormPartition savedFormPartition = this.formPartitionService.saveFormPartition(null, formPartitionToSave);

        final FormPartition duplicateFormPartition = this.formPartitionService.getFormPartition(savedFormPartition.getId());
        duplicateFormPartition.setId(null);

        try {
            this.formPartitionService.saveFormPartition(null, duplicateFormPartition);
            fail("should thow duplicate key exception");
        } catch (final LocalizedException e) {
            assertThat(e.getMessage(), is("formPartition.already.exists.name"));
        }
    }

    @Test
    public void saveFormPartitionDuplicateSegmentTest() {
        final FormPartition formPartitionToSave = buildValidFormPartition();
        final FormPartition savedFormPartition = this.formPartitionService.saveFormPartition(null, formPartitionToSave);

        final FormPartition duplicateFormPartition = this.formPartitionService.getFormPartition(savedFormPartition.getId());
        duplicateFormPartition.setId(null);
        duplicateFormPartition.setName("newName");

        try {
            this.formPartitionService.saveFormPartition(null, duplicateFormPartition);
            fail("should thow duplicate key exception");
        } catch (final LocalizedException e) {
            assertThat(e.getMessage(), is("formPartition.already.exists.segment"));
        }
    }

    @Test
    public void saveExistingFormPartitionAssessmentAlreadyLockedTest() {
        final FormPartition formPartitionToSave = buildValidFormPartition();
        final FormPartition savedFormPartition = this.formPartitionService.saveFormPartition(null, formPartitionToSave);

        this.savedAssessment.setLocked(true);
        this.assessmentRepository.save(this.savedAssessment);

        savedFormPartition.setName("new-name");
        try {
            this.formPartitionService.saveFormPartition(savedFormPartition.getId(), savedFormPartition);
            fail("exception should be thrown when trying to save an existing formPartition after assessment is locked");
        } catch (final LocalizedException e) {
            assertThat(e.getMessage(), is("cannot.be.altered.assessment.locked"));
        }
    }

    @Test
    public void deleteFormPartitionTest() {
        final FormPartition formPartitionToSave = buildValidFormPartition();
        final FormPartition savedFormPartition = this.formPartitionService.saveFormPartition(null, formPartitionToSave);
        // add group
        addFixedFormItemGroup(this.savedAssessment, savedFormPartition, "groupA");

        // add item
        final Item itemToSave = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        itemToSave.setAssessmentId(this.savedAssessment.getId());
        itemToSave.setItemLocation(null);
        addFixedFormLocation(itemToSave, savedFormPartition.getId(), "groupA");
        this.itemService.saveItem(itemToSave);

        final List<Item> items = this.itemService.getItemsByFormPartitionId(savedFormPartition.getId());
        final List<ItemGroup> groups = this.itemGroupService.getItemGroupsFormPartition(savedFormPartition.getId());
        assertThat(items.size(), greaterThan(0));
        assertThat(groups.size(), greaterThan(0));
        this.formPartitionService.removeFormPartition(savedFormPartition.getId());
        final List<Item> itemsDeleted = this.itemService.getItemsByFormPartitionId(savedFormPartition.getId());
        final List<ItemGroup> groupsDeleted = this.itemGroupService.getItemGroupsFormPartition(savedFormPartition.getId());
        final FormPartition retreivedFormPartition = this.formPartitionService.getFormPartition(savedFormPartition.getId());
        assertThat(retreivedFormPartition, is(nullValue()));
        assertThat(itemsDeleted.size(), is(0));
        assertThat(groupsDeleted.size(), is(0));
    }

    @Test
    public void deleteFormPartitionAssessmentAlreadyLockedTest() {
        final FormPartition formPartitionToSave = buildValidFormPartition();
        final FormPartition savedFormPartition = this.formPartitionService.saveFormPartition(null, formPartitionToSave);

        this.savedAssessment.setLocked(true);
        this.assessmentRepository.save(this.savedAssessment);

        try {
            this.formPartitionService.removeFormPartition(savedFormPartition.getId());
            fail("exception should be thrown when trying to delete an formPartition after assessment is locked");
        } catch (final LocalizedException e) {
            assertThat(e.getMessage(), is("cannot.be.altered.assessment.locked"));
        }

        final FormPartition retreivedFormPartition = this.formPartitionService.getFormPartition(savedFormPartition.getId());
        assertThat(retreivedFormPartition, is(notNullValue()));
    }

    @Test
    public void removeFormPartitionByFormIdTest() {
        final FormPartition formPartitionToSave1 = buildValidFormPartition("name1");
        final FormPartition savedFormPartition1 = this.formPartitionService.saveFormPartition(null, formPartitionToSave1);
        final Segment segmentToSave2 = DomainFactory.manufactureValidSegment(this.savedAssessment.getId(), this.savedAlgorithm, 2);
        final Segment savedSegment2 = this.segmentService.createSegment(segmentToSave2);
        final FormPartition formPartitionToSave2 = buildValidFormPartition("name2");
        formPartitionToSave2.setSegmentId(savedSegment2.getId());
        final FormPartition savedFormPartition2 = this.formPartitionService.saveFormPartition(null, formPartitionToSave2);
        final Segment segmentToSave3 = DomainFactory.manufactureValidSegment(this.savedAssessment.getId(), this.savedAlgorithm, 3);
        final Segment savedSegment3 = this.segmentService.createSegment(segmentToSave3);
        final FormPartition formPartitionToSave3 = buildValidFormPartition("name3");
        formPartitionToSave3.setSegmentId(savedSegment3.getId());
        final FormPartition savedFormPartition3 = this.formPartitionService.saveFormPartition(null, formPartitionToSave3);

        this.formPartitionService.removeFormPartitionsByFormId(this.savedForm.getId());

        final FormPartition retrievedFormPartition1 = this.formPartitionService.getFormPartition(savedFormPartition1.getId());
        assertThat(retrievedFormPartition1, is(nullValue()));

        final FormPartition retrievedFormPartition2 = this.formPartitionService.getFormPartition(savedFormPartition2.getId());
        assertThat(retrievedFormPartition2, is(nullValue()));

        final FormPartition retrievedFormPartition3 = this.formPartitionService.getFormPartition(savedFormPartition3.getId());
        assertThat(retrievedFormPartition3, is(nullValue()));
    }

    @Test
    public void searchFormPartitions() {
        final FormPartition formPartitionToSave1 = buildValidFormPartition("name1");
        final FormPartition savedFormPartition1 = this.formPartitionService.saveFormPartition(null, formPartitionToSave1);
        final Segment segmentToSave2 = DomainFactory.manufactureValidSegment(this.savedAssessment.getId(), this.savedAlgorithm, 2);
        final Segment savedSegment2 = this.segmentService.createSegment(segmentToSave2);
        final FormPartition formPartitionToSave2 = buildValidFormPartition("name2");
        formPartitionToSave2.setSegmentId(savedSegment2.getId());
        final FormPartition savedFormPartition2 = this.formPartitionService.saveFormPartition(null, formPartitionToSave2);

        SearchResponse<FormPartition> searchResponse = this.formPartitionService.searchFormPartitions(ImmutableMap.of("formId", new String[] { "invalid-form-id" }));
        assertThat(searchResponse.getSearchResults().size(), is(0));

        searchResponse = this.formPartitionService.searchFormPartitions(ImmutableMap.of("formId", new String[] { this.savedForm.getId() }));
        assertThat(searchResponse.getSearchResults().size(), is(2));

        searchResponse = this.formPartitionService.searchFormPartitions(ImmutableMap.of("name", new String[] { savedFormPartition1.getName() }));
        assertThat(searchResponse.getSearchResults().size(), is(1));

        searchResponse = this.formPartitionService.searchFormPartitions(ImmutableMap.of("name", new String[] { savedFormPartition2.getName() }));
        assertThat(searchResponse.getSearchResults().size(), is(1));
    }

    private FormPartition buildValidFormPartition() {
        return buildValidFormPartition("name");
    }

    private FormPartition buildValidFormPartition(final String name) {
        return DomainFactory.manufactureValidFormPartition(this.savedAssessment.getId(), name, this.savedForm.getId(), this.savedSegment.getId());
    }
}
