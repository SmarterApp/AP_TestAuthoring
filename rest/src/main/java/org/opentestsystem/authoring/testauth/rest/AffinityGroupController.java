/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.rest;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.opentestsystem.authoring.testauth.domain.AffinityGroup;
import org.opentestsystem.authoring.testauth.domain.AffinityGroupListPayload;
import org.opentestsystem.authoring.testauth.domain.ItemMoveResponse;
import org.opentestsystem.authoring.testauth.service.AffinityGroupService;
import org.opentestsystem.authoring.testauth.validation.AffinityGroupListPayloadValidator;
import org.opentestsystem.authoring.testauth.validation.AffinityGroupValidator;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.opentestsystem.shared.web.AbstractRestController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.access.annotation.Secured;
import org.springframework.security.access.prepost.PostAuthorize;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

/**
 * Rest Services for Affinity Groups
 */
@Controller
public class AffinityGroupController extends AbstractRestController {

    @Autowired
    private AffinityGroupService affinityGroupService;

    @Autowired
    private AffinityGroupValidator affinityGroupValidator;

    @Autowired
    private AffinityGroupListPayloadValidator affinityGroupListPayloadValidator;

    @InitBinder("affinityGroup")
    protected void initAffinityGroupBinder(final WebDataBinder binder) {
        binder.setValidator(this.affinityGroupValidator);
    }

    @InitBinder("affinityGroupListPayload")
    protected void initAffinityGroupListPayloadBinder(final WebDataBinder binder) {
        binder.setValidator(this.affinityGroupListPayloadValidator);
    }

    @RequestMapping(value = "/affinityGroup/{affinityGroupId}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Pool Read" })
    @PostAuthorize("hasPermission(returnObject, 'ROLE_Pool Read')")
    @ResponseBody
    public AffinityGroup findAffinityGroupById(@PathVariable final String affinityGroupId, final HttpServletResponse response) {
        return this.affinityGroupService.getAffinityGroup(affinityGroupId);
    }

    @RequestMapping(value = "/affinityGroup", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Pool Read" })
    @PostAuthorize("hasPermission(returnObject, 'ROLE_Pool Read')")
    @ResponseBody
    public SearchResponse<AffinityGroup> searchAffinityGroups(final HttpServletRequest request) {
        return this.affinityGroupService.search(request.getParameterMap());
    }

    @ResponseStatus(HttpStatus.CREATED)
    @RequestMapping(value = "/affinityGroup", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Pool Modify" })
    @PreAuthorize("hasPermission(#affinityGroup, 'ROLE_Pool Modify')")
    @ResponseBody
    public AffinityGroup createAffinityGroup(@RequestBody @Valid final AffinityGroup affinityGroup, final HttpServletResponse response) {
        return this.affinityGroupService.saveNewAffinityGroup(affinityGroup);
    }

    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "/affinityGroup/{affinityGroupId}", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Pool Modify" })
    @PreAuthorize("hasPermission(#affinityGroup, 'ROLE_Pool Modify')")
    @ResponseBody
    public AffinityGroup updateAffinityGroup(@PathVariable final String affinityGroupId, @RequestBody @Valid final AffinityGroup affinityGroup, final HttpServletResponse response) {
        return this.affinityGroupService.updateExistingAffinityGroup(affinityGroup);
    }

    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "/affinityGroup", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Pool Modify" })
    @PreAuthorize("hasPermission(#affinityGroupListPayload.getAffinityGroups(), 'ROLE_Pool Modify')")
    @ResponseBody
    public List<AffinityGroup> updateAffinityGroupList(@RequestBody @Valid final AffinityGroupListPayload affinityGroupListPayload) {
        return this.affinityGroupService.updateAffinityGroupList(affinityGroupListPayload.getAffinityGroups());
    }

    @RequestMapping(value = "/affinityGroup/{affinityGroupId}", method = RequestMethod.DELETE)
    @Secured({ "ROLE_Pool Modify" })
    @PreAuthorize("hasPermission(#affinityGroupId, 'affinityGroup', 'ROLE_Test Modify')")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    public void removeAffinityGroup(@PathVariable final String affinityGroupId) {
        this.affinityGroupService.removeAffinityGroup(affinityGroupId);
    }

    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "/affinityGroup/{affinityGroupId}/attachItems", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Pool Modify" })
    @ResponseBody
    public ItemMoveResponse attachItemsToAffinityGroup(@PathVariable final String affinityGroupId, @RequestBody final List<String> itemIdentifiers) {
        return this.affinityGroupService.attachItemsToAffinityGroup(affinityGroupId, itemIdentifiers);
    }

    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "/affinityGroup/{affinityGroupId}/detachItems", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Pool Modify" })
    @ResponseBody
    public ItemMoveResponse detachItemsFromAffinityGroup(@PathVariable final String affinityGroupId, @RequestBody final List<String> itemIdentifiers) {
        return this.affinityGroupService.detachItemsFromAffinityGroup(affinityGroupId, itemIdentifiers);
    }

}
