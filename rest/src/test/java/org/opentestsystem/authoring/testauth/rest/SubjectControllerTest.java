/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.rest;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;

import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.Subject;
import org.opentestsystem.shared.search.domain.SearchResponse;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Maps;

public class SubjectControllerTest extends AbstractRestEmbeddedMongoTest {

    private final Subject subject = new Subject("Mathematics", "MAT", "tenant1", "This is a course about numbers");
    private Map<String, Object> params;

    @Before
    public void buildParams() {
        this.params = Maps.newHashMap();
        this.params.put("name", this.subject.getName());
        this.params.put("abbreviation", this.subject.getAbbreviation());
        this.params.put("tenantId", this.subject.getTenantId());
        this.params.put("description", this.subject.getDescription());
    }

    @Test
    public void getSubject() throws InterruptedException {
        final Subject savedSubject = callPOSTRestService("/subject", this.params, Subject.class);

        final Subject fetchedSubject = callGETRestService("/subject/" + savedSubject.getId(), Subject.class);
        assertThat(fetchedSubject, is(not(nullValue())));
        assertThat(fetchedSubject.getId(), is(not(nullValue())));
        assertThat(fetchedSubject.getName(), is(this.subject.getName()));
        assertThat(fetchedSubject.getAbbreviation(), is(this.subject.getAbbreviation()));
        assertThat(fetchedSubject.getDescription(), is(this.subject.getDescription()));
    }

    @Test
    public void saveSubject() throws InterruptedException {
        final Subject savedSubject = callPOSTRestService("/subject", this.params, Subject.class);

        final Subject foundSubject = this.mongoTemplate.findById(savedSubject.getId(), Subject.class);
        assertThat(foundSubject, is(not(nullValue())));
        assertThat(foundSubject.getId(), is(not(nullValue())));
        assertThat(foundSubject.getName(), is(this.subject.getName()));
        assertThat(foundSubject.getAbbreviation(), is(this.subject.getAbbreviation()));
        assertThat(foundSubject.getDescription(), is(this.subject.getDescription()));
    }

    @Test
    public void updateSubject() throws InterruptedException {
        final Subject savedSubject = callPOSTRestService("/subject", this.params, Subject.class);
        assertThat(savedSubject, is(not(nullValue())));

        this.params.put("id", savedSubject.getId());
        this.params.put("name", "Chemistry");
        this.params.put("abbreviation", "CHE");
        callPUTRestService("/subject/" + savedSubject.getId(), this.params, Subject.class);

        final Subject foundSubject = this.mongoTemplate.findById(savedSubject.getId(), Subject.class);

        assertThat(foundSubject, is(not(nullValue())));
        assertThat(foundSubject.getId(), is(savedSubject.getId()));
        assertThat(foundSubject.getName(), is("Chemistry"));
        assertThat(foundSubject.getAbbreviation(), is("CHE"));
        assertThat(foundSubject.getDescription(), is(this.subject.getDescription()));
    }

    @Test
    public void updateSubjectFailures() throws InterruptedException {
        final Subject savedSubject = callPOSTRestService("/subject", this.params, Subject.class);
        assertThat(savedSubject, is(not(nullValue())));

        Map<String, List<String>> errorMessages = callPUTWithBadData("/subject/" + savedSubject.getId(), null);
        assertApplicationErrorMessageReturned(errorMessages, "Update Subject failed -- invalid id.");

        errorMessages = callPUTWithBadData("/subject/" + savedSubject.getId(), this.params);
        assertApplicationErrorMessageReturned(errorMessages, "Update Subject failed -- invalid id.");

        this.params.put("id", "invalid-id");
        errorMessages = callPUTWithBadData("/subject/" + savedSubject.getId(), this.params);
        assertApplicationErrorMessageReturned(errorMessages, "Update Subject failed -- invalid id.");
    }

    @SuppressWarnings("unchecked")
    @Test
    public void retiresSubject() throws InterruptedException {
        final Subject savedSubject = callPOSTRestService("/subject", this.params, Subject.class);
        this.params.put("subjectId", savedSubject.getId());

        final Map<String, String> params = Maps.newHashMap();
        params.put("name", "Mathematics");
        SearchResponse<Subject> response = callGETRestService("/subject" + buildQueryString(params), SearchResponse.class);
        assertThat(response, is(not(nullValue())));
        assertThat(response.getReturnCount(), is(1));

        Subject retiredSubject = callPUTRestService("/subject/" + savedSubject.getId() + "/retire", null, Subject.class);

        response = callGETRestService("/subject" + buildQueryString(params), SearchResponse.class);
        assertThat(response.getReturnCount(), is(1));
        assertThat(retiredSubject.isInactive(), is(true));
    }

    @SuppressWarnings("unchecked")
    @Test
    public void searchSubjects() {
        final Map<String, Object> subjectParams1 = ImmutableMap.of("name", (Object) "subject1", "abbreviation", "su1", "tenantId", "tenant1", "description", "description1");
        callPOSTRestService("/subject", subjectParams1, Subject.class);

        final Map<String, Object> subjectParams2 = ImmutableMap.of("name", (Object) "subject2", "abbreviation", "su2", "tenantId", "tenant1", "description", "description2");
        callPOSTRestService("/subject", subjectParams2, Subject.class);

        final Map<String, Object> subjectParams3 = ImmutableMap.of("name", (Object) "subject3", "abbreviation", "su3", "tenantId", "tenant1", "description", "description3");
        callPOSTRestService("/subject", subjectParams3, Subject.class);

        final Map<String, Object> subjectParams4 = ImmutableMap.of("name", (Object) "subject4", "abbreviation", "su4", "tenantId", "tenant1", "description", "description4");
        callPOSTRestService("/subject", subjectParams4, Subject.class);
        assertThat(this.mongoTemplate.findAll(Subject.class).size(), is(4));

        final Map<String, String> params = Maps.newHashMap();
        params.put("name", "subject1");
        SearchResponse<Subject> response = callGETRestService("/subject" + buildQueryString(params), SearchResponse.class);
        assertThat(response, is(not(nullValue())));
        assertThat(response.getReturnCount(), is(1));

        params.clear();
        params.put("name", "subject2");
        response = callGETRestService("/subject" + buildQueryString(params), SearchResponse.class);
        assertThat(response, is(not(nullValue())));
        assertThat(response.getReturnCount(), is(1));

        params.clear();
        params.put("name", "invalid");
        response = callGETRestService("/subject" + buildQueryString(params), SearchResponse.class);
        assertThat(response, is(not(nullValue())));
        assertThat(response.getReturnCount(), is(0));

        params.clear();
        params.put("name", "subject");
        response = callGETRestService("/subject" + buildQueryString(params), SearchResponse.class);
        assertThat(response, is(not(nullValue())));
        assertThat(response.getReturnCount(), is(4));

        params.clear();
        params.put("abbreviation", "su2");
        response = callGETRestService("/subject" + buildQueryString(params), SearchResponse.class);
        assertThat(response, is(not(nullValue())));
        assertThat(response.getReturnCount(), is(1));
    }

}
