/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.integration;

import static org.hamcrest.CoreMatchers.containsString;
import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.Assert.fail;

import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.Enemy;
import org.opentestsystem.authoring.testauth.domain.EnemyType;
import org.opentestsystem.authoring.testauth.persistence.EnemyRepository;
import org.opentestsystem.authoring.testauth.rest.AbstractRestEmbeddedMongoTest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DuplicateKeyException;

public class EnemyRepositoryTest extends AbstractRestEmbeddedMongoTest {

    @Autowired
    private EnemyRepository enemyRepository;

    @Test
    public void saveEnemyTest() {
        final Enemy enemy = manufactureValidEnemyPojo("1");
        final Enemy savedEnemy = this.enemyRepository.save(enemy);
        assertThat(savedEnemy, is(notNullValue()));
        assertThat(savedEnemy.getId(), is(notNullValue()));
    }

    @Test
    public void saveDuplicateEnemyTest() {
        final Enemy enemy = manufactureValidEnemyPojo("1");
        this.enemyRepository.save(enemy);

        final Enemy duplicateEnemy = manufactureValidEnemyPojo("1");
        try {
            this.enemyRepository.save(duplicateEnemy);
            fail("should have thrown exception");
        } catch (final DuplicateKeyException e) {
            assertThat(e.getMessage(), containsString("enemy_indx"));
        }
    }

    @Test
    public void findEnemyTest() {
        final Enemy enemy = manufactureValidEnemyPojo("1");
        final Enemy savedEnemy = this.enemyRepository.save(enemy);

        final Enemy foundEnemy = this.enemyRepository.findOne(savedEnemy.getId());
        assertThat(savedEnemy.getId(), is(equalTo(foundEnemy.getId())));
        assertThat(savedEnemy, is(equalTo(foundEnemy)));
    }

    @Test
    public void findByAssessmentIdAndObjectId1AndObjectId2Test() {
        final Enemy enemy = manufactureValidEnemyPojo("1", "item1", "item2");
        final Enemy savedEnemy1 = this.enemyRepository.save(enemy);

        final Enemy enemy2 = manufactureValidEnemyPojo("1", "item3", "item1");
        final Enemy savedEnemy2 = this.enemyRepository.save(enemy2);

        final Enemy retrievedEnemy1 = this.enemyRepository.findByAssessmentIdAndObjectId1AndObjectId2("1", "item1", "item2");
        assertThat(retrievedEnemy1, is(equalTo(savedEnemy1)));

        final Enemy retrievedEnemy2 = this.enemyRepository.findByAssessmentIdAndObjectId1AndObjectId2("1", "item3", "item1");
        assertThat(retrievedEnemy2, is(equalTo(savedEnemy2)));
    }

    @Test
    public void removeEnemyTest() {
        final Enemy enemy = manufactureValidEnemyPojo("1");
        final Enemy savedEnemy = this.enemyRepository.save(enemy);

        this.enemyRepository.delete(enemy);
        final Enemy foundEnemy = this.enemyRepository.findOne(savedEnemy.getId());
        assertThat(foundEnemy, is(nullValue()));
    }

    private Enemy manufactureValidEnemyPojo(final String assessmentId) {
        return manufactureValidEnemyPojo(assessmentId, "item1", "item2");
    }

    private Enemy manufactureValidEnemyPojo(final String assessmentId, final String objectId1, final String objectId2) {
        final Enemy enemy = PODAM_FACTORY.manufacturePojo(Enemy.class);
        enemy.setId(null);
        enemy.setAssessmentId(assessmentId);
        enemy.setObjectId1(objectId1);
        enemy.setObjectType1(EnemyType.ITEM);
        enemy.setObject1(null);
        enemy.setObjectId2(objectId2);
        enemy.setObjectType2(EnemyType.ITEM);
        enemy.setObject2(null);
        return enemy;
    }
}
