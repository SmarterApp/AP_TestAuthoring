/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.domain;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.MatcherAssert.assertThat;

import org.junit.Test;

import com.google.common.collect.ImmutableList;

public class ItemSelectionAlgorithmTest {

    @Test
    public void equalsTest() {
        final ItemSelectionAlgorithm expected = createDummyItemSelectionAlgorithm();
        final ItemSelectionAlgorithm actual = createDummyItemSelectionAlgorithm();
        final ItemSelectionAlgorithm unexpected = createDummyItemSelectionAlgorithm();
        unexpected.setName("unexpected-name");

        assertThat(actual, is(equalTo(expected)));
        assertThat(actual, is(not(equalTo(unexpected))));
    }

    @Test
    public void toStringTest() {
        final ItemSelectionAlgorithm expected = createDummyItemSelectionAlgorithm();
        final ItemSelectionAlgorithm actual = createDummyItemSelectionAlgorithm();

        assertThat(actual.toString(), is(equalTo(expected.toString())));
    }

    @Test
    public void hashcodeTest() {
        final ItemSelectionAlgorithm expected = createDummyItemSelectionAlgorithm();
        final ItemSelectionAlgorithm actual = createDummyItemSelectionAlgorithm();

        assertThat(actual.hashCode(), is(equalTo(expected.hashCode())));
    }

    public static ItemSelectionAlgorithm createDummyItemSelectionAlgorithm() {
        final ItemSelectionAlgorithm itemSelectionAlgorithm = new ItemSelectionAlgorithm();
        itemSelectionAlgorithm.setId("1");
        itemSelectionAlgorithm.setName("name");
        itemSelectionAlgorithm.setVersion("version");
        itemSelectionAlgorithm.setItemSelectionAlgorithmType(ItemSelectionAlgorithmType.ADAPTIVE);
        final ItemSelectionAlgorithmParameter param = new ItemSelectionAlgorithmParameter();
        param.setParameterName("parameterName");
        param.setItemSelectionPurpose(ItemSelectionPurpose.BLUEPRINT);
        param.setDescription("abc");
        param.setDefaultValue("1");
        param.setMinimumValue("1");
        param.setMaximumValue("9");
        param.setItemSelectionType(ItemSelectionType.INTEGER);
        final ItemSelectionAlgorithmParameter param2 = new ItemSelectionAlgorithmParameter();
        param2.setParameterName("parameterName2");
        param2.setItemSelectionPurpose(ItemSelectionPurpose.SCALAR);
        param2.setDescription("xxx");
        param2.setDefaultValue("1");
        param2.setMinimumValue("1");
        param2.setMaximumValue("9");
        param2.setItemSelectionType(ItemSelectionType.LIST);
        final ItemSelectionParameterElement itemSelectionParameterElement = new ItemSelectionParameterElement();
        itemSelectionParameterElement.setName("name");
        itemSelectionParameterElement.setPosition(1);
        param2.setItemSelectionList(ImmutableList.of(itemSelectionParameterElement));
        itemSelectionAlgorithm.setParameters(ImmutableList.of(param, param2));
        return itemSelectionAlgorithm;
    }
}
