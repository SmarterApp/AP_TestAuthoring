/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.rest.secured;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.nio.charset.Charset;
import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.BlueprintReferenceType;
import org.opentestsystem.authoring.testauth.domain.ComputationRule;
import org.opentestsystem.authoring.testauth.domain.ComputationRuleMultiplicityType;
import org.opentestsystem.authoring.testauth.domain.ComputationRuleParameter;
import org.opentestsystem.authoring.testauth.domain.ComputationRuleType;
import org.opentestsystem.authoring.testauth.domain.ConversionTableType;
import org.opentestsystem.authoring.testauth.domain.DictionaryIndexType;
import org.opentestsystem.authoring.testauth.domain.Permissions;
import org.opentestsystem.authoring.testauth.domain.ReportingMeasure;
import org.opentestsystem.authoring.testauth.domain.ScoringRule;
import org.opentestsystem.authoring.testauth.domain.ScoringRuleDictionaryElement;
import org.opentestsystem.authoring.testauth.domain.ScoringRuleParameter;
import org.opentestsystem.authoring.testauth.persistence.GridFsRepository;
import org.opentestsystem.authoring.testauth.rest.AbstractSecuredRestEmbeddedMongoTest;
import org.opentestsystem.authoring.testauth.service.ComputationRuleService;
import org.opentestsystem.authoring.testauth.service.ReportingMeasureService;
import org.opentestsystem.authoring.testauth.service.ScoringRuleService;
import org.opentestsystem.shared.docs.annotation.ApiDocExample;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.Lists;
import com.mongodb.gridfs.GridFSFile;

public class ScoringAuthorizationTest extends AbstractSecuredRestEmbeddedMongoTest {
    private static final String SCORING_FUNCTION_URL = "/computationRule";
    private static final String SCORING_RULE_URL = "/scoringRule";
    private static final String REPORTING_MEASURE_URL = "/reportingMeasure";

    @Autowired
    private ComputationRuleService computationRuleService;

    @Autowired
    private ScoringRuleService scoringRuleService;

    @Autowired
    private ReportingMeasureService reportingMeasureService;

    @Autowired
    private transient GridFsRepository gridFsRepository;

    private List<Permissions> permissions;
    private ComputationRule savedComputationRule;
    private ScoringRule savedScoringRule;
    private GridFSFile gridFsFile;
    private ReportingMeasure savedReportingMeasure;

    @ApiDocExample(rank = -1)
    @Before
    public void setupTestData() {
        this.permissions = Lists.newArrayList();
    }

    /**************************************** Scoring Function ****************************************/
    @Test
    public void testSetupRead() {
        setupComputationRule();
        this.permissions.add(Permissions.SETUP_READ);
        setUserWithRoles(this.permissions);
        final ComputationRule fetchedComputationRule = callGETRestService(SCORING_FUNCTION_URL + "/" + this.savedComputationRule.getId(), ComputationRule.class);
        assertThat(fetchedComputationRule, is(notNullValue()));
        assertThat(fetchedComputationRule.getId(), is(notNullValue()));
    }

    @Test
    public void testSetupModify() {
        this.permissions.add(Permissions.SETUP_MODIFY);
        setUserWithRoles(this.permissions);
        final Map<String, Object> computationRuleParams = buildComputationRuleMap();
        computationRuleParams.put("description", "New Description");
        final ComputationRule updatedComputationRule = callPUTRestService(SCORING_FUNCTION_URL + "/" + computationRuleParams.get("id"), computationRuleParams, ComputationRule.class);
        assertThat(updatedComputationRule, is(notNullValue()));
        assertThat(updatedComputationRule.getDescription(), is(equalTo("New Description")));
        assertThat(updatedComputationRule.getId(), is(notNullValue()));
    }

    @Test
    public void testSetupReadFail() {
        setupComputationRule();
        this.permissions.add(Permissions.SETUP_MODIFY);
        setUserWithRoles(this.permissions);
        final ComputationRule fetchedComputationRule = callGETRestService(SCORING_FUNCTION_URL + "/" + this.savedComputationRule.getId(), ComputationRule.class, status().isUnauthorized());
        assertThat(fetchedComputationRule, is(notNullValue()));
        assertThat(fetchedComputationRule.getId(), is(nullValue()));
    }

    @Test
    public void testSetupModifyFail() {
        this.permissions.add(Permissions.SETUP_READ);
        setUserWithRoles(this.permissions);
        final Map<String, Object> computationRuleParams = buildComputationRuleMap();
        computationRuleParams.put("description", "New Description");
        final ComputationRule updatedComputationRule = callPUTRestService(SCORING_FUNCTION_URL + "/" + computationRuleParams.get("id"), computationRuleParams, ComputationRule.class, status()
                .isUnauthorized());
        assertThat(updatedComputationRule, is(notNullValue()));
    }

    /**************************************** Scoring Rule ****************************************/
    @Test
    public void testScoringRuleRead() {
        setupComputationRule();
        setupScoringRule(1);
        this.permissions.add(Permissions.SCORING_RULE_READ);
        setUserWithRoles(this.permissions);
        final ScoringRule fetchedScoringRule = callGETRestService(SCORING_RULE_URL + "/" + this.savedScoringRule.getId(), ScoringRule.class);
        assertThat(fetchedScoringRule, is(notNullValue()));
        assertThat(fetchedScoringRule.getId(), is(notNullValue()));
    }

    @Test
    public void testScoringRuleModify() {
        setupComputationRule();
        this.permissions.add(Permissions.SCORING_RULE_MODIFY);
        setUserWithRoles(this.permissions);
        final Map<String, Object> scoringRuleParams = buildScoringRuleMap(0);
        scoringRuleParams.put("id", scoringRuleParams.get("id"));
        scoringRuleParams.put("label", "New Label");
        final ScoringRule updatedScoringRule = callPUTRestService(SCORING_RULE_URL + "/" + scoringRuleParams.get("id"), scoringRuleParams, ScoringRule.class);
        assertThat(updatedScoringRule, is(notNullValue()));
        assertThat(updatedScoringRule.getLabel(), is(equalTo("New Label")));
    }

    @Test
    public void testScoringRuleReadFail() {
        setupComputationRule();
        setupScoringRule(2);
        this.permissions.add(Permissions.SCORING_RULE_MODIFY);
        setUserWithRoles(this.permissions);
        final ScoringRule fetchedScoringRule = callGETRestService(SCORING_RULE_URL + "/" + this.savedScoringRule.getId(), ScoringRule.class, status().isUnauthorized());
        assertThat(fetchedScoringRule, is(notNullValue()));
        assertThat(fetchedScoringRule.getId(), is(nullValue()));
    }

    @Test
    public void testScoringRuleModifyFail() {
        setupComputationRule();
        this.permissions.add(Permissions.SCORING_RULE_READ);
        setUserWithRoles(this.permissions);
        final Map<String, Object> scoringRuleParams = buildScoringRuleMap(0);
        scoringRuleParams.put("id", scoringRuleParams.get("id"));
        scoringRuleParams.put("label", "New Label");
        final ScoringRule updatedScoringRule = callPUTRestService(SCORING_RULE_URL + "/" + scoringRuleParams.get("id"), scoringRuleParams, ScoringRule.class, status()
                .isUnauthorized());
        assertThat(updatedScoringRule, is(notNullValue()));
        assertThat(updatedScoringRule.getId(), is(nullValue()));
    }

    /**************************************** Reporting Measure ****************************************/
    @Test
    public void testReportingMeasureRead() {
        setupReportingMeasure(1);
        this.permissions.add(Permissions.REPORTING_MEASURE_READ);
        setUserWithRoles(this.permissions);
        final ReportingMeasure fetchedReportingMeasure = callGETRestService(REPORTING_MEASURE_URL + "/" + this.savedReportingMeasure.getId(), ReportingMeasure.class);
        assertThat(fetchedReportingMeasure, is(notNullValue()));
        assertThat(fetchedReportingMeasure.getId(), is(notNullValue()));
    }

    @Test
    public void testReportingMeasureModify() {
        this.permissions.add(Permissions.REPORTING_MEASURE_MODIFY);
        setUserWithRoles(this.permissions);
        final Map<String, Object> reportingMeasureParams = buildReportingMeasureMap(1);
        reportingMeasureParams.put("id", reportingMeasureParams.get("id"));
        reportingMeasureParams.put("scoringRuleIdList", reportingMeasureParams.get("scoringRuleIdList"));
        final ReportingMeasure updatedReportingMeasure = callPUTRestService(REPORTING_MEASURE_URL + "/" + reportingMeasureParams.get("id"), reportingMeasureParams, ReportingMeasure.class);
        assertThat(updatedReportingMeasure, is(notNullValue()));
        assertThat(updatedReportingMeasure.getBlueprintReferenceName(), is(equalTo(reportingMeasureParams.get("blueprintReferenceName"))));
    }

    @Test
    public void testReportingMeasureReadFail() {
        setupReportingMeasure(2);
        this.permissions.add(Permissions.REPORTING_MEASURE_MODIFY);
        setUserWithRoles(this.permissions);
        final ReportingMeasure fetchedReportingMeasure = callGETRestService(REPORTING_MEASURE_URL + "/" + this.savedReportingMeasure.getId(), ReportingMeasure.class, status().isUnauthorized());
        assertThat(fetchedReportingMeasure, is(notNullValue()));
        assertThat(fetchedReportingMeasure.getId(), is(nullValue()));
    }

    @Test
    public void testReportingMeasureModifyFail() {
        this.permissions.add(Permissions.REPORTING_MEASURE_READ);
        setUserWithRoles(this.permissions);
        final Map<String, Object> reportingMeasureParams = buildReportingMeasureMap(0);
        reportingMeasureParams.put("id", reportingMeasureParams.get("id"));
        reportingMeasureParams.put("blueprintReferenceName", "BP Reference Name");
        final ReportingMeasure updatedReportingMeasure = callPUTRestService(REPORTING_MEASURE_URL + "/" + reportingMeasureParams.get("id"), reportingMeasureParams, ReportingMeasure.class, status()
                .isUnauthorized());
        assertThat(updatedReportingMeasure, is(notNullValue()));
        assertThat(updatedReportingMeasure.getId(), is(nullValue()));
    }

    /***********************************************************************************************/

    void setupComputationRule() {
        final String sampleGridFile = "sample grid file data";
        this.gridFsFile = this.gridFsRepository.save(sampleGridFile.getBytes(Charset.forName("UTF-8")), "Grid File Name", "plain/text", null);

        this.savedComputationRule = saveSampleComputationRule();
    }

    private ComputationRule saveSampleComputationRule() {
        final ComputationRule computationRule = PODAM_FACTORY.manufacturePojo(ComputationRule.class);
        computationRule.setId(null);
        computationRule.setConversionTableType(ConversionTableType.VALUE);
        computationRule.getParameters().clear();
        computationRule.setVersion("1.0");
        final ComputationRuleParameter computationRuleParameter = new ComputationRuleParameter();
        computationRuleParameter.setParameterName("parameter1");
        computationRuleParameter.setComputationRuleType(ComputationRuleType.INTEGER);
        computationRuleParameter.setDefaultValue("1");
        computationRuleParameter.setMinimumValue("1");
        computationRuleParameter.setMaximumValue("999");
        computationRuleParameter.setComputationRuleMultiplicityType(ComputationRuleMultiplicityType.DICTIONARY);
        computationRuleParameter.setDictionaryIndexType(DictionaryIndexType.STRING);
        computationRuleParameter.setPosition(1);
        computationRule.getParameters().add(computationRuleParameter);
        final ComputationRuleParameter computationRuleParameter2 = new ComputationRuleParameter();
        computationRuleParameter2.setParameterName("parameter2");
        computationRuleParameter2.setComputationRuleType(ComputationRuleType.STRING);
        computationRuleParameter2.setDefaultValue("Q");
        computationRuleParameter2.setComputationRuleMultiplicityType(ComputationRuleMultiplicityType.SCALAR);
        computationRuleParameter2.setPosition(2);
        computationRule.getParameters().add(computationRuleParameter2);
        final ComputationRuleParameter computationRuleParameter3 = new ComputationRuleParameter();
        computationRuleParameter3.setParameterName("parameter3");
        computationRuleParameter3.setComputationRuleType(ComputationRuleType.FLOAT);
        computationRuleParameter3.setDefaultValue("1.01");
        computationRuleParameter3.setMinimumValue("1.00");
        computationRuleParameter3.setMaximumValue("99.99");
        computationRuleParameter3.setComputationRuleMultiplicityType(ComputationRuleMultiplicityType.DICTIONARY);
        computationRuleParameter3.setDictionaryIndexType(DictionaryIndexType.INTEGER);
        computationRuleParameter3.setPosition(3);
        computationRule.getParameters().add(computationRuleParameter3);
        final ComputationRuleParameter computationRuleParameter4 = new ComputationRuleParameter();
        computationRuleParameter4.setParameterName("parameter4");
        computationRuleParameter4.setComputationRuleType(ComputationRuleType.INTEGER);
        computationRuleParameter4.setDefaultValue("15");
        computationRuleParameter4.setMinimumValue("10");
        computationRuleParameter4.setMaximumValue("20");
        computationRuleParameter4.setComputationRuleMultiplicityType(ComputationRuleMultiplicityType.SCALAR);
        computationRuleParameter4.setPosition(4);
        computationRule.getParameters().add(computationRuleParameter4);
        return this.computationRuleService.createComputationRule(computationRule);
    }

    void setupScoringRule(final int uniqueId) {
        this.savedScoringRule = saveSampleScoringRule(uniqueId);
    }

    private ScoringRule saveSampleScoringRule(final int uniqueId) {
        final ScoringRule scoringRule = PODAM_FACTORY.manufacturePojo(ScoringRule.class);
        scoringRule.setId(null);
        scoringRule.setAssessmentId("assessment-id-" + uniqueId);
        scoringRule.setOrder(Integer.valueOf(1));
        scoringRule.setBlueprintReferenceType(BlueprintReferenceType.TEST);
        scoringRule.setBlueprintReferenceId("assessment-id-" + uniqueId);
        scoringRule.setComputationRuleId(this.savedComputationRule.getId());
        scoringRule.setComputationRule(null);
        scoringRule.setValueConversionTableGridFsId(this.gridFsFile.getId().toString());
        scoringRule.setStandardErrorConversionTableGridFsId(null);
        scoringRule.getParameters().clear();
        scoringRule.getParameters().add(manufactureValidScoringRuleParameter("parameter1", false));
        scoringRule.getParameters().add(new ScoringRuleParameter("parameter2", ComputationRuleMultiplicityType.SCALAR, "soleString"));
        scoringRule.getParameters().add(manufactureValidScoringRuleParameter("parameter3", true));
        scoringRule.getParameters().add(new ScoringRuleParameter("parameter4", ComputationRuleMultiplicityType.SCALAR, "11"));
        return this.scoringRuleService.saveScoringRule(null, scoringRule);
    }

    private ScoringRuleParameter manufactureValidScoringRuleParameter(final String parameterName, final boolean isIntegerKeyAndFloatVal) {
        final List<ScoringRuleDictionaryElement> scoringRuleDictionaryElementList = Lists.newArrayList();
        for (int ii = 0; ii < 5; ii++) {
            final String val = String.valueOf(ii + 1);
            scoringRuleDictionaryElementList.add(new ScoringRuleDictionaryElement(isIntegerKeyAndFloatVal ? val : "parameterValueKey" + val, isIntegerKeyAndFloatVal ? val + ".99" : val));
        }
        return new ScoringRuleParameter(parameterName, ComputationRuleMultiplicityType.DICTIONARY, scoringRuleDictionaryElementList);
    }

    private Map<String, Object> buildComputationRuleMap() {
        return buildParamObject(saveSampleComputationRule());
    }

    private Map<String, Object> buildScoringRuleMap(final int uniqueId) {
        return buildParamObject(saveSampleScoringRule(uniqueId));
    }

    void setupReportingMeasure(final int uniqueId) {
        this.savedReportingMeasure = saveSampleReportingMeasure(uniqueId);
    }

    private ReportingMeasure saveSampleReportingMeasure(final int uniqueId) {
        setupComputationRule();
        final ScoringRule aSavedScoringRule = saveSampleScoringRule(uniqueId);
        final ReportingMeasure reportingMeasure = PODAM_FACTORY.manufacturePojo(ReportingMeasure.class);
        reportingMeasure.setId(null);
        reportingMeasure.setAssessmentId("assessment-id-" + uniqueId);
        reportingMeasure.setBlueprintReferenceType(BlueprintReferenceType.TEST);
        reportingMeasure.setBlueprintReferenceId("assessment-id-" + uniqueId);
        reportingMeasure.setScoringRuleIdList(Lists.newArrayList(aSavedScoringRule.getId()));
        return this.reportingMeasureService.saveReportingMeasure(null, reportingMeasure);
    }

    private Map<String, Object> buildReportingMeasureMap(final int uniqueId) {
        return buildParamObject(saveSampleReportingMeasure(uniqueId));
    }
}
