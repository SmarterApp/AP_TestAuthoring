/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.validation;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.authoring.testauth.domain.Publication;
import org.opentestsystem.authoring.testauth.domain.Subject;
import org.opentestsystem.authoring.testauth.service.SubjectService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;
import org.springframework.util.CollectionUtils;
import org.springframework.validation.Errors;
import org.springframework.validation.Validator;

@Component
public class PublicationValidator extends AbstractDomainValidator
{
    private static final String ERROR_MSG_ROOT = "publication.";
    private static final String SUBJECT_IDS_FIELD = "subjectIds";
    private static final String MSG_TENANT_INVALID = ".tenant" + MSG_INVALID;

    @Autowired
    @Qualifier("jsr303Validator")
    private Validator jsrValidator;

    @Autowired
    private SubjectService subjectService;

    @Override
    public boolean supports(final Class<?> clazz) {
        return Publication.class.equals(clazz);
    }

    @Override
    public void validate(final Object obj, final Errors errors) {
        // execute JSR-303 validations (annotations)
        this.jsrValidator.validate(obj, errors);

        final Publication publication = (Publication) obj;

        // validate subject ids
        if (StringUtils.isNotEmpty(publication.getTenantId()) && !CollectionUtils.isEmpty(publication.getSubjectIds())) {
            for (final String subjectId : publication.getSubjectIds()) {
                final Subject subject = subjectService.getSubject(subjectId);

                if (subject == null) {
                    rejectValue(errors, SUBJECT_IDS_FIELD, getErrorMessageRoot() + SUBJECT_IDS_FIELD + MSG_INVALID, subjectId);
                } else if (!publication.getTenantId().equals(subject.getTenantId())) {
                    rejectValue(errors, SUBJECT_IDS_FIELD, getErrorMessageRoot() + SUBJECT_IDS_FIELD + MSG_TENANT_INVALID, subjectId);
                }
            }
        }
    }

    @Override
    protected String getErrorMessageRoot() {
        return ERROR_MSG_ROOT;
    }
}
