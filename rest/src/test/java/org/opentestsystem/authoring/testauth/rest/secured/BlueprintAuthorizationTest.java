/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.rest.secured;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.HashSet;
import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.BlueprintElement;
import org.opentestsystem.authoring.testauth.domain.DomainFactory;
import org.opentestsystem.authoring.testauth.domain.Permissions;
import org.opentestsystem.authoring.testauth.domain.Segment;
import org.opentestsystem.authoring.testauth.rest.AbstractSecuredRestEmbeddedMongoTest;
import org.opentestsystem.authoring.testauth.service.BlueprintElementService;
import org.opentestsystem.shared.docs.annotation.ApiDocExample;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.Lists;

public class BlueprintAuthorizationTest extends AbstractSecuredRestEmbeddedMongoTest {
    private static final String BLUEPRINT_ELEMENT_URL = "/blueprintElement";

    @Autowired
    private BlueprintElementService blueprintElementService;

    private List<Permissions> permissions;
    private BlueprintElement savedBlueprintElement;

    @ApiDocExample(rank = -1)
    @Before
    public void setupTestData() {
        permissions = Lists.newArrayList();
    }

    void setupBlueprintElement(final int uniqueId) {
        this.savedBlueprintElement = saveSampleBlueprintElement(uniqueId);
    }

    /**************************************** Blueprint ****************************************/
    @Test
    public void testBlueprintRead() {
        setupBlueprintElement(1);
        permissions.add(Permissions.BLUEPRINT_READ);
        setUserWithRoles(permissions);
        final BlueprintElement fetchedBlueprintElement = callGETRestService(BLUEPRINT_ELEMENT_URL + "/" + this.savedBlueprintElement.getId(), BlueprintElement.class);
        assertThat(fetchedBlueprintElement, is(notNullValue()));
        assertThat(fetchedBlueprintElement.getId(), is(notNullValue()));
    }

    @Test
    public void testBlueprintModify() {
        permissions.add(Permissions.BLUEPRINT_MODIFY);
        setUserWithRoles(permissions);
        final Map<String, Object> blueprintElementParams = buildBlueprintElementMap(0);
        blueprintElementParams.put("textDescription", "New Text Description");
        final BlueprintElement updatedBlueprintElement = callPUTRestService(BLUEPRINT_ELEMENT_URL + "/" + blueprintElementParams.get("id"), blueprintElementParams, BlueprintElement.class);
        assertThat(updatedBlueprintElement, is(notNullValue()));
        assertThat(updatedBlueprintElement.getTextDescription(), is(equalTo("New Text Description")));
        assertThat(updatedBlueprintElement.getId(), is(notNullValue()));
    }

    @Test
    public void testBlueprintReadFail() {
        setupBlueprintElement(3);
        permissions.add(Permissions.BLUEPRINT_MODIFY);
        setUserWithRoles(permissions);
        final BlueprintElement fetchedBlueprintElement = callGETRestService(BLUEPRINT_ELEMENT_URL + "/" + this.savedBlueprintElement.getId(), BlueprintElement.class, status().isUnauthorized());
        assertThat(fetchedBlueprintElement, is(notNullValue()));
        assertThat(fetchedBlueprintElement.getId(), is(nullValue()));
    }

    @Test
    public void testBlueprintModifyFail() {
        permissions.add(Permissions.BLUEPRINT_READ);
        setUserWithRoles(permissions);
        final Map<String, Object> blueprintElementParams = buildBlueprintElementMap(0);
        blueprintElementParams.put("textDescription", "New Text Description");
        final BlueprintElement updatedBlueprintElement = callPUTRestService(BLUEPRINT_ELEMENT_URL + "/" + blueprintElementParams.get("id"), blueprintElementParams, BlueprintElement.class, status()
                .isUnauthorized());
        assertThat(updatedBlueprintElement, is(notNullValue()));
    }

    /***********************************************************************************************/

    private BlueprintElement saveSampleBlueprintElement(final int uniqueId) {
        final BlueprintElement blueprintElement = DomainFactory.manufactureValidBlueprintElement("assessment-id-", new HashSet<Segment>());
        blueprintElement.setStandardKey("standard-key-" + uniqueId);
        blueprintElement.setLevel("level" + uniqueId);
        blueprintElement.setGrade(uniqueId + "");
        blueprintElement.setTextDescription("textDescription" + uniqueId);
        blueprintElement.setActive(true);
        blueprintElement.setLevel("level" + uniqueId);
        return this.blueprintElementService.saveBlueprintElement(null, blueprintElement);
    }

    private Map<String, Object> buildBlueprintElementMap(final int uniqueId) {
        return buildParamObject(saveSampleBlueprintElement(uniqueId));
    }

}
