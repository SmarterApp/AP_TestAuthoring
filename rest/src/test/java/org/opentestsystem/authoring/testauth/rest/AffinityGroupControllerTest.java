/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.rest;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.AffinityGroup;
import org.opentestsystem.authoring.testauth.domain.Assessment;
import org.opentestsystem.authoring.testauth.domain.DomainFactory;
import org.opentestsystem.authoring.testauth.domain.ItemMoveResponse;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionAlgorithm;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionPurpose;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionType;
import org.opentestsystem.authoring.testauth.domain.Publication;
import org.opentestsystem.authoring.testauth.domain.Segment;
import org.opentestsystem.authoring.testauth.domain.Subject;
import org.opentestsystem.authoring.testauth.service.AssessmentService;
import org.opentestsystem.authoring.testauth.service.ItemSelectionAlgorithmService;
import org.opentestsystem.authoring.testauth.service.PublicationService;
import org.opentestsystem.authoring.testauth.service.SegmentService;
import org.opentestsystem.authoring.testauth.service.SubjectService;
import org.opentestsystem.shared.docs.annotation.ApiDocExample;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;

public class AffinityGroupControllerTest extends AbstractRestEmbeddedMongoTest {

    private static final String BASE_URL = "/affinityGroup/";

    @Autowired
    private SegmentService segmentService;

    @Autowired
    private ItemSelectionAlgorithmService itemSelectionAlgorithmService;

    @Autowired
    private SubjectService subjectService;

    @Autowired
    private PublicationService publicationService;

    @Autowired
    private AssessmentService assessmentService;

    private Assessment savedAssessment;

    private AffinityGroup justGiveMeOne() {
        return justGiveMeOne(new ArrayList<Segment>());
    }

    private AffinityGroup justGiveMeOne(final Collection<Segment> segments) {
        final AffinityGroup grp = DomainFactory.manufactureValidAffinityGroup(savedAssessment.getId(), segments);
        grp.setId(null);
        final AffinityGroup savedGroup = callPOSTRestService(BASE_URL, buildParamObject(grp), AffinityGroup.class);
        assertThat(savedGroup, is(notNullValue()));
        assertThat(savedGroup.getId(), is(notNullValue()));
        return savedGroup;
    }

    @ApiDocExample(rank = -1)
    @Before
    public void setupTestData() throws InterruptedException {
        final Subject savedSubject = this.subjectService.saveSubject(DomainFactory.manufactureValidSubject("ABB"));
        final Publication savedPublication = this.publicationService.savePublication(PODAM_FACTORY.manufacturePojo(Publication.class));
        savedAssessment = this.assessmentService.saveAssessment(DomainFactory.manufactureValidAssessment(savedSubject, savedPublication));

        final ItemSelectionAlgorithm algorithm = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.BOOLEAN);
        final ItemSelectionAlgorithm savedAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithm);
        this.segmentService.createSegment(DomainFactory.manufactureValidSegment(savedAssessment.getId(), savedAlgorithm, 1));
    }

    @Test
    @ApiDocExample(rank = 1)
    public void saveReadAffinityGroup() throws InterruptedException {
        final AffinityGroup grp = justGiveMeOne();

        final AffinityGroup readObj = callGETRestService(BASE_URL + grp.getId(), AffinityGroup.class);
        assertThat(readObj.getId(), is(equalTo(grp.getId())));
        assertThat(readObj.getGroupName(), is(equalTo(grp.getGroupName())));
        assertThat(readObj.getAssessmentId(), is(equalTo(grp.getAssessmentId())));
    }

    @Test
    @ApiDocExample(rank = 2)
    public void updateOne() throws InterruptedException {
        final AffinityGroup grp = justGiveMeOne();

        final AffinityGroup untouched = callGETRestService(BASE_URL + grp.getId(), AffinityGroup.class);

        grp.setGroupName("JonnyUtah");
        final AffinityGroup updated = callPUTRestService(BASE_URL + grp.getId(), buildParamObject(grp), AffinityGroup.class);

        assertThat(grp.getId(), is(equalTo(updated.getId())));
        assertThat(grp.getGroupName(), is(equalTo(updated.getGroupName())));
        assertThat(grp.getAssessmentId(), is(equalTo(updated.getAssessmentId())));

        assertThat(untouched.getId(), is(equalTo(updated.getId())));
        assertThat(untouched.getGroupName(), is(not(equalTo(updated.getGroupName()))));
        assertThat(untouched.getAssessmentId(), is(equalTo(updated.getAssessmentId())));
    }

    @Test
    @ApiDocExample(rank = 3)
    public void deleteOne() throws InterruptedException {
        final AffinityGroup grp = justGiveMeOne();
        callDeleteRestService(BASE_URL + grp.getId());
        final AffinityGroup nonthere = callGETRestService(BASE_URL + grp.getId(), AffinityGroup.class);
        assertThat(nonthere, is(nullValue()));
    }

    @SuppressWarnings("unchecked")
    @ApiDocExample(rank = 4)
    @Test
    public void updateAffinityList() {
        final Map<String, Object> affinityGroupParams = buildParamObject(justGiveMeOne());
        affinityGroupParams.put("groupName", "new groupName");

        final Map<String, Object> affinityGroupListParams = ImmutableMap.of("affinityGroups", (Object) ImmutableList.of(affinityGroupParams));

        final List<Map<String, Object>> updatedAffinityGroupList = callPUTRestService(BASE_URL, affinityGroupListParams, List.class);
        assertThat(updatedAffinityGroupList.size(), is(1));
        assertThat(updatedAffinityGroupList.get(0).get("groupName").toString(), is(equalTo("new groupName")));
    }

    @ApiDocExample(rank = 5)
    @Test
    public void attachItemsToAffinityGroup() {
        final AffinityGroup affinityGroup = justGiveMeOne();
        final List<Object> itemIdentifiers = ImmutableList.of((Object) "apipitem_1", "apipitem_2");
        final ItemMoveResponse response = callPUTRestServiceWithSimpleList(BASE_URL + affinityGroup.getId() + "/attachItems", itemIdentifiers, ItemMoveResponse.class);

        assertThat(response.getItemsImpacted(), is(0));
        assertThat(response.getItemsOmitted(), is(2));
    }

    @ApiDocExample(rank = 6)
    @Test
    public void detachItemsFromAffinityGroup() {
        final AffinityGroup affinityGroup = justGiveMeOne();
        final List<Object> itemIdentifiers = ImmutableList.of((Object) "apipitem_1", "apipitem_2");
        final ItemMoveResponse response = callPUTRestServiceWithSimpleList(BASE_URL + affinityGroup.getId() + "/detachItems", itemIdentifiers, ItemMoveResponse.class);

        assertThat(response.getItemsImpacted(), is(0));
        assertThat(response.getItemsOmitted(), is(2));
    }
}
