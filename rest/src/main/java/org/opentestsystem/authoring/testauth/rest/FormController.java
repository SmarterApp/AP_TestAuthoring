/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.rest;

import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.opentestsystem.authoring.testauth.domain.Form;
import org.opentestsystem.authoring.testauth.service.FormService;
import org.opentestsystem.authoring.testauth.validation.AssessmentFormValidator;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.opentestsystem.shared.web.AbstractRestController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.access.annotation.Secured;
import org.springframework.security.access.prepost.PostAuthorize;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

/**
 * Used to retrieve form info
 */
@Controller
public class FormController extends AbstractRestController {

    @Autowired
    private FormService formService;

    @Autowired
    private AssessmentFormValidator assessmentFormValidator;

    @Resource(name = "languageMap")
    private Map<String, String> languageMap;

    @InitBinder("form")
    public void initBinder(final WebDataBinder binder) {
        binder.setValidator(this.assessmentFormValidator);
    }

    @RequestMapping(value = "/form/{formId}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Test Read" })
    @PostAuthorize("hasPermission(returnObject, 'ROLE_Test Read')")
    @ResponseBody
    public Form findFormById(@PathVariable final String formId) {
        return this.formService.getForm(formId);
    }

    @ResponseStatus(HttpStatus.CREATED)
    @RequestMapping(value = "/form", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Test Modify" })
    @PreAuthorize("hasPermission(#form, 'ROLE_Test Modify')")
    @ResponseBody
    public Form saveForm(@RequestBody @Valid final Form form, final HttpServletResponse response) {
        return this.formService.saveForm(null, form);
    }

    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "/form/{formId}", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Test Modify" })
    @PreAuthorize("hasPermission(#form, 'ROLE_Test Modify')")
    @ResponseBody
    public Form updateForm(@PathVariable final String formId, @RequestBody @Valid final Form form, final HttpServletResponse response) {
        return this.formService.saveForm(formId, form);
    }

    @RequestMapping(value = "/form/{formId}", method = RequestMethod.DELETE)
    @Secured({ "ROLE_Test Modify" })
    @PreAuthorize("hasPermission(#formId, 'form', 'ROLE_Test Modify')")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    public void removeFormById(@PathVariable final String formId) {
        this.formService.removeForm(formId);
    }

    @RequestMapping(value = "/form", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Test Read" })
    @PostAuthorize("hasPermission(returnObject, 'ROLE_Test Read')")
    @ResponseBody
    public SearchResponse<Form> searchForm(final HttpServletRequest request, final HttpServletResponse response) {
        final SearchResponse<Form> results = this.formService.searchForms(request.getParameterMap());
        this.formService.populateReferenceData(results.getSearchResults());
        return results;
    }

    @RequestMapping(value = "/form/languages", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Test Read" })
    //NOTE intentionally no @Preauthorize; languages are not tenanted
    @ResponseBody
    public Map<String, String> getLanguages() {
        return this.languageMap;
    }
}
