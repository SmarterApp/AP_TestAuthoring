/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.integration;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;

import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionAlgorithm;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionAlgorithmParameter;
import org.opentestsystem.authoring.testauth.persistence.ItemSelectionAlgorithmRepository;
import org.opentestsystem.authoring.testauth.rest.AbstractRestEmbeddedMongoTest;
import org.springframework.beans.factory.annotation.Autowired;

public class ItemSelectionAlgorithmRepositoryTest extends AbstractRestEmbeddedMongoTest {

    @Autowired
    private ItemSelectionAlgorithmRepository itemSelectionAlgorithmRepository;

    @Test
    public void saveItemSelectionAlgorithmTest() {
        final ItemSelectionAlgorithm itemSelectionAlgorithm = PODAM_FACTORY.manufacturePojo(ItemSelectionAlgorithm.class);
        itemSelectionAlgorithm.getParameters().clear();
        itemSelectionAlgorithm.getParameters().add(PODAM_FACTORY.manufacturePojo(ItemSelectionAlgorithmParameter.class));
        itemSelectionAlgorithm.getParameters().get(0).setPosition(1);
        final ItemSelectionAlgorithm savedItemSelectionAlgorithm = this.itemSelectionAlgorithmRepository.save(itemSelectionAlgorithm);
        assertThat(savedItemSelectionAlgorithm, is(notNullValue()));
        assertThat(savedItemSelectionAlgorithm.getId(), is(notNullValue()));
    }

    @Test
    public void findItemSelectionAlgorithmTest() {
        final ItemSelectionAlgorithm itemSelectionAlgorithm = PODAM_FACTORY.manufacturePojo(ItemSelectionAlgorithm.class);
        itemSelectionAlgorithm.getParameters().clear();
        itemSelectionAlgorithm.getParameters().add(PODAM_FACTORY.manufacturePojo(ItemSelectionAlgorithmParameter.class));
        itemSelectionAlgorithm.getParameters().get(0).setPosition(1);
        final ItemSelectionAlgorithm savedItemSelectionAlgorithm = this.itemSelectionAlgorithmRepository.save(itemSelectionAlgorithm);
        assertThat(savedItemSelectionAlgorithm, is(notNullValue()));
        final ItemSelectionAlgorithm foundItemSelectionAlgorithm = this.itemSelectionAlgorithmRepository.findOne(savedItemSelectionAlgorithm.getId());
        assertThat(savedItemSelectionAlgorithm.getId(), is(equalTo(foundItemSelectionAlgorithm.getId())));
        assertThat(savedItemSelectionAlgorithm, is(equalTo(foundItemSelectionAlgorithm)));
    }

    @Test
    public void removeItemSelectionAlgorithmTest() {
        final ItemSelectionAlgorithm itemSelectionAlgorithm = PODAM_FACTORY.manufacturePojo(ItemSelectionAlgorithm.class);
        itemSelectionAlgorithm.getParameters().clear();
        itemSelectionAlgorithm.getParameters().add(PODAM_FACTORY.manufacturePojo(ItemSelectionAlgorithmParameter.class));
        itemSelectionAlgorithm.getParameters().get(0).setPosition(1);
        final ItemSelectionAlgorithm savedItemSelectionAlgorithm = this.itemSelectionAlgorithmRepository.save(itemSelectionAlgorithm);
        this.itemSelectionAlgorithmRepository.delete(itemSelectionAlgorithm);
        final ItemSelectionAlgorithm foundItemSelectionAlgorithm = this.itemSelectionAlgorithmRepository.findOne(savedItemSelectionAlgorithm.getId());
        assertThat(foundItemSelectionAlgorithm, is(nullValue()));
    }
}
