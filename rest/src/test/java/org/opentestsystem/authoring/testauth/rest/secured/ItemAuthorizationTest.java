/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.rest.secured;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.AdaptiveItemLocation;
import org.opentestsystem.authoring.testauth.domain.Item;
import org.opentestsystem.authoring.testauth.domain.Permissions;
import org.opentestsystem.authoring.testauth.rest.AbstractSecuredRestEmbeddedMongoTest;
import org.opentestsystem.authoring.testauth.service.ItemService;
import org.opentestsystem.shared.docs.annotation.ApiDocExample;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.Lists;

public class ItemAuthorizationTest extends AbstractSecuredRestEmbeddedMongoTest {
    private static final String ITEM_URL = "/item";

    @Autowired
    private ItemService itemService;

    private List<Permissions> permissions;
    private Item savedItem;

    @ApiDocExample(rank = -1)
    @Before
    public void setupTestData() {
        permissions = Lists.newArrayList();
    }

    void setupItem(final int uniqueId) {
        this.savedItem = saveSampleItem(uniqueId);
    }

    /**************************************** Pool ****************************************/
    @Test
    public void testPoolRead() {
        setupItem(1);
        permissions.add(Permissions.POOL_READ);
        setUserWithRoles(permissions);
        final Item fetchedItem = callGETRestService(ITEM_URL + "/" + this.savedItem.getId(), Item.class);
        assertThat(fetchedItem, is(notNullValue()));
        assertThat(fetchedItem.getId(), is(notNullValue()));
    }

    @Test
    public void testPoolModify() {
        permissions.add(Permissions.POOL_MODIFY);
        setUserWithRoles(permissions);
        Map<String, Object> itemParams = buildItemMap(0);
        itemParams.put("status", "New Status");
        final Item updatedItem = callPUTRestService(ITEM_URL + "/" + itemParams.get("id"), itemParams, Item.class);
        assertThat(updatedItem, is(notNullValue()));
        assertThat(updatedItem.getStatus(), is(equalTo("New Status")));
        assertThat(updatedItem.getId(), is(notNullValue()));
    }

    @Test
    public void testPoolReadFail() {
        setupItem(3);
        permissions.add(Permissions.POOL_MODIFY);
        setUserWithRoles(permissions);
        final Item fetchedItem = callGETRestService(ITEM_URL + "/" + this.savedItem.getId(), Item.class, status().isUnauthorized());
        assertThat(fetchedItem, is(notNullValue()));
        assertThat(fetchedItem.getId(), is(nullValue()));
    }

    @Test
    public void testPoolModifyFail() {
        permissions.add(Permissions.POOL_READ);
        setUserWithRoles(permissions);
        Map<String, Object> itemParams = buildItemMap(0);
        itemParams.put("status", "New Status");
        final Item updatedItem = callPUTRestService(ITEM_URL + "/" + itemParams.get("id"), itemParams, Item.class, status().isUnauthorized());
        assertThat(updatedItem, is(notNullValue()));
    }

    /***********************************************************************************************/

    private Item saveSampleItem(final int uniqueId) {
        Item item = new Item();
        item.setAssessmentId("assessment-id-" + uniqueId);
        item.setVersion(Integer.toString(uniqueId));
        item.setIntendedGrade(Integer.toString(uniqueId));
        item.setTibIdentifier("tibIdentifier" + uniqueId);
        item.setPrimaryStandard("standard-key-" + uniqueId);
        item.setStatus("status-" + uniqueId);
        item.setInteractionType("multipleChoice");

        AdaptiveItemLocation ail = new AdaptiveItemLocation();
        ail.setSegmentId("segment-id-" + uniqueId);
        ail.setItemGroupId(Item.NO_GROUP_KEY);
        ail.setFormPartitionId(null);

        item.addItemLocation(ail);
        return this.itemService.saveItem(item);
    }

    private Map<String, Object> buildItemMap(final int uniqueId) {
        return buildParamObject(saveSampleItem(uniqueId));
    }

}
