/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.integration;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.Assert.assertEquals;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.Item;
import org.opentestsystem.authoring.testauth.domain.ItemGroup;
import org.opentestsystem.authoring.testauth.domain.TibImportResult;
import org.opentestsystem.authoring.testauth.service.impl.ItemImportHelper;
import org.opentestsystem.authoring.testitembank.client.TibItem;
import org.opentestsystem.authoring.testitembank.client.TibItemStandardPublication;

public class ItemServiceFixedTibImportsTest extends AbstractAssessmentServiceTest {

    private TibItem getTibItem(final String passageId, final String identifier) {
        final TibItem tibItem = PODAM_FACTORY.manufacturePojo(TibItem.class);
        tibItem.setAssociatedStimulus(passageId);

        final TibItemStandardPublication pub1 = new TibItemStandardPublication();
        pub1.setPrimaryStandard(STANDARD_V1);
        pub1.setPublication(PUBLICATION_V1);

        final TibItemStandardPublication pub2 = new TibItemStandardPublication();
        pub2.setPrimaryStandard(STANDARD_V2);
        pub2.setPublication(PUBLICATION_V2);

        tibItem.setItemStandardPublicationList(Arrays.asList(new TibItemStandardPublication[] { pub1, pub2 }));

        if (passageId == null) {
            tibItem.setStimulusName(null);
        } else {
            tibItem.setStimulusName("passage " + passageId);
        }
        tibItem.setIdentifier(identifier);
        return tibItem;
    }

    @Test
    public void saveTibItems() {
        addFixedFormItem(this.form1Partition11.getId(), "APIP_5000", Item.NO_GROUP_KEY);
        addFixedFormItem(this.form1Partition11.getId(), "APIP_5001", Item.NO_GROUP_KEY);

        final ArrayList<TibItem> itemsToAdd = new ArrayList<TibItem>();
        itemsToAdd.add(getTibItem("", "APIP_5003"));
        itemsToAdd.add(getTibItem("", "APIP_5004"));
        itemsToAdd.add(getTibItem("", "APIP_5005"));

        final TibImportResult importResult = this.itemService.importTibItemsToFormPartition(this.form1Partition11.getId(), null, itemsToAdd);
        assertThat(importResult.getItemsImported(), is(3));
        assertThat(importResult.getItemsOmitted(), is(0));
        assertNumberOfItemsInPartition(this.form1Partition11, 5);
    }

    @Test
    public void saveTibItemWithDuplicate() {
        addFixedFormItem(this.form1Partition11.getId(), "APIP_5000", Item.NO_GROUP_KEY);
        addFixedFormItem(this.form1Partition11.getId(), "APIP_5001", Item.NO_GROUP_KEY);
        addFixedFormItem(this.form1Partition11.getId(), "APIP_5002", Item.NO_GROUP_KEY);

        final ArrayList<TibItem> itemsToAdd = new ArrayList<TibItem>();
        itemsToAdd.add(getTibItem("", "APIP_5001"));
        itemsToAdd.add(getTibItem("", "APIP_5002"));

        final TibImportResult importResult = this.itemService.importTibItemsToFormPartition(this.form1Partition11.getId(), null, itemsToAdd);
        assertThat(importResult.getItemsImported(), is(0));
        assertThat(importResult.getItemsOmitted(), is(2));
        assertNumberOfItemsInPartition(this.form1Partition11, 3);
    }

    @Test
    public void saveTibItemReimportItems() {
        addFixedFormItem(this.form1Partition11.getId(), "APIP_5000", Item.NO_GROUP_KEY);
        addFixedFormItem(this.form1Partition11.getId(), "APIP_5001", Item.NO_GROUP_KEY);
        addFixedFormItem(this.form1Partition11.getId(), "APIP_5002", Item.NO_GROUP_KEY);

        final ArrayList<TibItem> itemsToAdd = new ArrayList<TibItem>();
        itemsToAdd.add(getTibItem(null, "APIP_5005"));
        itemsToAdd.add(getTibItem(null, "APIP_5006"));

        final TibImportResult importResult = this.itemService.importTibItemsToFormPartition(this.form1Partition11.getId(), null, itemsToAdd);
        assertThat(importResult.getItemsImported(), is(2));
        assertThat(importResult.getItemsOmitted(), is(0));
        assertNumberOfItemsInPartition(this.form1Partition11, 5);

        final TibImportResult importResult2 = this.itemService.importTibItemsToFormPartition(this.form1Partition11.getId(), null, itemsToAdd);
        assertThat(importResult2.getItemsImported(), is(0));
        assertThat(importResult2.getItemsOmitted(), is(2));
        assertNumberOfItemsInPartition(this.form1Partition11, 5);

        assertNumberOfItemGroupsInFormPartition(this.form1Partition11, 0);
    }

    @Test
    public void saveTibItemDifferentGroup() {
        final ItemGroup group1 = addFixedFormItemGroup(this.savedAssessment, this.form1Partition11, "groupA");
        final ItemGroup group2 = addFixedFormItemGroup(this.savedAssessment, this.form1Partition11, "groupB");

        assertNumberOfItemGroupsInFormPartition(this.form1Partition11, 2);

        addFixedFormItem(this.form1Partition11.getId(), "APIP_5000", group1.getId());
        addFixedFormItem(this.form1Partition11.getId(), "APIP_5001", group1.getId());
        addFixedFormItem(this.form1Partition11.getId(), "APIP_5002", group1.getId());

        final ArrayList<TibItem> itemsToAdd = new ArrayList<TibItem>();
        itemsToAdd.add(getTibItem(null, "APIP_5000"));
        itemsToAdd.add(getTibItem(null, "APIP_5001"));
        itemsToAdd.add(getTibItem(null, "APIP_5002"));

        final TibImportResult importResult = this.itemService.importTibItemsToFormPartition(this.form1Partition11.getId(), group2.getId(), itemsToAdd);

        assertThat(importResult.getItemsImported(), is(3));
        assertThat(importResult.getItemsOmitted(), is(0));

        assertNumberOfItemsInPartition(this.form1Partition11, 3);

        final List<Item> items = this.itemService.getItemsBySegmentId(this.form1Partition11.getId());
        for (final Item i : items) {
            assertThat(i.getItemLocation().size(), is(2));
        }

        assertNumberOfItemGroupsInFormPartition(this.form1Partition11, 2);
    }

    @Test
    public void saveTibItemSameGroup() {
        final ItemGroup group1 = addFixedFormItemGroup(this.savedAssessment, this.form1Partition11, "groupA");

        System.out.println("savedAssessment:" + this.savedAssessment.getId());

        addFixedFormItem(this.form1Partition11.getId(), "APIP_5000", group1.getId());
        addFixedFormItem(this.form1Partition11.getId(), "APIP_5001", group1.getId());
        addFixedFormItem(this.form1Partition11.getId(), "APIP_5002", group1.getId());

        final ArrayList<TibItem> itemsToAdd = new ArrayList<TibItem>();
        itemsToAdd.add(getTibItem(null, "APIP_5000")); // flagged as dup
        itemsToAdd.add(getTibItem(null, "APIP_5001")); // flagged as dup
        itemsToAdd.add(getTibItem(null, "APIP_5002")); // flagged as dup
        itemsToAdd.add(getTibItem(null, "APIP_5003")); // this one will import

        final TibImportResult importResult = this.itemService.importTibItemsToFormPartition(this.form1Partition11.getId(), group1.getId(), itemsToAdd);
        assertThat(importResult.getItemsImported(), is(1));
        assertThat(importResult.getItemsOmitted(), is(3));
        assertNumberOfItemsInPartition(this.form1Partition11, 4);
    }

    @Test
    public void saveImportItemsTwiceWithSamePassageId() {
        final ItemGroup group1 = addFixedFormItemGroup(this.savedAssessment, this.form1Partition11, "groupA");

        assertNumberOfItemGroupsInFormPartition(this.form1Partition11, 1);

        addFixedFormItem(this.form1Partition11.getId(), "APIP_5000", group1.getId());
        addFixedFormItem(this.form1Partition11.getId(), "APIP_5001", group1.getId());
        addFixedFormItem(this.form1Partition11.getId(), "APIP_5002", group1.getId());

        final ArrayList<TibItem> itemsToAdd = new ArrayList<TibItem>();
        itemsToAdd.add(getTibItem("123", "APIP_6000"));
        itemsToAdd.add(getTibItem("123", "APIP_6001"));
        itemsToAdd.add(getTibItem("123", "APIP_6002"));

        // first import should create a new group for passage id 123
        final TibImportResult importResult = this.itemService.importTibItemsToFormPartition(this.form1Partition11.getId(), null, itemsToAdd);
        assertThat(importResult.getItemsImported(), is(3));
        assertThat(importResult.getItemsOmitted(), is(0));
        assertNumberOfItemsInPartition(this.form1Partition11, 6);

        // second import should detect that a group is already created for the passage
        final TibImportResult importResult2 = this.itemService.importTibItemsToFormPartition(this.form1Partition11.getId(), null, itemsToAdd);
        assertThat(importResult2.getItemsImported(), is(0));
        assertThat(importResult2.getItemsOmitted(), is(3));
        assertNumberOfItemsInPartition(this.form1Partition11, 6);

        assertNumberOfItemGroupsInFormPartition(this.form1Partition11, 2);
    }

    @Test
    public void nullPassageIdWorksSameAsEmptyString() {
        assertNumberOfItemGroupsInFormPartition(this.form1Partition11, 0);

        final ArrayList<TibItem> nullPassageitemsToAdd = new ArrayList<TibItem>();
        nullPassageitemsToAdd.add(getTibItem(null, "APIP_6000"));
        nullPassageitemsToAdd.add(getTibItem(null, "APIP_6001"));
        nullPassageitemsToAdd.add(getTibItem(null, "APIP_6002"));

        final ArrayList<TibItem> emptyStringPassageItems = new ArrayList<TibItem>();
        emptyStringPassageItems.add(getTibItem("", "APIP_6000"));
        emptyStringPassageItems.add(getTibItem("", "APIP_6001"));
        emptyStringPassageItems.add(getTibItem("", "APIP_6002"));

        // first import should create a new group for passage id 123
        final TibImportResult importResult = this.itemService.importTibItemsToFormPartition(this.form1Partition11.getId(), null, nullPassageitemsToAdd);
        assertThat(importResult.getItemsImported(), is(3));
        assertThat(importResult.getItemsOmitted(), is(0));
        assertNumberOfItemsInPartition(this.form1Partition11, 3);

        // second import should detect that a group is already created for the passage
        final TibImportResult importResult2 = this.itemService.importTibItemsToFormPartition(this.form1Partition11.getId(), null, emptyStringPassageItems);
        assertThat(importResult2.getItemsImported(), is(0));
        assertThat(importResult2.getItemsOmitted(), is(3));
        assertNumberOfItemsInPartition(this.form1Partition11, 3);

        assertNumberOfItemGroupsInFormPartition(this.form1Partition11, 0);
    }

    @Test
    public void sameItemsInDifferentSegmentsIsOk() {
        final ArrayList<TibItem> itemsToAdd = new ArrayList<TibItem>();
        itemsToAdd.add(getTibItem(null, "APIP_6000"));
        itemsToAdd.add(getTibItem(null, "APIP_6001"));
        itemsToAdd.add(getTibItem(null, "APIP_6002"));

        final TibImportResult importResult = this.itemService.importTibItemsToFormPartition(this.form1Partition11.getId(), null, itemsToAdd);
        assertThat(importResult.getItemsImported(), is(3));
        assertThat(importResult.getItemsOmitted(), is(0));
        assertNumberOfItemsInPartition(this.form1Partition11, 3);
        assertNumberOfItemsInPartition(this.form1Partition12, 0);

        final TibImportResult importResult2 = this.itemService.importTibItemsToFormPartition(this.form1Partition12.getId(), null, itemsToAdd);
        assertThat(importResult2.getItemsImported(), is(3));
        assertThat(importResult2.getItemsOmitted(), is(0));
        assertNumberOfItemsInPartition(this.form1Partition11, 3);
        assertNumberOfItemsInPartition(this.form1Partition12, 3);
    }

    @Test
    public void ifGroupIsSpecifiedOnImportPassageGroupingDoesNotHappen() {
        final ItemGroup group1 = addFixedFormItemGroup(this.savedAssessment, this.form1Partition11, "groupA");

        assertNumberOfItemGroupsInFormPartition(this.form1Partition11, 1);

        final ArrayList<TibItem> itemsToAdd = new ArrayList<TibItem>();
        itemsToAdd.add(getTibItem("123", "APIP_6000")); // wont create a new group because a specific group is targeted
        itemsToAdd.add(getTibItem("123", "APIP_6001")); // wont create a new group because a specific group is targeted

        // Data coming in wouldn't looks like this...
        final ArrayList<TibItem> itemsToAdd2 = new ArrayList<TibItem>();
        itemsToAdd2.add(getTibItem("111", "APIP_6000")); // will get dups because passage is ignored
        itemsToAdd2.add(getTibItem("111", "APIP_6001")); // will get dups because passage is ignored

        final TibImportResult importResult = this.itemService.importTibItemsToFormPartition(this.form1Partition11.getId(), group1.getId(), itemsToAdd);
        assertThat(importResult.getItemsImported(), is(2));
        assertThat(importResult.getItemsOmitted(), is(0));
        assertNumberOfItemsInPartition(this.form1Partition11, 2);

        assertNumberOfItemGroupsInFormPartition(this.form1Partition11, 1);

        final TibImportResult importResult2 = this.itemService.importTibItemsToFormPartition(this.form1Partition11.getId(), group1.getId(), itemsToAdd2);
        assertThat(importResult2.getItemsImported(), is(0));
        assertThat(importResult2.getItemsOmitted(), is(2)); // will get dups because
        assertNumberOfItemsInPartition(this.form1Partition11, 2);

        assertNumberOfItemGroupsInFormPartition(this.form1Partition11, 1);

    }

    @Test
    public void testImportingItemsWithStandardKey() {
        addFixedFormItem(this.form1Partition11.getId(), "APIP_5000", Item.NO_GROUP_KEY);
        addFixedFormItem(this.form1Partition11.getId(), "APIP_5001", Item.NO_GROUP_KEY);

        final String pubKey = this.savedAssessment.getPublication().getCoreStandardsPublicationKey();

        final ArrayList<TibItem> itemsToAdd = new ArrayList<TibItem>();
        itemsToAdd.add(getTibItem("", "APIP_5003"));
        itemsToAdd.add(getTibItem("", "APIP_5004"));
        itemsToAdd.add(getTibItem("", "APIP_5005"));

        final TibImportResult importResult = this.itemService.importTibItemsToFormPartition(this.form1Partition11.getId(), null, itemsToAdd);
        assertThat(importResult.getItemsImported(), is(3));
        assertThat(importResult.getItemsOmitted(), is(0));
        assertNumberOfItemsInPartition(this.form1Partition11, 5);

        final Item importedItem = this.itemService.getItemByAssessmentIdAndTibIdentifier(this.savedAssessment.getId(), "APIP_5003");
        assertEquals("wrong ", pubKey, importedItem.getPublicationKey());
        assertEquals("wrong ", STANDARD_V1, importedItem.getPrimaryStandard());

        final Item importedItem2 = this.itemService.getItemByAssessmentIdAndTibIdentifier(this.savedAssessment.getId(), "APIP_5004");
        assertEquals("wrong ", pubKey, importedItem2.getPublicationKey());
        assertEquals("wrong ", STANDARD_V1, importedItem2.getPrimaryStandard());

        final Item importedItem3 = this.itemService.getItemByAssessmentIdAndTibIdentifier(this.savedAssessment.getId(), "APIP_5005");
        assertEquals("wrong ", pubKey, importedItem3.getPublicationKey());
        assertEquals("wrong ", STANDARD_V1, importedItem3.getPrimaryStandard());
    }

    @Test
    public void testImportingItemsWithNoStandardKey() {
        addFixedFormItem(this.form1Partition11.getId(), "APIP_5000", Item.NO_GROUP_KEY);
        addFixedFormItem(this.form1Partition11.getId(), "APIP_5001", Item.NO_GROUP_KEY);

        final ArrayList<TibItem> itemsToAdd = new ArrayList<TibItem>();
        itemsToAdd.add(getTibItem("", "APIP_5003"));
        itemsToAdd.add(getTibItem("", "APIP_5004"));
        itemsToAdd.add(getTibItem("", "APIP_5005"));

        for (final TibItem tibItem : itemsToAdd) {
            tibItem.setItemStandardPublicationList(null);
        }

        final TibImportResult importResult = this.itemService.importTibItemsToFormPartition(this.form1Partition11.getId(), null, itemsToAdd);
        assertThat(importResult.getItemsImported(), is(3));
        assertThat(importResult.getItemsOmitted(), is(0));
        assertNumberOfItemsInPartition(this.form1Partition11, 5);

        final Item importedItem = this.itemService.getItemByAssessmentIdAndTibIdentifier(this.savedAssessment.getId(), "APIP_5003");
        assertEquals("wrong ", ItemImportHelper.NO_PUBLICATION, importedItem.getPublicationKey());
        assertEquals("wrong ", ItemImportHelper.NO_STANDARD, importedItem.getPrimaryStandard());

        final Item importedItem2 = this.itemService.getItemByAssessmentIdAndTibIdentifier(this.savedAssessment.getId(), "APIP_5004");
        assertEquals("wrong ", ItemImportHelper.NO_PUBLICATION, importedItem2.getPublicationKey());
        assertEquals("wrong ", ItemImportHelper.NO_STANDARD, importedItem2.getPrimaryStandard());

        final Item importedItem3 = this.itemService.getItemByAssessmentIdAndTibIdentifier(this.savedAssessment.getId(), "APIP_5005");
        assertEquals("wrong ", ItemImportHelper.NO_PUBLICATION, importedItem3.getPublicationKey());
        assertEquals("wrong ", ItemImportHelper.NO_STANDARD, importedItem3.getPrimaryStandard());
    }

    @Test
    public void testImportingItemsWithAnotherStandardKey() {
        addFixedFormItem(this.form1Partition11.getId(), "APIP_5000", Item.NO_GROUP_KEY);
        addFixedFormItem(this.form1Partition11.getId(), "APIP_5001", Item.NO_GROUP_KEY);

        final ArrayList<TibItem> itemsToAdd = new ArrayList<TibItem>();
        itemsToAdd.add(getTibItem("", "APIP_5003"));
        itemsToAdd.add(getTibItem("", "APIP_5004"));
        itemsToAdd.add(getTibItem("", "APIP_5005"));

        for (final TibItem tibItem : itemsToAdd) {
            final TibItemStandardPublication pub1 = new TibItemStandardPublication();
            pub1.setPrimaryStandard("Other");
            pub1.setPublication("Other:std");

            tibItem.setItemStandardPublicationList(Arrays.asList(new TibItemStandardPublication[] { pub1 }));
        }

        final TibImportResult importResult = this.itemService.importTibItemsToFormPartition(this.form1Partition11.getId(), null, itemsToAdd);
        assertThat(importResult.getItemsImported(), is(3));
        assertThat(importResult.getItemsOmitted(), is(0));
        assertNumberOfItemsInPartition(this.form1Partition11, 5);

        final Item importedItem = this.itemService.getItemByAssessmentIdAndTibIdentifier(this.savedAssessment.getId(), "APIP_5003");
        assertEquals("wrong ", ItemImportHelper.WRONG_PUBLICATION, importedItem.getPublicationKey());
        assertEquals("wrong ", ItemImportHelper.WRONG_PUBLICATION, importedItem.getPrimaryStandard());

        final Item importedItem2 = this.itemService.getItemByAssessmentIdAndTibIdentifier(this.savedAssessment.getId(), "APIP_5004");
        assertEquals("wrong ", ItemImportHelper.WRONG_PUBLICATION, importedItem2.getPublicationKey());
        assertEquals("wrong ", ItemImportHelper.WRONG_PUBLICATION, importedItem2.getPrimaryStandard());

        final Item importedItem3 = this.itemService.getItemByAssessmentIdAndTibIdentifier(this.savedAssessment.getId(), "APIP_5005");
        assertEquals("wrong ", ItemImportHelper.WRONG_PUBLICATION, importedItem3.getPublicationKey());
        assertEquals("wrong ", ItemImportHelper.WRONG_PUBLICATION, importedItem3.getPrimaryStandard());
    }
}
