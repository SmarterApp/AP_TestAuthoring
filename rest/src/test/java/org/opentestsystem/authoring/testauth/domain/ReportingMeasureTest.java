/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.domain;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.MatcherAssert.assertThat;

import org.junit.Test;

import com.google.common.collect.Lists;

public class ReportingMeasureTest {

    @Test
    public void equalsTest() {
        final ReportingMeasure reportingMeasure1 = createDummyReportingMeasure();
        final ReportingMeasure reportingMeasure2 = createDummyReportingMeasure();
        final ReportingMeasure reportingMeasure3 = createDummyReportingMeasure();
        reportingMeasure3.setAssessmentId("no-assess-id");

        assertThat(reportingMeasure1, is(equalTo(reportingMeasure2)));
        assertThat(reportingMeasure1, is(not(equalTo(reportingMeasure3))));
    }

    @Test
    public void toStringTest() {
        final ReportingMeasure reportingMeasure1 = createDummyReportingMeasure();
        final ReportingMeasure reportingMeasure2 = createDummyReportingMeasure();

        assertThat(reportingMeasure1.toString(), is(equalTo(reportingMeasure2.toString())));
    }

    @Test
    public void hashcodeTest() {
        final ReportingMeasure reportingMeasure1 = createDummyReportingMeasure();
        final ReportingMeasure reportingMeasure2 = createDummyReportingMeasure();

        assertThat(reportingMeasure1.hashCode(), is(equalTo(reportingMeasure2.hashCode())));
    }

    public static ReportingMeasure createDummyReportingMeasure() {
        final ReportingMeasure reportingMeasure = new ReportingMeasure();
        reportingMeasure.setId("1");
        reportingMeasure.setAssessmentId("1");
        reportingMeasure.setBlueprintReferenceId("blueprintReferenceId");
        reportingMeasure.setBlueprintReferenceType(BlueprintReferenceType.SEGMENT);
        reportingMeasure.setScoringRuleIdList(Lists.newArrayList("scoringRuleId1", "scoringRuleId2"));
        return reportingMeasure;
    }
}
