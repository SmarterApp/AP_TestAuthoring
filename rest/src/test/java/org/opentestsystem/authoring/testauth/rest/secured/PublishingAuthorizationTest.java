/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.rest.secured;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.mockito.Mockito.atLeastOnce;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import org.opentestsystem.authoring.testauth.domain.AdaptiveItemLocation;
import org.opentestsystem.authoring.testauth.domain.Approval;
import org.opentestsystem.authoring.testauth.domain.ApprovalStatus;
import org.opentestsystem.authoring.testauth.domain.Assessment;
import org.opentestsystem.authoring.testauth.domain.BlueprintElement;
import org.opentestsystem.authoring.testauth.domain.DomainFactory;
import org.opentestsystem.authoring.testauth.domain.Item;
import org.opentestsystem.authoring.testauth.domain.ItemLocation;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionAlgorithm;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionAlgorithmType;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionPurpose;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionType;
import org.opentestsystem.authoring.testauth.domain.Permissions;
import org.opentestsystem.authoring.testauth.domain.Publication;
import org.opentestsystem.authoring.testauth.domain.PublishingRecord;
import org.opentestsystem.authoring.testauth.domain.Segment;
import org.opentestsystem.authoring.testauth.domain.Subject;
import org.opentestsystem.authoring.testauth.rest.AbstractSecuredRestEmbeddedMongoTest;
import org.opentestsystem.authoring.testauth.service.ApprovalService;
import org.opentestsystem.authoring.testauth.service.AssessmentService;
import org.opentestsystem.authoring.testauth.service.BlueprintElementService;
import org.opentestsystem.authoring.testauth.service.ItemSelectionAlgorithmService;
import org.opentestsystem.authoring.testauth.service.ItemService;
import org.opentestsystem.authoring.testauth.service.PublicationService;
import org.opentestsystem.authoring.testauth.service.PublishingRecordService;
import org.opentestsystem.authoring.testauth.service.SegmentService;
import org.opentestsystem.authoring.testauth.service.SubjectService;
import org.opentestsystem.shared.docs.annotation.ApiDocExample;
import org.opentestsystem.shared.progman.client.ProgManClient;
import org.opentestsystem.shared.progman.client.domain.Tenant;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.Lists;
import com.google.common.collect.Sets;

public class PublishingAuthorizationTest extends AbstractSecuredRestEmbeddedMongoTest {
    private static final String APPROVAL_URL = "/approval";

    @Autowired
    private ApprovalService approvalService;

    @Autowired
    private AssessmentService assessmentService;

    @Autowired
    private SubjectService subjectService;

    @Autowired
    private PublicationService publicationService;

    @Autowired
    private PublishingRecordService publishingRecordService;

    @Autowired
    private ItemSelectionAlgorithmService itemSelectionAlgorithmService;

    @Autowired
    private BlueprintElementService blueprintElementService;

    @Autowired
    private SegmentService segmentService;

    @Autowired
    private ItemService itemService;

    @Autowired
    private ProgManClient progManClient;

    private List<Permissions> permissions;
    private Approval savedApproval;
    private Assessment savedAssessment;
    private PublishingRecord savedRecord;
    private ItemSelectionAlgorithm savedAlgorithm;
    private final Tenant tenant1 = buildTenant("id1", "tenant1", "description1");

    @ApiDocExample(rank = -1)
    @Before
    public void setupTestData() {
        this.permissions = Lists.newArrayList();
        final Subject savedSubject = this.subjectService.saveSubject(DomainFactory.manufactureValidSubject("ABB"));
        final Publication publication = PODAM_FACTORY.manufacturePojo(Publication.class);
        publication.setId(null);
        publication.setSubjectIds(Sets.newHashSet(savedSubject.getId()));
        final Publication savedPublication = this.publicationService.savePublication(publication);
        this.savedAssessment = this.assessmentService.saveAssessment(DomainFactory.manufactureValidAssessment(savedSubject, savedPublication));

        final ItemSelectionAlgorithm algorithm = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.BOOLEAN);
        algorithm.setItemSelectionAlgorithmType(ItemSelectionAlgorithmType.ADAPTIVE);
        this.savedAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithm);

        when(this.progManClient.getTenantById(Mockito.anyString())).thenReturn(this.tenant1);
        saveGoodMinimalSegmentAndItemData();
        saveGoodMinimalBlueprintData();

        this.savedRecord = this.publishingRecordService.retrievePublishingRecordWithAllowablePurposes(this.savedAssessment.getId());
        this.savedRecord = this.publishingRecordService.savePublishingRecord(this.savedRecord, false);

        verify(this.progManClient, atLeastOnce()).getTenantById(Mockito.anyString());
    }

    void setupApproval(final int uniqueId) {
        this.savedApproval = saveSampleApproval(uniqueId);
    }

    /**************************************** Approval ****************************************/
    @Test
    public void testApprovalRead() {
        setupApproval(1);
        this.permissions.add(Permissions.APPROVAL_READ);
        setUserWithRoles(this.permissions);
        final Approval fetchedApproval = callGETRestService(APPROVAL_URL + "/" + this.savedApproval.getId(), Approval.class);
        assertThat(fetchedApproval, is(notNullValue()));
        assertThat(fetchedApproval.getId(), is(notNullValue()));
    }

    @Test
    public void testApprovalModify() {
        this.savedRecord = this.publishingRecordService.savePublishingRecord(this.savedRecord, false);

        this.permissions.add(Permissions.APPROVAL_MODIFY);
        this.permissions.add(Permissions.CONTENT_LEAD);
        setUserWithRoles(this.permissions);
        final Map<String, Object> approvalParams = buildApprovalMap(0);
        approvalParams.put("publishingRecordId", this.savedRecord.getId());
        approvalParams.put("message", "OK to publish");
        approvalParams.put("status", ApprovalStatus.APPROVED);
        final Approval updatedApproval = callPUTRestService(APPROVAL_URL + "/updateApproval", approvalParams, Approval.class);
        assertThat(updatedApproval, is(notNullValue()));
        assertThat(updatedApproval.getMessage(), is(equalTo("OK to publish")));
        assertThat(updatedApproval.getStatus(), is(equalTo(ApprovalStatus.APPROVED)));
        assertThat(updatedApproval.getId(), is(notNullValue()));
    }

    @Test
    public void testApprovalReadFail() {
        setupApproval(3);
        this.permissions.add(Permissions.APPROVAL_MODIFY);
        setUserWithRoles(this.permissions);
        final Approval fetchedApproval = callGETRestService(APPROVAL_URL + "/" + this.savedApproval.getId(), Approval.class, status().isUnauthorized());
        assertThat(fetchedApproval, is(notNullValue()));
        assertThat(fetchedApproval.getId(), is(nullValue()));
    }

    @Test
    public void testApprovalModifyFail() {
        final Map<String, Object> approvalParams = buildApprovalMap(0);
        this.permissions.add(Permissions.APPROVAL_READ);
        setUserWithRoles(this.permissions);
        approvalParams.put("message", "OK to publish");
        approvalParams.put("status", ApprovalStatus.APPROVED);
        final Approval updatedApproval = callPUTRestService(APPROVAL_URL + "/" + approvalParams.get("id"), approvalParams, Approval.class, status().isUnauthorized());
        assertThat(updatedApproval, is(notNullValue()));
    }

    /***********************************************************************************************/

    private Approval saveSampleApproval(final int uniqueId) {
        final Approval approval = new Approval();
        approval.setAssessmentId("assessment-id-" + uniqueId);
        approval.setPublishingRecordId(this.savedRecord.getId());
        approval.setStatus(ApprovalStatus.PENDING);
        approval.setPermission(Permissions.CONTENT_LEAD.toSpringRoleName());
        approval.setPermissionLabel("Content Lead");
        approval.setLevel(1);
        approval.setUsername("Content Lead User");
        approval.setVersion("1.0");
        approval.setMessage("Not yet approved");
        return this.approvalService.updateApproval(approval);
    }

    private Map<String, Object> buildApprovalMap(final int uniqueId) {
        return buildParamObject(saveSampleApproval(uniqueId));
    }

    private void saveGoodMinimalSegmentAndItemData() {
        final Segment savedSegment = this.segmentService.createSegment(DomainFactory.manufactureValidSegment(this.savedAssessment.getId(), this.savedAlgorithm, 1));
        final Item item = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        item.setId(null);
        final List<ItemLocation> itemLocationList = Lists.newArrayList();
        itemLocationList.add(new AdaptiveItemLocation(savedSegment.getId(), null));
        item.setItemLocation(itemLocationList);
        this.itemService.saveItem(item);
    }

    private void saveGoodMinimalBlueprintData() {
        final List<Segment> segments = segmentService.findSegmentListByAssessmentId(this.savedAssessment.getId());
        segmentService.loadReferenceData(segments);
        final BlueprintElement bpe = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), segments);
        bpe.setGrade(this.savedAssessment.getGrade()[0]);
        bpe.setLevel("1");
        bpe.setStandardKey("CC-ELA-v1");
        bpe.setTextDescription("textDescription");
        bpe.setActive(true);
        this.blueprintElementService.saveBlueprintElement(null, bpe);
    }

}
