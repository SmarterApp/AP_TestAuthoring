/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.integration;

import static org.hamcrest.CoreMatchers.containsString;
import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.Assert.fail;

import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.BlueprintReferenceType;
import org.opentestsystem.authoring.testauth.domain.DomainFactory;
import org.opentestsystem.authoring.testauth.domain.PerformanceLevel;
import org.opentestsystem.authoring.testauth.persistence.PerformanceLevelRepository;
import org.opentestsystem.authoring.testauth.rest.AbstractRestEmbeddedMongoTest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DuplicateKeyException;

public class PerformanceLevelRepositoryTest extends AbstractRestEmbeddedMongoTest {

    @Autowired
    private PerformanceLevelRepository performanceLevelRepository;

    @Test
    public void savePerformanceLevelTest() {
        final PerformanceLevel performanceLevel = manufactureValidPerformanceLevelPojo("1");
        final PerformanceLevel savedPerformanceLevel = this.performanceLevelRepository.save(performanceLevel);
        assertThat(savedPerformanceLevel, is(notNullValue()));
        assertThat(savedPerformanceLevel.getId(), is(notNullValue()));
    }

    @Test
    public void saveDuplicatePerformanceLevelTest() {
        final PerformanceLevel performanceLevel = manufactureValidPerformanceLevelPojo("1");
        final PerformanceLevel savedPerformanceLevel = this.performanceLevelRepository.save(performanceLevel);
        assertThat(savedPerformanceLevel, is(notNullValue()));
        assertThat(savedPerformanceLevel.getId(), is(notNullValue()));

        final PerformanceLevel duplicatePerformanceLevel = manufactureValidPerformanceLevelPojo("1");
        try {
            this.performanceLevelRepository.save(duplicatePerformanceLevel);
            fail("should have thrown exception");
        } catch (final DuplicateKeyException e) {
            assertThat(e.getMessage(), containsString("performance_level_indx"));
        }
    }

    @Test
    public void findPerformanceLevelTest() {
        final PerformanceLevel performanceLevel = manufactureValidPerformanceLevelPojo("1");
        final PerformanceLevel savedPerformanceLevel = this.performanceLevelRepository.save(performanceLevel);
        assertThat(savedPerformanceLevel, is(notNullValue()));
        final PerformanceLevel foundPerformanceLevel = this.performanceLevelRepository.findOne(savedPerformanceLevel.getId());
        assertThat(savedPerformanceLevel.getId(), is(equalTo(foundPerformanceLevel.getId())));
        assertThat(savedPerformanceLevel, is(equalTo(foundPerformanceLevel)));
    }

    @Test
    public void removePerformanceLevelTest() {
        final PerformanceLevel performanceLevel = manufactureValidPerformanceLevelPojo("1");
        final PerformanceLevel savedPerformanceLevel = this.performanceLevelRepository.save(performanceLevel);
        this.performanceLevelRepository.delete(performanceLevel);
        final PerformanceLevel foundPerformanceLevel = this.performanceLevelRepository.findOne(savedPerformanceLevel.getId());
        assertThat(foundPerformanceLevel, is(nullValue()));
    }

    private PerformanceLevel manufactureValidPerformanceLevelPojo(final String assessmentId) {
        final PerformanceLevel performanceLevel = DomainFactory.manufactureValidPerformanceLevel(assessmentId);
        performanceLevel.setAssessmentId(assessmentId);
        performanceLevel.setBlueprintReferenceType(BlueprintReferenceType.SEGMENT);
        performanceLevel.setBlueprintReferenceId("segment-id");
        return performanceLevel;
    }
}
