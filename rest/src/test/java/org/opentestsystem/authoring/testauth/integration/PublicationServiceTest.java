/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.integration;

import static org.hamcrest.CoreMatchers.hasItem;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.Assert.fail;

import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.lang.RandomStringUtils;
import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.Assessment;
import org.opentestsystem.authoring.testauth.domain.DomainFactory;
import org.opentestsystem.authoring.testauth.domain.Publication;
import org.opentestsystem.authoring.testauth.domain.Subject;
import org.opentestsystem.authoring.testauth.domain.search.PublicationSearchRequest;
import org.opentestsystem.authoring.testauth.rest.AbstractRestEmbeddedMongoTest;
import org.opentestsystem.authoring.testauth.service.AssessmentService;
import org.opentestsystem.authoring.testauth.service.PublicationService;
import org.opentestsystem.authoring.testauth.service.SubjectService;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;

public class PublicationServiceTest extends AbstractRestEmbeddedMongoTest {

    @Autowired
    private PublicationService publicationService;

    @Autowired
    private SubjectService subjectService;

    @Autowired
    private AssessmentService assessmentService;

    @Test
    public void savePublication() {
        final Publication publication = PODAM_FACTORY.manufacturePojo(Publication.class);
        final Publication savedPublication = this.publicationService.savePublication(publication);
        assertThat(savedPublication.getId(), is(not(nullValue())));
    }

    @Test
    public void saveDuplicatePublications() {
        final Publication publication = PODAM_FACTORY.manufacturePojo(Publication.class);
        assertThat(this.publicationService.savePublication(publication), is(notNullValue()));

        final Publication publication2 = PODAM_FACTORY.manufacturePojo(Publication.class);
        publication2.setCoreStandardsPublicationKey(publication.getCoreStandardsPublicationKey());
        assertThat(this.publicationService.savePublication(publication2), is(notNullValue()));

        final Publication publication3 = PODAM_FACTORY.manufacturePojo(Publication.class);
        publication3.setCoreStandardsPublicationKey(publication.getCoreStandardsPublicationKey());
        publication3.setTenantId(publication.getTenantId());

        try {
            this.publicationService.savePublication(publication3);
            fail("DuplicateKeyException should be thrown");
        } catch (final Exception e) {
            // expected behavior
        }
    }

    @Test
    public void getPublications() {
        Publication publication = PODAM_FACTORY.manufacturePojo(Publication.class);
        publication = this.publicationService.savePublication(publication);
        assertThat(publication, is(not(nullValue())));

        Publication anotherPublication = PODAM_FACTORY.manufacturePojo(Publication.class);
        anotherPublication = this.publicationService.savePublication(anotherPublication);
        assertThat(anotherPublication, is(not(nullValue())));

        final List<Publication> publications = this.publicationService.getPublications();
        assertThat(publications, is(not(nullValue())));
        assertThat(publications.size(), is(2));
    }

    @Test
    public void getPublication() {
        Publication publication = PODAM_FACTORY.manufacturePojo(Publication.class);
        publication = this.publicationService.savePublication(publication);
        assertThat(publication, is(not(nullValue())));

        Publication anotherPublication = PODAM_FACTORY.manufacturePojo(Publication.class);
        anotherPublication = this.publicationService.savePublication(anotherPublication);
        assertThat(anotherPublication, is(not(nullValue())));

        final Publication foundPublication = this.publicationService.getPublication(anotherPublication.getId());
        assertThat(foundPublication, is(not(nullValue())));
        assertThat(foundPublication.getId(), is(anotherPublication.getId()));
        assertThat(foundPublication.getTenantId(), is(anotherPublication.getTenantId()));
    }

    @Test
    public void deletePublication() {
        Publication publication = PODAM_FACTORY.manufacturePojo(Publication.class);
        publication = this.publicationService.savePublication(publication);
        assertThat(publication, is(not(nullValue())));

        Publication anotherPublication = PODAM_FACTORY.manufacturePojo(Publication.class);
        anotherPublication = this.publicationService.savePublication(anotherPublication);
        assertThat(anotherPublication, is(not(nullValue())));

        assertThat(this.publicationService.getPublications().size(), is(2));
        this.publicationService.removePublication(publication.getId());
        assertThat(this.publicationService.getPublications().size(), is(1));
    }

    @Test
    public void searchPublications() {
        Publication publication = PODAM_FACTORY.manufacturePojo(Publication.class);
        publication = this.publicationService.savePublication(publication);
        assertThat(publication, is(not(nullValue())));

        Publication anotherPublication = PODAM_FACTORY.manufacturePojo(Publication.class);
        anotherPublication = this.publicationService.savePublication(anotherPublication);
        assertThat(anotherPublication, is(not(nullValue())));

        Map<String, String[]> params = ImmutableMap.of("tenantId", new String[] { publication.getTenantId() });
        PublicationSearchRequest searchRequest = new PublicationSearchRequest(params);
        SearchResponse<Publication> searchResponse = this.publicationService.searchPublications(searchRequest);
        assertThat(searchResponse.getReturnCount(), is(1));

        params = ImmutableMap.of("coreStandardsPublicationKey", new String[] { publication.getCoreStandardsPublicationKey() });
        searchRequest = new PublicationSearchRequest(params);
        searchResponse = this.publicationService.searchPublications(searchRequest);
        assertThat(searchResponse.getReturnCount(), is(1));
    }

    @Test
    public void checkForPublicationAndSubjectInUseByAssessment() {
        final Subject subject = PODAM_FACTORY.manufacturePojo(Subject.class);
        subject.setId(null);
        subject.setAbbreviation("ABB");
        final Subject savedSubject = this.subjectService.saveSubject(subject);
        assertThat(savedSubject.getId(), is(not(nullValue())));

        final Publication publication = PODAM_FACTORY.manufacturePojo(Publication.class);
        publication.getSubjectIds().add(savedSubject.getId());
        final Publication savedPublication = this.publicationService.savePublication(publication);
        assertThat(savedPublication.getId(), is(not(nullValue())));

        final Assessment assessmentToSave = DomainFactory.manufactureValidAssessment(savedSubject, savedPublication);
        assessmentToSave.setAdministration(RandomStringUtils.randomAlphanumeric(30));
        assessmentToSave.setLabel(RandomStringUtils.randomAlphanumeric(30));
        final Assessment savedAssessment = this.assessmentService.saveAssessment(assessmentToSave);
        assertThat(savedAssessment, is(not(nullValue())));
        final Set<String> subjectIds = savedPublication.getSubjectIds();
        subjectIds.remove(savedSubject.getId());
        savedPublication.setSubjectIds(subjectIds);

        try {
            this.publicationService.savePublication(savedPublication);
            fail("LocalizedException should be thrown as savedPublication is already associated with asn assessment");
        } catch (final Exception e) {
            // expected behavior
            assertThat(e.getLocalizedMessage(), is("publication.cannot.be.altered"));
        }
    }

    @Test
    public void checkForPublicationAndSubjectNotInUseByAssessment() {
        final Subject subject = PODAM_FACTORY.manufacturePojo(Subject.class);
        subject.setId(null);
        subject.setAbbreviation("ABB");
        final Subject savedSubject = this.subjectService.saveSubject(subject);
        assertThat(savedSubject.getId(), is(not(nullValue())));

        final Publication publication = PODAM_FACTORY.manufacturePojo(Publication.class);
        publication.getSubjectIds().add(savedSubject.getId());
        final Publication savedPublication = this.publicationService.savePublication(publication);
        assertThat(savedPublication.getId(), is(not(nullValue())));

        final Assessment assessmentToSave = DomainFactory.manufactureValidAssessment(savedSubject, savedPublication);
        assessmentToSave.setAdministration(RandomStringUtils.randomAlphanumeric(30));
        assessmentToSave.setLabel(RandomStringUtils.randomAlphanumeric(30));
        final Assessment savedAssessment = this.assessmentService.saveAssessment(assessmentToSave);
        assertThat(savedAssessment, is(not(nullValue())));
        final Set<String> subjectIds = savedPublication.getSubjectIds();
        subjectIds.add("newSubjectId");
        savedPublication.setSubjectIds(subjectIds);

        final Publication updatedPublication = this.publicationService.savePublication(savedPublication);
        assertThat(updatedPublication.getSubjectIds(), hasItem("newSubjectId"));
    }

    @Test
    public void getSubjectsAssignedToPublications() {
        Subject subject1 = DomainFactory.manufactureValidSubject("AAA");
        Subject subject2 = DomainFactory.manufactureValidSubject("BBB");
        subject1.setTenantId("tenant-id");
        subject2.setTenantId("tenant-id");
        subject1.setInactive(false);
        subject2.setInactive(false);
        subject1 = this.subjectService.saveSubject(subject1);
        subject2 = this.subjectService.saveSubject(subject2);

        final Publication publication = PODAM_FACTORY.manufacturePojo(Publication.class);
        publication.setSubjectIds(ImmutableSet.of(subject1.getId()));
        publication.setTenantId("tenant-id");
        final Publication savedPublication = this.publicationService.savePublication(publication);
        assertThat(savedPublication.getId(), is(not(nullValue())));

        final List<Subject> assignedSubjects = publicationService.getSubjectsAssignedToPublications("tenant-id");
        assertThat(assignedSubjects.size(), is(1));
        assertThat(assignedSubjects, hasItem(subject1));
        assertThat(assignedSubjects, not(hasItem(subject2)));
    }
}
