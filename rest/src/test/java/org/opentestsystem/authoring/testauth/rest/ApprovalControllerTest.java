/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.rest;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.mockito.Mockito.atLeastOnce;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import org.opentestsystem.authoring.testauth.domain.AdaptiveItemLocation;
import org.opentestsystem.authoring.testauth.domain.Approval;
import org.opentestsystem.authoring.testauth.domain.ApprovalStatus;
import org.opentestsystem.authoring.testauth.domain.Assessment;
import org.opentestsystem.authoring.testauth.domain.BlueprintElement;
import org.opentestsystem.authoring.testauth.domain.DomainFactory;
import org.opentestsystem.authoring.testauth.domain.Item;
import org.opentestsystem.authoring.testauth.domain.ItemLocation;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionAlgorithm;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionAlgorithmType;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionPurpose;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionType;
import org.opentestsystem.authoring.testauth.domain.Permissions;
import org.opentestsystem.authoring.testauth.domain.Publication;
import org.opentestsystem.authoring.testauth.domain.PublishingRecord;
import org.opentestsystem.authoring.testauth.domain.Segment;
import org.opentestsystem.authoring.testauth.domain.Subject;
import org.opentestsystem.authoring.testauth.publish.domain.Purpose;
import org.opentestsystem.authoring.testauth.service.ApprovalService;
import org.opentestsystem.authoring.testauth.service.AssessmentService;
import org.opentestsystem.authoring.testauth.service.BlueprintElementService;
import org.opentestsystem.authoring.testauth.service.ItemSelectionAlgorithmService;
import org.opentestsystem.authoring.testauth.service.ItemService;
import org.opentestsystem.authoring.testauth.service.PublicationService;
import org.opentestsystem.authoring.testauth.service.PublishingRecordService;
import org.opentestsystem.authoring.testauth.service.SegmentService;
import org.opentestsystem.authoring.testauth.service.SubjectService;
import org.opentestsystem.shared.docs.annotation.ApiDocExample;
import org.opentestsystem.shared.progman.client.ProgManClient;
import org.opentestsystem.shared.progman.client.domain.Tenant;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.opentestsystem.shared.security.service.TenancyService;
import org.opentestsystem.shared.security.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;

public class ApprovalControllerTest extends AbstractRestEmbeddedMongoTest {
    private static final String BASE_URL = "/approval";

    @Autowired
    private AssessmentService assessmentService;

    @Autowired
    private SegmentService segmentService;

    @Autowired
    private BlueprintElementService blueprintElementService;

    @Autowired
    private ItemService itemService;

    @Autowired
    private ItemSelectionAlgorithmService itemSelectionAlgorithmService;

    @Autowired
    private ApprovalService approvalService;

    @Autowired
    private PublishingRecordService publishingRecordService;

    @Autowired
    private SubjectService subjectService;

    @Autowired
    private PublicationService publicationService;

    @Autowired
    private UserService userService;

    @Autowired
    private TenancyService tenancyService;

    @Autowired
    private ProgManClient progManClient;

    private Assessment savedAssessment;
    private PublishingRecord savedRecord;
    private ItemSelectionAlgorithm savedAlgorithm;
    private Approval savedApproval;
    private final Tenant tenant1 = buildTenant("id1", "tenant1", "description1");

    private static final String COMPONENT_NAME = "TestAuthoring";

    static {
        System.setProperty("component.name", COMPONENT_NAME);
    }

    @ApiDocExample(rank = -1)
    @Before
    public void setupTestData() {
        when(this.progManClient.getTenantById(Mockito.anyString())).thenReturn(this.tenant1);

        final Subject savedSubject = this.subjectService.saveSubject(DomainFactory.manufactureValidSubject("ABB"));
        final Publication savedPublication = this.publicationService.savePublication(DomainFactory.manufactureValidPublication(savedSubject.getTenantId(), ImmutableSet.of(savedSubject)));
        this.savedAssessment = this.assessmentService.saveAssessment(DomainFactory.manufactureValidAssessment(savedSubject, savedPublication));

        final ItemSelectionAlgorithm algorithm = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.BOOLEAN);
        algorithm.setItemSelectionAlgorithmType(ItemSelectionAlgorithmType.ADAPTIVE);
        this.savedAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithm);

        saveGoodMinimalSegmentAndItemData();
        saveGoodMinimalBlueprintData();

        this.savedRecord = this.publishingRecordService.retrievePublishingRecordWithAllowablePurposes(this.savedAssessment.getId());
        this.savedRecord = this.publishingRecordService.savePublishingRecord(this.savedRecord, false);

        verify(this.progManClient, atLeastOnce()).getTenantById(Mockito.anyString());

        assertThat(this.mongoTemplate.findAll(Assessment.class).size(), is(equalTo(1)));
        assertThat(this.savedAssessment, is(notNullValue()));
        this.savedApproval = saveSampleApproval();
    }

    @ApiDocExample(rank = 1)
    @Test
    public void findApproval() throws InterruptedException {
        final Approval fetchedApproval = callGETRestService(BASE_URL + "/" + this.savedApproval.getId(), Approval.class);
        assertThat(fetchedApproval, is(notNullValue()));
    }

    @ApiDocExample(rank = 2)
    @SuppressWarnings("unchecked")
    @Test
    public void searchApprovalByLevel() {
        final Map<String, String> approvalParams = Maps.newHashMap();
        approvalParams.put("assessmentId", this.savedAssessment.getId());
        approvalParams.put("publishingRecordId", this.savedRecord.getId());
        approvalParams.put("level", "1");
        final SearchResponse<Approval> response = callGETRestService(BASE_URL + buildQueryString(approvalParams), SearchResponse.class);
        assertThat(response.getReturnCount(), is(equalTo(3)));
        assertThat(3, is(equalTo(response.getSearchResults().size())));
    }

    @ApiDocExample(rank = 3)
    @Test
    public void saveApprovalTest() throws InterruptedException {
        final Approval returnedApproval = callPUTRestService(BASE_URL + "/" + this.savedApproval.getId(), buildParamObject(this.savedApproval), Approval.class);
        assertThat(returnedApproval, is(notNullValue()));
    }

    @ApiDocExample(rank = 4)
    @Test
    public void removeAssessmentByIdTest() throws InterruptedException {
        final Approval newApproval = saveSampleApproval();
        newApproval.setId("id_12345");
        callDeleteRestService(BASE_URL + "/" + newApproval.getId());

        final Approval deletedApproval = callGETRestService(BASE_URL + "/" + newApproval.getId(), Approval.class);
        assertThat(deletedApproval, is(nullValue()));
    }

    @ApiDocExample(rank = 5)
    @SuppressWarnings("unchecked")
    @Test
    public void latestApprovalsTest() throws InterruptedException {
        Approval approval1 = saveSampleApproval();
        approval1.setPermission(Permissions.CONTENT_LEAD.toSpringRoleName());
        approval1.setStatus(ApprovalStatus.APPROVED);
        approval1 = this.approvalService.updateApproval(this.savedApproval);

        Approval approval2 = saveSampleApproval();
        approval2.setPermission(Permissions.PSYCHOMETRIC_LEAD.toSpringRoleName());
        approval2.setStatus(ApprovalStatus.APPROVED);
        approval2 = this.approvalService.updateApproval(approval2);

        Approval approval3 = saveSampleApproval();
        approval3.setPermission(Permissions.QA_LEAD.toSpringRoleName());
        approval3.setStatus(ApprovalStatus.REJECTED);
        approval3 = this.approvalService.updateApproval(approval3);

        this.savedRecord = this.publishingRecordService.retrievePublishingRecordWithAllowablePurposes(this.savedAssessment.getId());
        this.savedRecord = this.publishingRecordService.savePublishingRecord(this.savedRecord, false);

        approval1.setStatus(ApprovalStatus.APPROVED);
        this.approvalService.updateApproval(approval1);

        approval2.setStatus(ApprovalStatus.APPROVED);
        this.approvalService.updateApproval(approval2);

        approval3.setStatus(ApprovalStatus.APPROVED);
        this.approvalService.updateApproval(approval3);

        final List<Approval> latestApprovals = callGETRestService(BASE_URL + "/current/" + this.savedRecord.getId(), List.class);

        assertThat(latestApprovals.size(), is(3));
    }

    @ApiDocExample(rank = 6)
    @Test
    public void updateApprovalTest() throws InterruptedException {
        this.savedRecord.setPurpose(new Purpose[] { Purpose.REGISTRATION });
        this.publishingRecordService.savePublishingRecord(this.savedRecord, false);
        this.savedApproval.setStatus(ApprovalStatus.APPROVED);
        final Approval updatedApproval = callPUTRestService(BASE_URL + "/updateApproval", buildParamObject(this.savedApproval), Approval.class);
        assertThat(updatedApproval.getStatus(), is(ApprovalStatus.APPROVED));
    }

    @ApiDocExample(rank = 7)
    @Test
    public void isAdminUserTest() throws InterruptedException {
        final boolean isAdminUser = callGETRestService(BASE_URL + "/isAdminUser", Boolean.class);
        assertThat(isAdminUser, is(true));
    }

    private Approval saveSampleApproval() {
        final Approval approval = new Approval();
        approval.setAssessmentId(this.savedAssessment.getId());
        approval.setPublishingRecordId(this.savedRecord.getId());
        approval.setStatus(ApprovalStatus.PENDING);
        approval.setPermission(Permissions.CONTENT_LEAD.toSpringRoleName());
        approval.setPermissionLabel("Content Lead");
        approval.setLevel(1);
        approval.setUsername("Content Lead User");
        approval.setVersion("1.0");
        approval.setMessage("Not yet approved");
        return this.approvalService.updateApproval(approval);
    }

    private void saveGoodMinimalSegmentAndItemData() {
        final Segment savedSegment = this.segmentService.createSegment(DomainFactory.manufactureValidSegment(this.savedAssessment.getId(), this.savedAlgorithm, 1));
        final Item item = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        item.setId(null);
        final List<ItemLocation> itemLocationList = Lists.newArrayList();
        itemLocationList.add(new AdaptiveItemLocation(savedSegment.getId(), null, 0, 0));
        item.setItemLocation(itemLocationList);
        this.itemService.saveItem(item);
    }

    private void saveGoodMinimalBlueprintData() {
        final List<Segment> segments = segmentService.findSegmentListByAssessmentId(this.savedAssessment.getId());
        segmentService.loadReferenceData(segments);
        final BlueprintElement bpe = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), segments);
        bpe.setGrade(this.savedAssessment.getGrade()[0]);
        bpe.setLevel("1");
        bpe.setStandardKey("CC-ELA-v1");
        bpe.setTextDescription("textDescription");
        bpe.setActive(true);
        this.blueprintElementService.saveBlueprintElement(null, bpe);
    }
}
