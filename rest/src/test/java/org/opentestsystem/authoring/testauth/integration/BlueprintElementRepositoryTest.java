/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.integration;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;

import java.util.HashSet;

import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.BlueprintElement;
import org.opentestsystem.authoring.testauth.domain.DomainFactory;
import org.opentestsystem.authoring.testauth.domain.Segment;
import org.opentestsystem.authoring.testauth.persistence.BlueprintElementRepository;
import org.opentestsystem.authoring.testauth.rest.AbstractRestEmbeddedMongoTest;
import org.springframework.beans.factory.annotation.Autowired;

public class BlueprintElementRepositoryTest extends AbstractRestEmbeddedMongoTest {

    @Autowired
    private BlueprintElementRepository blueprintElementRepository;

    @Test
    public void saveBlueprintElementTest() {
        final BlueprintElement blueprintElement = DomainFactory.manufactureValidBlueprintElement("assessment-id", new HashSet<Segment>());
        final BlueprintElement savedBlueprintElement = this.blueprintElementRepository.save(blueprintElement);
        assertThat(savedBlueprintElement, is(notNullValue()));
        assertThat(savedBlueprintElement.getId(), is(notNullValue()));
    }

    @Test
    public void findBlueprintElementTest() {
        final BlueprintElement blueprintElement = DomainFactory.manufactureValidBlueprintElement("assessment-id", new HashSet<Segment>());
        final BlueprintElement savedBlueprintElement = this.blueprintElementRepository.save(blueprintElement);
        assertThat(savedBlueprintElement, is(notNullValue()));
        final BlueprintElement foundBlueprintElement = this.blueprintElementRepository.findOne(savedBlueprintElement.getId());
        assertThat(savedBlueprintElement.getId(), is(equalTo(foundBlueprintElement.getId())));
        assertThat(savedBlueprintElement, is(equalTo(foundBlueprintElement)));
    }

    @Test
    public void removeBlueprintElementTest() {
        final BlueprintElement blueprintElement = DomainFactory.manufactureValidBlueprintElement("assessment-id", new HashSet<Segment>());
        final BlueprintElement savedBlueprintElement = this.blueprintElementRepository.save(blueprintElement);
        this.blueprintElementRepository.delete(blueprintElement);
        final BlueprintElement foundBlueprintElement = this.blueprintElementRepository.findOne(savedBlueprintElement.getId());
        assertThat(foundBlueprintElement, is(nullValue()));
    }

    @Test
    public void findAllByAssessmentIdAndActiveTest() {
        final BlueprintElement blueprintElement = DomainFactory.manufactureValidBlueprintElement("assessment-id", new HashSet<Segment>());
        final BlueprintElement blueprintElement2 = DomainFactory.manufactureValidBlueprintElement("assessment-id", new HashSet<Segment>());
        final BlueprintElement blueprintElement3 = DomainFactory.manufactureValidBlueprintElement("assessment-id", new HashSet<Segment>());
        final BlueprintElement blueprintElement4 = DomainFactory.manufactureValidBlueprintElement("assessment-id2", new HashSet<Segment>());

        blueprintElement.setActive(true);
        blueprintElement2.setActive(true);
        blueprintElement3.setActive(false);
        blueprintElement4.setActive(true);

        this.blueprintElementRepository.save(blueprintElement);
        this.blueprintElementRepository.save(blueprintElement2);
        this.blueprintElementRepository.save(blueprintElement3);
        this.blueprintElementRepository.save(blueprintElement4);

        assertThat(blueprintElementRepository.findAllByAssessmentIdAndActive("assessment-id", true).size(), is(2));
        assertThat(blueprintElementRepository.findAllByAssessmentIdAndActive("assessment-id", false).size(), is(1));
    }

    @Test
    public void findAllByAssessmentIdAndGradeInTest() {
        final BlueprintElement blueprintElement = DomainFactory.manufactureValidBlueprintElement("assessment-id", new HashSet<Segment>());
        final BlueprintElement blueprintElement2 = DomainFactory.manufactureValidBlueprintElement("assessment-id", new HashSet<Segment>());
        final BlueprintElement blueprintElement3 = DomainFactory.manufactureValidBlueprintElement("assessment-id", new HashSet<Segment>());
        final BlueprintElement blueprintElement4 = DomainFactory.manufactureValidBlueprintElement("assessment-id2", new HashSet<Segment>());

        blueprintElement.setGrade("1");
        blueprintElement2.setGrade("1");
        blueprintElement3.setGrade("2");
        blueprintElement4.setGrade("2");

        this.blueprintElementRepository.save(blueprintElement);
        this.blueprintElementRepository.save(blueprintElement2);
        this.blueprintElementRepository.save(blueprintElement3);
        this.blueprintElementRepository.save(blueprintElement4);

        assertThat(blueprintElementRepository.findAllByAssessmentIdAndGradeIn("assessment-id", new String[] { "1" }).size(), is(2));
        assertThat(blueprintElementRepository.findAllByAssessmentIdAndGradeIn("assessment-id", new String[] { "2" }).size(), is(1));
        assertThat(blueprintElementRepository.findAllByAssessmentIdAndGradeIn("assessment-id", new String[] { "3" }).size(), is(0));
        assertThat(blueprintElementRepository.findAllByAssessmentIdAndGradeIn("assessment-id", new String[] { "1", "2", "3" }).size(), is(3));
        assertThat(blueprintElementRepository.findAllByAssessmentIdAndGradeIn("assessment-id2", new String[] { "1", "2", "3" }).size(), is(1));
    }

    @Test
    public void findAllChildrenByAssessmentIdAndGradeAndParentKeyTest() {
        final BlueprintElement blueprintElement = DomainFactory.manufactureValidBlueprintElement("assessment-id", new HashSet<Segment>());
        final BlueprintElement blueprintElement2 = DomainFactory.manufactureValidBlueprintElement("assessment-id", new HashSet<Segment>());
        final BlueprintElement blueprintElement3 = DomainFactory.manufactureValidBlueprintElement("assessment-id", new HashSet<Segment>());
        final BlueprintElement blueprintElement4 = DomainFactory.manufactureValidBlueprintElement("assessment-id", new HashSet<Segment>());

        blueprintElement.setGrade("1");
        blueprintElement.setParentKey(null);
        blueprintElement.setStandardKey("key-1");

        blueprintElement2.setGrade("1");
        blueprintElement2.setParentKey("key-1");
        blueprintElement2.setStandardKey("key-1|abc");

        blueprintElement3.setGrade("1");
        blueprintElement3.setParentKey("key-1|abc");
        blueprintElement3.setStandardKey("key-1|abc|def");

        blueprintElement4.setGrade("2");
        blueprintElement4.setParentKey("key-1|abc");
        blueprintElement4.setStandardKey("key-1|abc|def");

        this.blueprintElementRepository.save(blueprintElement);
        this.blueprintElementRepository.save(blueprintElement2);
        this.blueprintElementRepository.save(blueprintElement3);
        this.blueprintElementRepository.save(blueprintElement4);

        assertThat(blueprintElementRepository.findAllChildrenByAssessmentIdAndGradeAndParentKey("assessment-id", "1", null).size(), is(3));
        assertThat(blueprintElementRepository.findAllChildrenByAssessmentIdAndGradeAndParentKey("assessment-id", "1", "").size(), is(3));
        assertThat(blueprintElementRepository.findAllChildrenByAssessmentIdAndGradeAndParentKey("assessment-id", "1", "key-1").size(), is(3));
        assertThat(blueprintElementRepository.findAllChildrenByAssessmentIdAndGradeAndParentKey("assessment-id", "1", "KEY-1").size(), is(0));
        assertThat(blueprintElementRepository.findAllChildrenByAssessmentIdAndGradeAndParentKey("assessment-id", "1", "key-1|").size(), is(0));
        assertThat(blueprintElementRepository.findAllChildrenByAssessmentIdAndGradeAndParentKey("assessment-id", "1", "key-1|abc").size(), is(2));
        assertThat(blueprintElementRepository.findAllChildrenByAssessmentIdAndGradeAndParentKey("assessment-id", "1", "key-1|abc|").size(), is(0));
        assertThat(blueprintElementRepository.findAllChildrenByAssessmentIdAndGradeAndParentKey("assessment-id", "1", "key-1|abc|def").size(), is(1));
        assertThat(blueprintElementRepository.findAllChildrenByAssessmentIdAndGradeAndParentKey("assessment-id", "1", "key-1|abc|def|").size(), is(0));
        assertThat(blueprintElementRepository.findAllChildrenByAssessmentIdAndGradeAndParentKey("assessment-id", "1", "key").size(), is(0));
        assertThat(blueprintElementRepository.findAllChildrenByAssessmentIdAndGradeAndParentKey("assessment-id", "1", "abc").size(), is(0));
    }
}
