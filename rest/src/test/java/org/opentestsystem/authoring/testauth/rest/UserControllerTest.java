/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.rest;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.mockito.Matchers.anyMap;
import static org.mockito.Matchers.anyString;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.Permissions;
import org.opentestsystem.shared.progman.client.ProgManClient;
import org.opentestsystem.shared.progman.client.domain.Tenant;
import org.opentestsystem.shared.progman.client.domain.TenantChain;
import org.opentestsystem.shared.progman.client.domain.TenantSubscription;
import org.opentestsystem.shared.security.domain.SbacEntity;
import org.opentestsystem.shared.security.domain.SbacPermission;
import org.opentestsystem.shared.security.domain.SbacRole;
import org.opentestsystem.shared.security.domain.SbacUser;
import org.opentestsystem.shared.security.domain.TenantContainer;
import org.opentestsystem.shared.security.service.TenancyService;
import org.opentestsystem.shared.security.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.TestingAuthenticationToken;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import com.google.common.collect.Multimap;
import com.google.common.collect.Sets;

public class UserControllerTest extends AbstractRestEmbeddedMongoTest {

    private static final String COMPONENT_NAME = "TestAuthoring";

    static {
        System.setProperty("component.name", COMPONENT_NAME);
    }

    private Map<String, Object> response;

    private TenantContainer tenantContainer;

    private Set<SbacEntity> entities;

    @Autowired
    private UserService userService;

    @Autowired
    private TenancyService tenancyService;

    @Autowired
    private ProgManClient progManClient;

    @Before
    public void testSetup() {
        this.response = ImmutableMap.of("id", (Object) "ajsdfkl", "assets", (Object) ImmutableList.of(Map.class, ImmutableMap.of("name", "logo", "property", "/img/dude.jpg")));
    }

    private TenantChain createTenantChainFromContainer(final TenantContainer inTenantContainer) {
        TenantChain chain = new TenantChain();
        chain.setTenants(ImmutableSet.<Tenant> builder().addAll(inTenantContainer.getTenants()).build());
        return chain;
    }

    @SuppressWarnings("unchecked")
    @Test
    public void getUserAssets() {
        Tenant tenantRead = PODAM_FACTORY.manufacturePojo(Tenant.class);
        List<Permissions> permissions = Lists.newArrayList();
        permissions.add(Permissions.TEST_READ);
        setUserWithRoles(tenantRead, permissions);

        when(this.progManClient.getCustomAssets(anyString(), anyMap())).thenReturn(this.response);
        final Map<String, Object> userAssetGroup = callGETRestService("/user/assets?tenantId=" + this.tenantContainer.getTenants().iterator().next().getId(), Map.class);
        if (userAssetGroup != null) {
            final List<Object> assets = (List<Object>) userAssetGroup.get("assets");
            assertThat(userAssetGroup.size(), is(2));
            assertThat(assets.size(), is(2));
        }
    }

    @Test
    public void getUserTenantContainer() {
        Tenant tenantRead = PODAM_FACTORY.manufacturePojo(Tenant.class);
        List<Permissions> permissions = Lists.newArrayList();
        permissions.add(Permissions.TEST_READ);
        setUserWithRoles(tenantRead, permissions);

        final TenantContainer chain = callGETRestService("/user/applicableTenants", TenantContainer.class);
        assertThat(chain, is(notNullValue()));
    }

    @Test
    public void userHasPermissionTest() {
        Tenant tenantRead = PODAM_FACTORY.manufacturePojo(Tenant.class);
        List<Permissions> permissions = Lists.newArrayList();
        permissions.add(Permissions.TEST_READ);
        setUserWithRoles(tenantRead, permissions);

        String permission = "ROLE_Test Read";
        boolean userHasPermission = callGETRestService("/user/hasPermission/" + permission, Boolean.class);
        assertThat(userHasPermission, is(true));

        permission = "ROLE_Test Modify";
        userHasPermission = callGETRestService("/user/hasPermission/" + permission, Boolean.class);
        assertThat(userHasPermission, is(false));
    }

    @Test
    public void tenantedUserHasPermissionTest() {
        Tenant tenantRead = PODAM_FACTORY.manufacturePojo(Tenant.class);
        Tenant tenantModify = PODAM_FACTORY.manufacturePojo(Tenant.class);

        List<Permissions> permissions = Lists.newArrayList();
        permissions.add(Permissions.TEST_READ);
        setUserWithRoles(tenantRead, permissions);

        String permission = "ROLE_Test Read";
        boolean userHasPermission = callGETRestService("/user/hasPermission/" + permission + "?tenantId=" + tenantRead.getId(), Boolean.class);
        assertThat(userHasPermission, is(true));

        permission = "ROLE_Test Modify";
        userHasPermission = callGETRestService("/user/hasPermission/" + permission + "?tenantId=" + tenantRead.getId(), Boolean.class);
        assertThat(userHasPermission, is(false));

        permissions = Lists.newArrayList();
        permissions.add(Permissions.TEST_READ);
        permissions.add(Permissions.TEST_MODIFY);
        setUserWithRoles(tenantModify, permissions);

        permission = "ROLE_Test Read";
        userHasPermission = callGETRestService("/user/hasPermission/" + permission + "?tenantId=" + tenantModify.getId(), Boolean.class);
        assertThat(userHasPermission, is(true));

        permission = "ROLE_Test Modify";
        userHasPermission = callGETRestService("/user/hasPermission/" + permission + "?tenantId=" + tenantModify.getId(), Boolean.class);
        assertThat(userHasPermission, is(true));
    }

    @SuppressWarnings("unchecked")
    public void setUserWithRoles(final Tenant myTenant, final List<Permissions> inPermissions) {
        final TenantSubscription tenantSubscription = PODAM_FACTORY.manufacturePojo(TenantSubscription.class);
        tenantSubscription.getComponent().setName(COMPONENT_NAME);
        tenantSubscription.setEffectiveDate(new DateTime().minusWeeks(1));
        tenantSubscription.setExpirationDate(null);
        tenantSubscription.setInGoodStanding(true);
        myTenant.setTenantSubscriptions(ImmutableList.of(tenantSubscription));
        this.tenantContainer = PODAM_FACTORY.manufacturePojo(TenantContainer.class);
        this.tenantContainer.addAllTenants(ImmutableList.of(myTenant));
        this.entities = Sets.newHashSet(new SbacEntity(myTenant.getType(), myTenant.getId(), myTenant.getName()));

        final Map<String, Collection<SbacPermission>> permissionsMap = new HashMap<String, Collection<SbacPermission>>();
        final Collection<SbacPermission> permissionCollection = new ArrayList<SbacPermission>();
        final Multimap<String, SbacPermission> permissions = ArrayListMultimap.create();
        final Multimap<String, SbacRole> roles = ArrayListMultimap.create();

        for (Permissions inPermission : inPermissions) {
            final SbacPermission permission = new SbacPermission();
            permission.setComponentName(COMPONENT_NAME);
            permission.setName(inPermission.getTitle());
            permissions.put(inPermission.name(), permission);

            permissionCollection.add(permission);
            permissionsMap.put(inPermission.getTitle(), permissionCollection);
            permissions.put(inPermission.getTitle(), permission);

            final SbacRole role = new SbacRole();
            role.setIsApplicableToTenant(true);
            role.setRoleName(inPermission.getTitle());
            role.setRoleEntityLevel(myTenant.getType().name());
            role.addEntityValue(myTenant.getType(), myTenant.getId(), myTenant.getName());
            role.setPermissions(permissionCollection);
            role.setEffectiveTenant(myTenant);
            roles.put(role.getRoleName(), role);

            when(this.tenancyService.getSkinnableAssets(role)).thenReturn(this.response);
            // when(this.userService.findMatchingRole(myTenant)).thenReturn(role);
        }

        final SbacUser user = new SbacUser(roles, null);
        SecurityContextHolder.getContext().setAuthentication(new TestingAuthenticationToken(user, null, new ArrayList<GrantedAuthority>(user.getAuthorities())));

        when(this.progManClient.getTenantChain(anyMap())).thenReturn(createTenantChainFromContainer(tenantContainer));
        when(this.userService.getCurrentUser()).thenReturn(user);
        TenantContainer tc = new TenantContainer();
        tc.addTenant(myTenant);
        when(this.userService.getUniqueTenantsForUser()).thenReturn(tc);
        Map<String, Object> assets = new HashMap<String, Object>();
        assets.put("assets", Arrays.asList(new String[] {"1", "2" }));
        assets.put("other", Arrays.asList(new String[] {"1", "2" }));
        when(this.userService.getAssetsForTenant(anyString())).thenReturn(assets);
    }
}
