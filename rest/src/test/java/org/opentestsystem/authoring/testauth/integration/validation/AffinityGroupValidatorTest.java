/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.integration.validation;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;

import java.util.ArrayList;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.AffinityGroup;
import org.opentestsystem.authoring.testauth.domain.AffinityGroupValue;
import org.opentestsystem.authoring.testauth.domain.Assessment;
import org.opentestsystem.authoring.testauth.domain.DomainFactory;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionAlgorithm;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionPurpose;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionType;
import org.opentestsystem.authoring.testauth.domain.Publication;
import org.opentestsystem.authoring.testauth.domain.Segment;
import org.opentestsystem.authoring.testauth.domain.Subject;
import org.opentestsystem.authoring.testauth.rest.AbstractRestEmbeddedMongoTest;
import org.opentestsystem.authoring.testauth.service.AssessmentService;
import org.opentestsystem.authoring.testauth.service.ItemSelectionAlgorithmService;
import org.opentestsystem.authoring.testauth.service.PublicationService;
import org.opentestsystem.authoring.testauth.service.SegmentService;
import org.opentestsystem.authoring.testauth.service.SubjectService;
import org.opentestsystem.authoring.testauth.validation.AffinityGroupValidator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.BeanPropertyBindingResult;
import org.springframework.validation.Errors;
import org.springframework.validation.FieldError;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;

public class AffinityGroupValidatorTest extends AbstractRestEmbeddedMongoTest {

    @Autowired
    private ItemSelectionAlgorithmService itemSelectionAlgorithmService;

    @Autowired
    private SegmentService segmentService;

    @Autowired
    private SubjectService subjectService;

    @Autowired
    private PublicationService publicationService;

    @Autowired
    private AssessmentService assessmentService;

    @Autowired
    private AffinityGroupValidator affinityGroupValidator;

    private Assessment savedAssessment = null;

    private Segment booleanSegment = null;
    private Segment integerSegment = null;
    private Segment floatSegment = null;
    private Segment listSegment = null;
    private Segment stringSegment = null;

    @Before
    public void setupTestData() {
        final Subject savedSubject = this.subjectService.saveSubject(DomainFactory.manufactureValidSubject("abb"));
        final Publication savedPublication = this.publicationService.savePublication(PODAM_FACTORY.manufacturePojo(Publication.class));
        this.savedAssessment = this.assessmentService.saveAssessment(DomainFactory.manufactureValidAssessment(savedSubject, savedPublication));

        final ItemSelectionAlgorithm booleanAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(
                DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.BLUEPRINT, ItemSelectionType.BOOLEAN));
        this.booleanSegment = DomainFactory.manufactureValidSegment(this.savedAssessment.getId(), booleanAlgorithm, 1);
        this.booleanSegment.setPosition(1);
        this.booleanSegment = this.segmentService.createSegment(this.booleanSegment);

        final ItemSelectionAlgorithm integerAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(
                DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.BLUEPRINT, ItemSelectionType.INTEGER));
        this.integerSegment = DomainFactory.manufactureValidSegment(this.savedAssessment.getId(), integerAlgorithm, 2);
        this.integerSegment.setPosition(2);
        this.integerSegment = this.segmentService.createSegment(this.integerSegment);

        final ItemSelectionAlgorithm floatAlgorithm = this.itemSelectionAlgorithmService
                .createItemSelectionAlgorithm(DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.BLUEPRINT, ItemSelectionType.FLOAT));
        this.floatSegment = DomainFactory.manufactureValidSegment(this.savedAssessment.getId(), floatAlgorithm, 3);
        this.floatSegment.setPosition(3);
        this.floatSegment = this.segmentService.createSegment(this.floatSegment);

        final ItemSelectionAlgorithm listAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(
                DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.BLUEPRINT, ItemSelectionType.LIST));
        this.listSegment = DomainFactory.manufactureValidSegment(this.savedAssessment.getId(), listAlgorithm, 4);
        this.listSegment.setPosition(4);
        this.listSegment = this.segmentService.createSegment(this.listSegment);
        
        final ItemSelectionAlgorithm stringAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(
        		DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.BLUEPRINT, ItemSelectionType.STRING));
        this.stringSegment = DomainFactory.manufactureValidSegment(this.savedAssessment.getId(), stringAlgorithm, 5);
        this.stringSegment.setPosition(5);
        this.stringSegment = this.segmentService.createSegment(this.stringSegment);
    }

    @Test
    public void validateAffinityGroup() {
        final AffinityGroup affinityGroup = DomainFactory.manufactureValidAffinityGroup(this.savedAssessment.getId(), ImmutableSet.of(listSegment, integerSegment, floatSegment, booleanSegment, stringSegment));

        final Errors errors = new BeanPropertyBindingResult(affinityGroup, "affinityGroup");
        this.affinityGroupValidator.validate(affinityGroup, errors);
        assertThat(errors.getAllErrors().size(), is(0));
    }

    @Test
    public void validateAffinityGroupWithMissingBasicFields() {
        // invalid segment
        AffinityGroup affinityGroup = DomainFactory.manufactureValidAffinityGroup(this.savedAssessment.getId(), ImmutableSet.of(listSegment, integerSegment, floatSegment, booleanSegment, stringSegment));
        affinityGroup.setAssessmentId("");
        affinityGroup.setAffinityGroupValueMap(ImmutableMap.of("segment1", new AffinityGroupValue()));

        Errors errors = new BeanPropertyBindingResult(affinityGroup, "affinityGroup");
        this.affinityGroupValidator.validate(affinityGroup, errors);

        assertThat(errors.getAllErrors().size(), is(5));
        assertThat(getErrorsForCode(errors, "assessmentId.required").size(), is(1));
        assertThat(getErrorsForCode(errors, "affinityGroup.affinityGroupValueMap.operationalItemMinValue.required").size(), is(1));
        assertThat(getErrorsForCode(errors, "affinityGroup.affinityGroupValueMap.operationalItemMaxValue.required").size(), is(1));
        assertThat(getErrorsForCode(errors, "affinityGroup.affinityGroupValueMap.fieldTestItemMinValue.required").size(), is(1));
        assertThat(getErrorsForCode(errors, "affinityGroup.affinityGroupValueMap.fieldTestItemMaxValue.required").size(), is(1));

        // valid segment, missing fields
        affinityGroup = DomainFactory.manufactureValidAffinityGroup(this.savedAssessment.getId(), ImmutableSet.of(listSegment, integerSegment, floatSegment, booleanSegment, stringSegment));
        affinityGroup.setAssessmentId("");
        affinityGroup.setAffinityGroupValueMap(ImmutableMap.of(booleanSegment.getId(), new AffinityGroupValue()));

        errors = new BeanPropertyBindingResult(affinityGroup, "affinityGroup");
        this.affinityGroupValidator.validate(affinityGroup, errors);

        assertThat(errors.getAllErrors().size(), is(6));
        assertThat(getErrorsForCode(errors, "assessmentId.required").size(), is(1));
        assertThat(getErrorsForCode(errors, "affinityGroup.affinityGroupValueMap.operationalItemMinValue.required").size(), is(1));
        assertThat(getErrorsForCode(errors, "affinityGroup.affinityGroupValueMap.operationalItemMaxValue.required").size(), is(1));
        assertThat(getErrorsForCode(errors, "affinityGroup.affinityGroupValueMap.fieldTestItemMinValue.required").size(), is(1));
        assertThat(getErrorsForCode(errors, "affinityGroup.affinityGroupValueMap.fieldTestItemMaxValue.required").size(), is(1));
        assertThat(getErrorsForCode(errors, "affinityGroup.affinityGroupValueMap.itemSelectionParameters.count").size(), is(1));
    }

    @Test
    public void validateAffinityGroupWithInvalidMinMaxData() {
        // op max < op min
        final AffinityGroup affinityGroup = DomainFactory.manufactureValidAffinityGroup(this.savedAssessment.getId(), ImmutableSet.of(listSegment, integerSegment, floatSegment, booleanSegment, stringSegment));
        affinityGroup.getAffinityGroupValueMap().get(listSegment.getId()).setOperationalItemMinValue(5);
        affinityGroup.getAffinityGroupValueMap().get(listSegment.getId()).setOperationalItemMaxValue(2);

        Errors errors = new BeanPropertyBindingResult(affinityGroup, "affinityGroup");
        this.affinityGroupValidator.validate(affinityGroup, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "affinityGroup.affinityGroupValueMap.operationalItemMaxValue.lessthanmin").size(), is(1));

        // ft max < ft min
        affinityGroup.getAffinityGroupValueMap().get(listSegment.getId()).setFieldTestItemMinValue(1);
        affinityGroup.getAffinityGroupValueMap().get(listSegment.getId()).setFieldTestItemMaxValue(0);

        errors = new BeanPropertyBindingResult(affinityGroup, "affinityGroup");
        this.affinityGroupValidator.validate(affinityGroup, errors);
        assertThat(errors.getAllErrors().size(), is(2));
        assertThat(getErrorsForCode(errors, "affinityGroup.affinityGroupValueMap.operationalItemMaxValue.lessthanmin").size(), is(1));
        assertThat(getErrorsForCode(errors, "affinityGroup.affinityGroupValueMap.fieldTestItemMaxValue.lessthanmin").size(), is(1));

    }

    @Test
    public void validateAffinityGroupWithBooleanParameter() {
        final AffinityGroup affinityGroup = DomainFactory.manufactureValidAffinityGroup(this.savedAssessment.getId(), ImmutableSet.of(listSegment, integerSegment, floatSegment, booleanSegment, stringSegment));

        affinityGroup.getAffinityGroupValueMap().get(this.booleanSegment.getId()).getItemSelectionParameters().clear();
        Errors errors = new BeanPropertyBindingResult(affinityGroup, "affinityGroup");
        this.affinityGroupValidator.validate(affinityGroup, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "affinityGroup.affinityGroupValueMap.itemSelectionParameters.count").size(), is(1));

        affinityGroup.getAffinityGroupValueMap().get(this.booleanSegment.getId()).getItemSelectionParameters().put("invalid-param-name", "invalid-boolean");
        errors = new BeanPropertyBindingResult(affinityGroup, "affinityGroup");
        this.affinityGroupValidator.validate(affinityGroup, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "affinityGroup.affinityGroupValueMap.itemSelectionParameters.required").size(), is(1));

        affinityGroup.getAffinityGroupValueMap().get(this.booleanSegment.getId()).getItemSelectionParameters().clear();
        affinityGroup.getAffinityGroupValueMap().get(this.booleanSegment.getId()).getItemSelectionParameters()
                .put(this.booleanSegment.getItemSelectionAlgorithm().getParameters().get(0).getParameterName(), "invalid-boolean");
        errors = new BeanPropertyBindingResult(affinityGroup, "affinityGroup");
        this.affinityGroupValidator.validate(affinityGroup, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "affinityGroup.affinityGroupValueMap.itemSelectionParameters.invalid").size(), is(1));

        affinityGroup.getAffinityGroupValueMap().get(this.booleanSegment.getId()).getItemSelectionParameters().clear();
        affinityGroup.getAffinityGroupValueMap().get(this.booleanSegment.getId()).getItemSelectionParameters()
                .put(this.booleanSegment.getItemSelectionAlgorithm().getParameters().get(0).getParameterName(), "false");
        errors = new BeanPropertyBindingResult(affinityGroup, "affinityGroup");
        this.affinityGroupValidator.validate(affinityGroup, errors);
        assertThat(errors.getAllErrors().size(), is(0));
    }

    @Test
    public void validateAffinityGroupWithIntegerParameter() {
        final AffinityGroup affinityGroup = DomainFactory.manufactureValidAffinityGroup(this.savedAssessment.getId(), ImmutableSet.of(listSegment, integerSegment, floatSegment, booleanSegment, stringSegment));

        affinityGroup.getAffinityGroupValueMap().get(this.integerSegment.getId()).getItemSelectionParameters().clear();
        Errors errors = new BeanPropertyBindingResult(affinityGroup, "affinityGroup");
        this.affinityGroupValidator.validate(affinityGroup, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "affinityGroup.affinityGroupValueMap.itemSelectionParameters.count").size(), is(1));

        affinityGroup.getAffinityGroupValueMap().get(this.integerSegment.getId()).getItemSelectionParameters().put("invalid-param-name", "invalid-integer");
        errors = new BeanPropertyBindingResult(affinityGroup, "affinityGroup");
        this.affinityGroupValidator.validate(affinityGroup, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "affinityGroup.affinityGroupValueMap.itemSelectionParameters.required").size(), is(1));

        affinityGroup.getAffinityGroupValueMap().get(this.integerSegment.getId()).getItemSelectionParameters().clear();
        affinityGroup.getAffinityGroupValueMap().get(this.integerSegment.getId()).getItemSelectionParameters()
                .put(this.integerSegment.getItemSelectionAlgorithm().getParameters().get(0).getParameterName(), "invalid-integer");
        errors = new BeanPropertyBindingResult(affinityGroup, "affinityGroup");
        this.affinityGroupValidator.validate(affinityGroup, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "affinityGroup.affinityGroupValueMap.itemSelectionParameters.parseable.number").size(), is(1));

        affinityGroup.getAffinityGroupValueMap().get(this.integerSegment.getId()).getItemSelectionParameters().clear();
        affinityGroup.getAffinityGroupValueMap().get(this.integerSegment.getId()).getItemSelectionParameters()
                .put(this.integerSegment.getItemSelectionAlgorithm().getParameters().get(0).getParameterName(), "5.5");
        errors = new BeanPropertyBindingResult(affinityGroup, "affinityGroup");
        this.affinityGroupValidator.validate(affinityGroup, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "affinityGroup.affinityGroupValueMap.itemSelectionParameters.parseable.number").size(), is(1));

        affinityGroup.getAffinityGroupValueMap().get(this.integerSegment.getId()).getItemSelectionParameters().clear();
        affinityGroup.getAffinityGroupValueMap().get(this.integerSegment.getId()).getItemSelectionParameters()
                .put(this.integerSegment.getItemSelectionAlgorithm().getParameters().get(0).getParameterName(), "999");
        errors = new BeanPropertyBindingResult(affinityGroup, "affinityGroup");
        this.affinityGroupValidator.validate(affinityGroup, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "affinityGroup.affinityGroupValueMap.itemSelectionParameters.out.of.range").size(), is(1));

        affinityGroup.getAffinityGroupValueMap().get(this.integerSegment.getId()).getItemSelectionParameters().clear();
        affinityGroup.getAffinityGroupValueMap().get(this.integerSegment.getId()).getItemSelectionParameters()
                .put(this.integerSegment.getItemSelectionAlgorithm().getParameters().get(0).getParameterName(), "-999");
        errors = new BeanPropertyBindingResult(affinityGroup, "affinityGroup");
        this.affinityGroupValidator.validate(affinityGroup, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "affinityGroup.affinityGroupValueMap.itemSelectionParameters.out.of.range").size(), is(1));

        affinityGroup.getAffinityGroupValueMap().get(this.integerSegment.getId()).getItemSelectionParameters().clear();
        affinityGroup.getAffinityGroupValueMap().get(this.integerSegment.getId()).getItemSelectionParameters()
                .put(this.integerSegment.getItemSelectionAlgorithm().getParameters().get(0).getParameterName(), "5");
        errors = new BeanPropertyBindingResult(affinityGroup, "affinityGroup");
        this.affinityGroupValidator.validate(affinityGroup, errors);
        assertThat(errors.getAllErrors().size(), is(0));
    }

    @Test
    public void validateAffinityGroupWithFloatParameter() {
        final AffinityGroup affinityGroup = DomainFactory.manufactureValidAffinityGroup(this.savedAssessment.getId(), ImmutableSet.of(listSegment, integerSegment, floatSegment, booleanSegment, stringSegment));

        affinityGroup.getAffinityGroupValueMap().get(this.floatSegment.getId()).getItemSelectionParameters().clear();
        Errors errors = new BeanPropertyBindingResult(affinityGroup, "affinityGroup");
        this.affinityGroupValidator.validate(affinityGroup, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "affinityGroup.affinityGroupValueMap.itemSelectionParameters.count").size(), is(1));

        affinityGroup.getAffinityGroupValueMap().get(this.floatSegment.getId()).getItemSelectionParameters().put("invalid-param-name", "invalid-float");
        errors = new BeanPropertyBindingResult(affinityGroup, "affinityGroup");
        this.affinityGroupValidator.validate(affinityGroup, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "affinityGroup.affinityGroupValueMap.itemSelectionParameters.required").size(), is(1));

        affinityGroup.getAffinityGroupValueMap().get(this.floatSegment.getId()).getItemSelectionParameters().clear();
        affinityGroup.getAffinityGroupValueMap().get(this.floatSegment.getId()).getItemSelectionParameters()
                .put(this.floatSegment.getItemSelectionAlgorithm().getParameters().get(0).getParameterName(), "invalid-float");
        errors = new BeanPropertyBindingResult(affinityGroup, "affinityGroup");
        this.affinityGroupValidator.validate(affinityGroup, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "affinityGroup.affinityGroupValueMap.itemSelectionParameters.parseable.number").size(), is(1));

        affinityGroup.getAffinityGroupValueMap().get(this.floatSegment.getId()).getItemSelectionParameters().clear();
        affinityGroup.getAffinityGroupValueMap().get(this.floatSegment.getId()).getItemSelectionParameters()
                .put(this.floatSegment.getItemSelectionAlgorithm().getParameters().get(0).getParameterName(), "999");
        errors = new BeanPropertyBindingResult(affinityGroup, "affinityGroup");
        this.affinityGroupValidator.validate(affinityGroup, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "affinityGroup.affinityGroupValueMap.itemSelectionParameters.out.of.range").size(), is(1));

        affinityGroup.getAffinityGroupValueMap().get(this.floatSegment.getId()).getItemSelectionParameters().clear();
        affinityGroup.getAffinityGroupValueMap().get(this.floatSegment.getId()).getItemSelectionParameters()
                .put(this.floatSegment.getItemSelectionAlgorithm().getParameters().get(0).getParameterName(), "-999");
        errors = new BeanPropertyBindingResult(affinityGroup, "affinityGroup");
        this.affinityGroupValidator.validate(affinityGroup, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "affinityGroup.affinityGroupValueMap.itemSelectionParameters.out.of.range").size(), is(1));

        affinityGroup.getAffinityGroupValueMap().get(this.floatSegment.getId()).getItemSelectionParameters().clear();
        affinityGroup.getAffinityGroupValueMap().get(this.floatSegment.getId()).getItemSelectionParameters()
                .put(this.floatSegment.getItemSelectionAlgorithm().getParameters().get(0).getParameterName(), "5.5");
        errors = new BeanPropertyBindingResult(affinityGroup, "affinityGroup");
        this.affinityGroupValidator.validate(affinityGroup, errors);
        assertThat(errors.getAllErrors().size(), is(0));
    }

    @Test
    public void validateAffinityGroupWithListParameter() {
        final AffinityGroup affinityGroup = DomainFactory.manufactureValidAffinityGroup(this.savedAssessment.getId(), ImmutableSet.of(listSegment, integerSegment, floatSegment, booleanSegment, stringSegment));

        affinityGroup.getAffinityGroupValueMap().get(this.listSegment.getId()).getItemSelectionParameters().clear();
        Errors errors = new BeanPropertyBindingResult(affinityGroup, "affinityGroup");
        this.affinityGroupValidator.validate(affinityGroup, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "affinityGroup.affinityGroupValueMap.itemSelectionParameters.count").size(), is(1));

        affinityGroup.getAffinityGroupValueMap().get(this.listSegment.getId()).getItemSelectionParameters().put("invalid-param-name", "invalid-list");
        errors = new BeanPropertyBindingResult(affinityGroup, "affinityGroup");
        this.affinityGroupValidator.validate(affinityGroup, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "affinityGroup.affinityGroupValueMap.itemSelectionParameters.required").size(), is(1));

        affinityGroup.getAffinityGroupValueMap().get(this.listSegment.getId()).getItemSelectionParameters().clear();
        affinityGroup.getAffinityGroupValueMap().get(this.listSegment.getId()).getItemSelectionParameters()
                .put(this.listSegment.getItemSelectionAlgorithm().getParameters().get(0).getParameterName(), "invalid-list");
        errors = new BeanPropertyBindingResult(affinityGroup, "affinityGroup");
        this.affinityGroupValidator.validate(affinityGroup, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "affinityGroup.affinityGroupValueMap.itemSelectionParameters.invalid.selection").size(), is(1));

        affinityGroup.getAffinityGroupValueMap().get(this.listSegment.getId()).getItemSelectionParameters().clear();
        affinityGroup.getAffinityGroupValueMap().get(this.listSegment.getId()).getItemSelectionParameters()
                .put(this.listSegment.getItemSelectionAlgorithm().getParameters().get(0).getParameterName(), this.listSegment.getItemSelectionAlgorithm().getParameters().get(0).getDefaultValue());
        errors = new BeanPropertyBindingResult(affinityGroup, "affinityGroup");
        this.affinityGroupValidator.validate(affinityGroup, errors);
        assertThat(errors.getAllErrors().size(), is(0));
    }
    
    @Test
    public void validateAffinityGroupWithStringParameter() {
        final AffinityGroup affinityGroup = DomainFactory.manufactureValidAffinityGroup(this.savedAssessment.getId(), ImmutableSet.of(listSegment, integerSegment, floatSegment, booleanSegment, stringSegment));
        Errors errors = new BeanPropertyBindingResult(affinityGroup, "affinityGroup");
        
        
        affinityGroup.getAffinityGroupValueMap().get(this.stringSegment.getId()).getItemSelectionParameters().clear();
        errors = new BeanPropertyBindingResult(affinityGroup, "affinityGroup");
        this.affinityGroupValidator.validate(affinityGroup, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "affinityGroup.affinityGroupValueMap.itemSelectionParameters.count").size(), is(1));
        
    }

    
    @Test
    public void validateAffinityGroupSegmentCounts() {
        AffinityGroup affinityGroup = DomainFactory.manufactureValidAffinityGroup(this.savedAssessment.getId(), ImmutableSet.of(listSegment, integerSegment, floatSegment, booleanSegment, stringSegment));

        Errors errors = new BeanPropertyBindingResult(affinityGroup, "affinityGroup");
        this.affinityGroupValidator.validate(affinityGroup, errors);
        assertThat(errors.getAllErrors().size(), is(0));

        affinityGroup.getAffinityGroupValueMap().remove(listSegment.getId());
        errors = new BeanPropertyBindingResult(affinityGroup, "affinityGroup");
        this.affinityGroupValidator.validate(affinityGroup, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "affinityGroup.affinityGroupValueMap.count").size(), is(1));

        affinityGroup.getAffinityGroupValueMap().clear();
        errors = new BeanPropertyBindingResult(affinityGroup, "affinityGroup");
        this.affinityGroupValidator.validate(affinityGroup, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "affinityGroup.affinityGroupValueMap.count").size(), is(1));

        affinityGroup = DomainFactory.manufactureValidAffinityGroup(this.savedAssessment.getId(), ImmutableSet.of(listSegment, integerSegment, floatSegment, booleanSegment, stringSegment));
        affinityGroup.getAffinityGroupValueMap().remove(listSegment.getId());
        affinityGroup.getAffinityGroupValueMap().put("invalid-segment", new AffinityGroupValue(0, 0, 0, 0));
        errors = new BeanPropertyBindingResult(affinityGroup, "affinityGroup");
        this.affinityGroupValidator.validate(affinityGroup, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "affinityGroup.affinityGroupValueMap.segment.invalid").size(), is(1));

    }

    private static List<FieldError> getErrorsForCode(final Errors errors, final String messageCode) {
        final List<FieldError> fieldErrors = new ArrayList<FieldError>();
        for (final FieldError fieldError : errors.getFieldErrors()) {
            if (fieldError.getDefaultMessage().equals(messageCode)) {
                fieldErrors.add(fieldError);
            }
        }
        return fieldErrors;
    }
}
