/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.service.impl;

import static org.opentestsystem.authoring.testauth.config.TestAuthUtil.paramArray;

import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionAlgorithm;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionAlgorithmType;
import org.opentestsystem.authoring.testauth.domain.search.ItemSelectionAlgorithmSearchRequest;
import org.opentestsystem.authoring.testauth.domain.search.SegmentSearchRequest;
import org.opentestsystem.authoring.testauth.persistence.ItemSelectionAlgorithmRepository;
import org.opentestsystem.authoring.testauth.persistence.SegmentRepository;
import org.opentestsystem.authoring.testauth.service.ItemSelectionAlgorithmService;
import org.opentestsystem.authoring.testauth.validation.ItemSelectionAlgorithmValidator;
import org.opentestsystem.authoring.testauth.validation.ValidationHelper;
import org.opentestsystem.shared.exception.LocalizedException;
import org.opentestsystem.shared.exception.RestException;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DuplicateKeyException;
import org.springframework.stereotype.Service;
import org.springframework.validation.BeanPropertyBindingResult;
import org.springframework.validation.BindingResult;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Maps;

@Service
public class ItemSelectionAlgorithmServiceImpl implements ItemSelectionAlgorithmService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ItemSelectionAlgorithmServiceImpl.class);
    private static final String TYPE_KEY = "itemSelectionAlgorithmType";

    @Autowired
    private transient ItemSelectionAlgorithmRepository itemSelectionAlgorithmRepository;

    @Autowired
    private transient ItemSelectionAlgorithmValidator itemSelectionAlgorithmValidator;

    @Autowired
    private transient SegmentRepository segmentRepository;

    @Override
    public ItemSelectionAlgorithm createItemSelectionAlgorithm(final ItemSelectionAlgorithm itemSelectionAlgorithm) {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("Saving itemSelectionAlgorithm");
        }
        if (itemSelectionAlgorithm == null || StringUtils.isNotEmpty(itemSelectionAlgorithm.getId())) {
            throw new LocalizedException("itemSelectionAlgorithm.invalid.id");
        }

        validateItemSelectionAlgorithm(itemSelectionAlgorithm);

        ItemSelectionAlgorithm savedItemSelectionAlgorithm = null;
        try {
            savedItemSelectionAlgorithm = this.itemSelectionAlgorithmRepository.save(itemSelectionAlgorithm);
        } catch (final DuplicateKeyException dke) {
            throw new LocalizedException("itemSelectionAlgorithm.already.exists", new String[] { itemSelectionAlgorithm.getName(), itemSelectionAlgorithm.getVersion() }, dke);
        }
        return savedItemSelectionAlgorithm;
    }

    @Override
    public ItemSelectionAlgorithm updateItemSelectionAlgorithm(final ItemSelectionAlgorithm itemSelectionAlgorithm) {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("Updating itemSelectionAlgorithm");
        }
        if (itemSelectionAlgorithm == null || StringUtils.isEmpty(itemSelectionAlgorithm.getId())) {
            throw new LocalizedException("itemSelectionAlgorithm.invalid.id");
        }

        if (isItemSelectionAlgorithmInUse(itemSelectionAlgorithm.getId())) {
            throw new LocalizedException("itemSelectionAlgorithm.cannot.be.altered");
        }
        validateItemSelectionAlgorithm(itemSelectionAlgorithm);

        ItemSelectionAlgorithm savedItemSelectionAlgorithm = null;
        try {
            savedItemSelectionAlgorithm = this.itemSelectionAlgorithmRepository.save(itemSelectionAlgorithm);
        } catch (final DuplicateKeyException dke) {
            throw new LocalizedException("itemSelectionAlgorithm.already.exists", new String[] { itemSelectionAlgorithm.getName(), itemSelectionAlgorithm.getVersion() }, dke);
        }
        return savedItemSelectionAlgorithm;
    }

    @Override
    public ItemSelectionAlgorithm getItemSelectionAlgorithm(final String itemSelectionAlgorithmId) {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("Finding itemSelectionAlgorithm for Id: " + itemSelectionAlgorithmId);
        }
        final ItemSelectionAlgorithm itemSelectionAlgorithm = this.itemSelectionAlgorithmRepository.findOne(itemSelectionAlgorithmId);
        if (itemSelectionAlgorithm != null) {
            itemSelectionAlgorithm.setCanEdit(!isItemSelectionAlgorithmInUse(itemSelectionAlgorithmId));
        }
        return itemSelectionAlgorithm;
    }

    @Override
    public void removeItemSelectionAlgorithm(final String itemSelectionAlgorithmId) {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("Removing itemSelectionAlgorithm with Id:" + itemSelectionAlgorithmId);
        }
        if (isItemSelectionAlgorithmInUse(itemSelectionAlgorithmId)) {
            throw new LocalizedException("itemSelectionAlgorithm.cannot.be.altered");
        }
        this.itemSelectionAlgorithmRepository.delete(itemSelectionAlgorithmId);
    }

    @Override
    public SearchResponse<ItemSelectionAlgorithm> searchItemSelectionAlgorithms(final Map<String, String[]> parameterMap) {
        final Map<String, String[]> paramMap = reviseMapParams(parameterMap);
        final ItemSelectionAlgorithmSearchRequest searchRequest = new ItemSelectionAlgorithmSearchRequest(paramMap);
        if (searchRequest.isValid()) {
            return this.itemSelectionAlgorithmRepository.search(searchRequest);
        }
        throw new RestException("itemSelectionAlgorithm.search.invalidSearchCriteria");
    }

    // compensate for opting to use @JsonValue in enum for pretty dropdown choices
    private Map<String, String[]> reviseMapParams(final Map<String, String[]> parameterMap) {
        final Map<String, String[]> paramMap = Maps.newHashMap(parameterMap);
        if (paramMap.containsKey(TYPE_KEY) && paramMap.get(TYPE_KEY)[0] != null) {
            final ItemSelectionAlgorithmType itemSelectionAlgorithmType = ItemSelectionAlgorithmType.fromTitle(paramMap.get(TYPE_KEY)[0]);
            if (itemSelectionAlgorithmType != null) {
                paramMap.put(TYPE_KEY, paramArray(itemSelectionAlgorithmType.name()));
            } else {
                paramMap.remove(TYPE_KEY);
            }
        }
        return paramMap;
    }

    private void validateItemSelectionAlgorithm(final ItemSelectionAlgorithm itemSelectionAlgorithm) {
        final BindingResult bindingResult = new BeanPropertyBindingResult(itemSelectionAlgorithm, "itemSelectionAlgorithm");
        this.itemSelectionAlgorithmValidator.validate(itemSelectionAlgorithm, bindingResult);
        if (bindingResult.hasErrors()) {
            throw ValidationHelper.convertErrorsToConstraintException(itemSelectionAlgorithm, bindingResult);
        }
    }

    @Override
    public void checkItemSelectionAlgorithmInUse(final List<ItemSelectionAlgorithm> itemSelectionAlgorithmList) {
        for (final ItemSelectionAlgorithm itemSelectionAlgorithm : itemSelectionAlgorithmList) {
            itemSelectionAlgorithm.setCanEdit(!isItemSelectionAlgorithmInUse(itemSelectionAlgorithm.getId()));
        }
    }

    private boolean isItemSelectionAlgorithmInUse(final String itemSelectionAlgorithmId) {
        final SegmentSearchRequest searchRequest = new SegmentSearchRequest(ImmutableMap.of("itemSelectionAlgorithmId", new String[] { itemSelectionAlgorithmId }));
        return this.segmentRepository.search(searchRequest).getReturnCount() > 0;
    }
}
