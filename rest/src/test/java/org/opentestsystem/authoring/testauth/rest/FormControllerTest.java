/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.rest;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;

import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.Assessment;
import org.opentestsystem.authoring.testauth.domain.DomainFactory;
import org.opentestsystem.authoring.testauth.domain.Form;
import org.opentestsystem.authoring.testauth.domain.Publication;
import org.opentestsystem.authoring.testauth.domain.Subject;
import org.opentestsystem.authoring.testauth.service.AssessmentService;
import org.opentestsystem.authoring.testauth.service.PublicationService;
import org.opentestsystem.authoring.testauth.service.SubjectService;
import org.opentestsystem.shared.docs.annotation.ApiDocExample;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.Maps;

public class FormControllerTest extends AbstractRestEmbeddedMongoTest {

    private static final String BASE_URL = "/form";

    @Autowired
    private PublicationService publicationService;

    @Autowired
    private SubjectService subjectService;

    @Autowired
    private AssessmentService assessmentService;

    private Assessment savedAssessment;

    @ApiDocExample(rank = -1)
    @Before
    public void setupTestData() {
        final Subject savedSubject = this.subjectService.saveSubject(DomainFactory.manufactureValidSubject("eng"));
        final Publication savedPublication = this.publicationService.savePublication(PODAM_FACTORY.manufacturePojo(Publication.class));
        this.savedAssessment = this.assessmentService.saveAssessment(DomainFactory.manufactureValidAssessment(savedSubject, savedPublication));
    }

    @ApiDocExample(rank = 1)
    @Test
    public void saveForm() throws InterruptedException {
        final Form savedForm = callPOSTRestService(BASE_URL, buildParamObject(buildFormMap(1)), Form.class);
        final Form retrievedForm = this.mongoTemplate.findById(savedForm.getId(), Form.class);

        assertThat(retrievedForm, is(notNullValue()));
        assertThat(retrievedForm.getLanguage(), is(equalTo(savedForm.getLanguage())));
    }

    @ApiDocExample(rank = 2)
    @Test
    public void updateForm() throws InterruptedException {
        final Form savedForm = callPOSTRestService(BASE_URL, buildParamObject(buildFormMap(1)), Form.class);
        assertThat(savedForm, is(notNullValue()));

        savedForm.setLanguage("dak");
        final Form updatedForm = callPUTRestService(BASE_URL + "/" + savedForm.getId(), buildParamObject(savedForm), Form.class);

        assertThat(updatedForm, is(notNullValue()));
        assertThat(updatedForm.getLanguage(), is(equalTo("dak")));
    }

    @ApiDocExample(rank = 3)
    @Test
    public void testRemoveForm() throws InterruptedException {
        final Form savedForm1 = callPOSTRestService(BASE_URL, buildParamObject(buildFormMap(1)), Form.class);
        final Form savedForm2 = callPOSTRestService(BASE_URL, buildParamObject(buildFormMap(2)), Form.class);
        assertThat(this.mongoTemplate.findAll(Form.class).size(), is(equalTo(2)));

        callDeleteRestService(BASE_URL + "/" + savedForm2.getId());

        final Form fetchedForm1 = callGETRestService(BASE_URL + "/" + savedForm1.getId(), Form.class);
        assertThat(fetchedForm1, is(notNullValue()));

        final Form fetchedForm2 = callGETRestService(BASE_URL + "/" + savedForm2.getId(), Form.class);
        assertThat(fetchedForm2, is(nullValue()));
    }

    @ApiDocExample(rank = 4)
    @Test
    public void findForm() throws InterruptedException {
        final Form savedForm1 = callPOSTRestService(BASE_URL, buildParamObject(buildFormMap(1)), Form.class);

        final Form fetchedForm = callGETRestService(BASE_URL + "/" + savedForm1.getId(), Form.class);
        assertThat(fetchedForm, is(notNullValue()));
    }

    @ApiDocExample(rank = 5)
    @SuppressWarnings("unchecked")
    @Test
    public void findForms() throws InterruptedException {
        callPOSTRestService(BASE_URL, buildParamObject(buildFormMap(1)), Form.class);

        final SearchResponse<Form> response = callGETRestService(BASE_URL, SearchResponse.class);
        assertThat(response.getSearchResults().size(), is(1));
    }

    @ApiDocExample(rank = -1)
    @SuppressWarnings("unchecked")
    @Test
    public void searchForms() {
        for (int i = 0; i < 10; i++) {
            callPOSTRestService(BASE_URL, buildFormMap(i), Form.class);
        }
        final List<Form> savedForms = this.mongoTemplate.findAll(Form.class);
        assertThat(savedForms.size(), is(10));

        final Map<String, String> params = Maps.newHashMap();
        params.put("assessmentId", this.savedAssessment.getId());

        SearchResponse<Form> response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getSearchResults().size(), is(10));

        params.clear();
        params.put("assessmentId", "invalid-assessment");
        response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getSearchResults().size(), is(0));

        params.clear();
        params.put("assessmentId", this.savedAssessment.getId());
        params.put("name", "invalid-name");
        response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getSearchResults().size(), is(0));

        params.clear();
        params.put("assessmentId", this.savedAssessment.getId());
        params.put("name", savedForms.get(0).getName());
        response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getSearchResults().size(), is(1));

        params.clear();
        response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getReturnCount(), is(10));
        assertThat(response.getSearchResults().size(), is(10));
    }

    private Map<String, Object> buildFormMap(final int indx) {
        final Form form = DomainFactory.manufactureValidForm(this.savedAssessment.getId());
        form.setName("form-" + indx);
        return buildParamObject(form);
    }
}
