/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.rest;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.mockito.Matchers.anyMap;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import org.opentestsystem.authoring.testitembank.client.TestItemBankClientInterface;
import org.opentestsystem.authoring.testitembank.client.TibItemMetadata;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;

public class TibItemControllerTest extends AbstractRestEmbeddedMongoTest {

    private static final String RESPONSE_LIST = "{\"items\": [{\"identifier\":\"SQA001\", \"url\":\"item/apipitem_SQA001\"}, {\"identifier\":\"SQA643\", \"url\":\"item/apipitem_SQA643\"}] }";
    private static final String FILTERED_RESPONSE_LIST = "{\"items\": [{\"identifier\":\"SQA001\", \"url\":\"item/apipitem_SQA001\"}] }";
    private TibItemMetadata metadataResponse;

    @Autowired
    private TestItemBankClientInterface tibClient;

    @Before
    public void setup() {
        metadataResponse = new TibItemMetadata();
        metadataResponse.setId("mongoId");
        metadataResponse.setTenantId("tenant-id");
        metadataResponse.setMetadataKeys(ImmutableSet.of("meta1", "meta2"));

        Mockito.reset(tibClient);
    }

    @SuppressWarnings("unchecked")
    @Test
    public void getAllItems() {
        final String paramsQueryString = "?tenantId=5";
        when(this.tibClient.getItems(anyMap())).thenReturn(RESPONSE_LIST);

        final Map<String, List<Map<String, String>>> itemList = callGETRestService("/tibitem" + paramsQueryString, Map.class);
        final List<Map<String, String>> items = itemList.get("items");
        // verify(this.tibClient).getItems(params);

        assertThat(items.get(0).get("identifier"), equalTo("SQA001"));
        assertThat(items.get(1).get("identifier"), equalTo("SQA643"));
        assertThat(items.size(), equalTo(2));
    }

    @Test
    @SuppressWarnings("unchecked")
    public void getFilteredItems() {
        // final Map<String, String[]> params = ImmutableMap.of("identifier", new String[] { "SQA00" });
        final String paramsQueryString = "?identifier=SQA00&tenantId=4";
        when(this.tibClient.getItems(anyMap())).thenReturn(FILTERED_RESPONSE_LIST);

        final Map<String, List<Map<String, String>>> itemList = callGETRestService("/tibitem" + paramsQueryString, Map.class);
        final List<Map<String, String>> items = itemList.get("items");
        // verify(this.tibClient).getItems(anyMap());

        assertThat(items.get(0).get("identifier"), equalTo("SQA001"));
        assertThat(items.size(), equalTo(1));
    }

    @Test
    public void getItemMetadataByTenant() {
        when(this.tibClient.getItemMetadataByTenantId("tenant-id")).thenReturn(this.metadataResponse);
        final TibItemMetadata response = callGETRestService("/tibitemMetadata?tenantId=tenant-id", TibItemMetadata.class);
        verify(this.tibClient).getItemMetadataByTenantId("tenant-id");

        assertThat(response.getMetadataKeys().contains("meta1"), is(true));
    }

}
