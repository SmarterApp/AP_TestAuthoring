/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.validation;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.ComputationRuleMultiplicityType;
import org.opentestsystem.authoring.testauth.domain.ComputationRuleParameter;
import org.opentestsystem.authoring.testauth.domain.ComputationRuleType;
import org.opentestsystem.authoring.testauth.domain.DictionaryIndexType;
import org.springframework.validation.BeanPropertyBindingResult;
import org.springframework.validation.Errors;

public class ComputationRuleParameterValidatorTest {

    private final ComputationRuleParameterValidator validator = new ComputationRuleParameterValidator();
    private ComputationRuleParameter paramScalar;
    private ComputationRuleParameter paramDict;
    private Errors errorsScalar;
    private Errors errorsDict;

    @Before
    public void setup() {
        this.paramScalar = new ComputationRuleParameter();
        this.paramScalar.setComputationRuleMultiplicityType(ComputationRuleMultiplicityType.SCALAR);
        this.paramDict = new ComputationRuleParameter();
        this.paramDict.setComputationRuleMultiplicityType(ComputationRuleMultiplicityType.DICTIONARY);
        this.errorsScalar = new BeanPropertyBindingResult(this.paramScalar, "");
        this.errorsDict = new BeanPropertyBindingResult(this.paramDict, "");
    }

    @Test
    public void testFloatNumericDefault() {
        this.paramScalar.setComputationRuleType(ComputationRuleType.FLOAT);
        this.paramScalar.setDefaultValue("1.0");
        this.validator.validate(this.paramScalar, this.errorsScalar);
        assertFalse(this.errorsScalar.hasErrors());
    }

    @Test
    public void testFloatNonNumericDefault() {
        this.paramScalar.setComputationRuleType(ComputationRuleType.FLOAT);
        this.paramScalar.setDefaultValue("X");
        this.validator.validate(this.paramScalar, this.errorsScalar);
        assertTrue(this.errorsScalar.hasErrors());
    }

    @Test
    public void testFloatNumericMinumum() {
        this.paramScalar.setComputationRuleType(ComputationRuleType.FLOAT);
        this.paramScalar.setMinimumValue("1.0");
        this.validator.validate(this.paramScalar, this.errorsScalar);
        assertFalse(this.errorsScalar.hasErrors());
    }

    @Test
    public void testFloatNonNumericMinimum() {
        this.paramScalar.setComputationRuleType(ComputationRuleType.FLOAT);
        this.paramScalar.setMinimumValue("X");
        this.validator.validate(this.paramScalar, this.errorsScalar);
        assertTrue(this.errorsScalar.hasErrors());
    }

    @Test
    public void testFloatNumericMaxumum() {
        this.paramScalar.setComputationRuleType(ComputationRuleType.FLOAT);
        this.paramScalar.setMaximumValue("1.0");
        this.validator.validate(this.paramScalar, this.errorsScalar);
        assertFalse(this.errorsScalar.hasErrors());
    }

    @Test
    public void testFloatNonNumericMaximum() {
        this.paramScalar.setComputationRuleType(ComputationRuleType.FLOAT);
        this.paramScalar.setMaximumValue("X");
        this.validator.validate(this.paramScalar, this.errorsScalar);
        assertTrue(this.errorsScalar.hasErrors());
    }

    // //////////////////////////////////////////////////////////////////////////////

    @Test
    public void testFloatMin_LT_Max() {
        this.paramScalar.setComputationRuleType(ComputationRuleType.FLOAT);
        this.paramScalar.setMinimumValue("0.0");
        this.paramScalar.setMaximumValue("1.0");
        this.validator.validate(this.paramScalar, this.errorsScalar);
        assertFalse(this.errorsScalar.hasErrors());
    }

    @Test
    public void testFloatMin_EQ_Max() {
        this.paramScalar.setComputationRuleType(ComputationRuleType.FLOAT);
        this.paramScalar.setMinimumValue("1.0");
        this.paramScalar.setMaximumValue("1.0");
        this.validator.validate(this.paramScalar, this.errorsScalar);
        assertTrue(this.errorsScalar.hasErrors());
    }

    @Test
    public void testFloatMin_GT_Max() {
        this.paramScalar.setComputationRuleType(ComputationRuleType.FLOAT);
        this.paramScalar.setMinimumValue("2.0");
        this.paramScalar.setMaximumValue("1.0");
        this.validator.validate(this.paramScalar, this.errorsScalar);
        assertTrue(this.errorsScalar.hasErrors());
    }

    @Test
    public void testFloatMin_LT_Default_LT_Max() {
        this.paramScalar.setComputationRuleType(ComputationRuleType.FLOAT);
        this.paramScalar.setMinimumValue("0.0");
        this.paramScalar.setMaximumValue("1.0");
        this.paramScalar.setDefaultValue("0.5");
        this.validator.validate(this.paramScalar, this.errorsScalar);
        assertFalse(this.errorsScalar.hasErrors());
    }

    @Test
    public void testFloatMin_GT_Default_LT_Max() {
        this.paramScalar.setComputationRuleType(ComputationRuleType.FLOAT);
        this.paramScalar.setMinimumValue("10.0");
        this.paramScalar.setMaximumValue("1.0");
        this.paramScalar.setDefaultValue("0.5");
        this.validator.validate(this.paramScalar, this.errorsScalar);
        assertTrue(this.errorsScalar.hasErrors());
    }

    @Test
    public void testFloatMin_GT_Default_GT_Max() {
        this.paramScalar.setComputationRuleType(ComputationRuleType.FLOAT);
        this.paramScalar.setMinimumValue("10.0");
        this.paramScalar.setMaximumValue("1.0");
        this.paramScalar.setDefaultValue("5.0");
        this.validator.validate(this.paramScalar, this.errorsScalar);
        assertTrue(this.errorsScalar.hasErrors());
    }

    @Test
    public void testFloatMin_LT_Default_GT_Max() {
        this.paramScalar.setComputationRuleType(ComputationRuleType.FLOAT);
        this.paramScalar.setMinimumValue("1.0");
        this.paramScalar.setMaximumValue("2.0");
        this.paramScalar.setDefaultValue("5.0");
        this.validator.validate(this.paramScalar, this.errorsScalar);
        assertTrue(this.errorsScalar.hasErrors());
    }

    @Test
    public void testFloatDefault_LT_Max() {
        this.paramScalar.setComputationRuleType(ComputationRuleType.FLOAT);
        this.paramScalar.setMaximumValue("2.0");
        this.paramScalar.setDefaultValue("1.0");
        this.validator.validate(this.paramScalar, this.errorsScalar);
        assertFalse(this.errorsScalar.hasErrors());
    }

    @Test
    public void testFloatDefault_GT_Max() {
        this.paramScalar.setComputationRuleType(ComputationRuleType.FLOAT);
        this.paramScalar.setMaximumValue("2.0");
        this.paramScalar.setDefaultValue("5.0");
        this.validator.validate(this.paramScalar, this.errorsScalar);
        assertTrue(this.errorsScalar.hasErrors());
    }

    @Test
    public void testFloatDefault_LT_Min() {
        this.paramScalar.setComputationRuleType(ComputationRuleType.FLOAT);
        this.paramScalar.setMinimumValue("2.0");
        this.paramScalar.setDefaultValue("1.0");
        this.validator.validate(this.paramScalar, this.errorsScalar);
        assertTrue(this.errorsScalar.hasErrors());
    }

    @Test
    public void testFloatDefault_GT_Min() {
        this.paramScalar.setComputationRuleType(ComputationRuleType.FLOAT);
        this.paramScalar.setMinimumValue("2.0");
        this.paramScalar.setDefaultValue("5.0");
        this.validator.validate(this.paramScalar, this.errorsScalar);
        assertFalse(this.errorsScalar.hasErrors());
    }

    // //////////////////////////////////////////////////////////////////////////////

    @Test
    public void testIntegerMin_LT_Max() {
        this.paramScalar.setComputationRuleType(ComputationRuleType.INTEGER);
        this.paramScalar.setMinimumValue("0");
        this.paramScalar.setMaximumValue("1");
        this.validator.validate(this.paramScalar, this.errorsScalar);
        assertFalse(this.errorsScalar.hasErrors());
    }

    @Test
    public void testIntegerMin_EQ_Max() {
        this.paramScalar.setComputationRuleType(ComputationRuleType.INTEGER);
        this.paramScalar.setMinimumValue("1");
        this.paramScalar.setMaximumValue("1");
        this.validator.validate(this.paramScalar, this.errorsScalar);
        assertTrue(this.errorsScalar.hasErrors());
    }

    @Test
    public void testIntegerMin_GT_Max() {
        this.paramScalar.setComputationRuleType(ComputationRuleType.INTEGER);
        this.paramScalar.setMinimumValue("2");
        this.paramScalar.setMaximumValue("1");
        this.validator.validate(this.paramScalar, this.errorsScalar);
        assertTrue(this.errorsScalar.hasErrors());
    }

    @Test
    public void testIntegerMin_LT_Default_LT_Max() {
        this.paramScalar.setComputationRuleType(ComputationRuleType.INTEGER);
        this.paramScalar.setMinimumValue("0");
        this.paramScalar.setDefaultValue("1");
        this.paramScalar.setMaximumValue("2");
        this.validator.validate(this.paramScalar, this.errorsScalar);
        assertFalse(this.errorsScalar.hasErrors());
    }

    @Test
    public void testIntegerMin_GT_Default_LT_Max() {
        this.paramScalar.setComputationRuleType(ComputationRuleType.INTEGER);
        this.paramScalar.setMinimumValue("10");
        this.paramScalar.setDefaultValue("1");
        this.paramScalar.setMaximumValue("2");
        this.validator.validate(this.paramScalar, this.errorsScalar);
        assertTrue(this.errorsScalar.hasErrors());
    }

    @Test
    public void testIntegerMin_GT_Default_GT_Max() {
        this.paramScalar.setComputationRuleType(ComputationRuleType.INTEGER);
        this.paramScalar.setMinimumValue("10");
        this.paramScalar.setDefaultValue("5");
        this.paramScalar.setMaximumValue("1");
        this.validator.validate(this.paramScalar, this.errorsScalar);
        assertTrue(this.errorsScalar.hasErrors());
    }

    @Test
    public void testIntegerMin_LT_Default_GT_Max() {
        this.paramScalar.setComputationRuleType(ComputationRuleType.INTEGER);
        this.paramScalar.setMinimumValue("1");
        this.paramScalar.setDefaultValue("5");
        this.paramScalar.setMaximumValue("2");
        this.validator.validate(this.paramScalar, this.errorsScalar);
        assertTrue(this.errorsScalar.hasErrors());
    }

    @Test
    public void testIntegerDefault_LT_Max() {
        this.paramScalar.setComputationRuleType(ComputationRuleType.INTEGER);
        this.paramScalar.setDefaultValue("1");
        this.paramScalar.setMaximumValue("2");
        this.validator.validate(this.paramScalar, this.errorsScalar);
        assertFalse(this.errorsScalar.hasErrors());
    }

    @Test
    public void testIntegerDefault_GT_Max() {
        this.paramScalar.setComputationRuleType(ComputationRuleType.INTEGER);
        this.paramScalar.setDefaultValue("5");
        this.paramScalar.setMaximumValue("2");
        this.validator.validate(this.paramScalar, this.errorsScalar);
        assertTrue(this.errorsScalar.hasErrors());
    }

    @Test
    public void testIntegerDefault_LT_Min() {
        this.paramScalar.setComputationRuleType(ComputationRuleType.INTEGER);
        this.paramScalar.setMinimumValue("2");
        this.paramScalar.setDefaultValue("1");
        this.validator.validate(this.paramScalar, this.errorsScalar);
        assertTrue(this.errorsScalar.hasErrors());
    }

    @Test
    public void testIntegerDefault_GT_Min() {
        this.paramScalar.setComputationRuleType(ComputationRuleType.INTEGER);
        this.paramScalar.setMinimumValue("2");
        this.paramScalar.setDefaultValue("5");
        this.validator.validate(this.paramScalar, this.errorsScalar);
        assertFalse(this.errorsScalar.hasErrors());
    }

    // //////////////////////////////////////////////////////////////////////////////
    @Test
    public void testIntegerNumericDefault() {
        this.paramScalar.setComputationRuleType(ComputationRuleType.INTEGER);
        this.paramScalar.setDefaultValue("10");
        this.validator.validate(this.paramScalar, this.errorsScalar);
        assertFalse(this.errorsScalar.hasErrors());
    }

    @Test
    public void testIntegerNonNumericDefault() {
        this.paramScalar.setComputationRuleType(ComputationRuleType.INTEGER);
        this.paramScalar.setDefaultValue("X");
        this.validator.validate(this.paramScalar, this.errorsScalar);
        assertTrue(this.errorsScalar.hasErrors());
    }

    @Test
    public void testIntegerNumericMinumum() {
        this.paramScalar.setComputationRuleType(ComputationRuleType.INTEGER);
        this.paramScalar.setMinimumValue("10");
        this.validator.validate(this.paramScalar, this.errorsScalar);
        assertFalse(this.errorsScalar.hasErrors());
    }

    @Test
    public void testIntegerNonNumericMinimum() {
        this.paramScalar.setComputationRuleType(ComputationRuleType.INTEGER);
        this.paramScalar.setMinimumValue("X");
        this.validator.validate(this.paramScalar, this.errorsScalar);
        assertTrue(this.errorsScalar.hasErrors());
    }

    @Test
    public void testIntegerNumericMaxumum() {
        this.paramScalar.setComputationRuleType(ComputationRuleType.INTEGER);
        this.paramScalar.setMaximumValue("10");
        this.validator.validate(this.paramScalar, this.errorsScalar);
        assertFalse(this.errorsScalar.hasErrors());
    }

    @Test
    public void testIntegerNonNumericMaximum() {
        this.paramScalar.setComputationRuleType(ComputationRuleType.INTEGER);
        this.paramScalar.setMaximumValue("X");
        this.validator.validate(this.paramScalar, this.errorsScalar);
        assertTrue(this.errorsScalar.hasErrors());
    }

    // //////////////////////////////////////////////////////////////////////////////
    @Test
    public void testDictionaryIndexTypeEmpty() {
        this.paramDict.setComputationRuleType(ComputationRuleType.STRING);
        this.paramDict.setDictionaryIndexType(null);
        this.validator.validate(this.paramDict, this.errorsDict);
        assertTrue(this.errorsDict.hasErrors());
    }

    @Test
    public void testDictionaryIndexTypeString() {
        this.paramDict.setComputationRuleType(ComputationRuleType.STRING);
        this.paramDict.setDictionaryIndexType(DictionaryIndexType.STRING);
        this.validator.validate(this.paramDict, this.errorsDict);
        assertFalse(this.errorsDict.hasErrors());
    }

    @Test
    public void testScalarIndexTypeEmpty() {
        this.paramScalar.setComputationRuleType(ComputationRuleType.STRING);
        this.validator.validate(this.paramScalar, this.errorsScalar);
        assertFalse(this.errorsScalar.hasErrors());
    }

    @Test
    public void testScalarIndexTypeString() {
        this.paramScalar.setComputationRuleType(ComputationRuleType.STRING);
        this.paramScalar.setDictionaryIndexType(DictionaryIndexType.STRING);
        this.validator.validate(this.paramScalar, this.errorsScalar);
        assertTrue(this.errorsScalar.hasErrors());
    }

    // //////////////////////////////////////////////////////////////////////////////
    @Test
    public void testStringNormal() {
        this.paramScalar.setComputationRuleType(ComputationRuleType.STRING);
        this.paramScalar.setDefaultValue("XYZ");
        this.validator.validate(this.paramScalar, this.errorsScalar);
        assertFalse(this.errorsScalar.hasErrors());
    }

    @Test
    public void testStringTooLong() {
        this.paramScalar.setComputationRuleType(ComputationRuleType.STRING);
        this.paramScalar.setDefaultValue("123456789012345678901234567890123456789012345678901234567890X");
        this.validator.validate(this.paramScalar, this.errorsScalar);
        assertTrue(this.errorsScalar.hasErrors());
    }

    @Test
    public void testStringHasMiniumum() {
        this.paramScalar.setComputationRuleType(ComputationRuleType.STRING);
        this.paramScalar.setDefaultValue("X");
        this.paramScalar.setMinimumValue("Y");
        this.validator.validate(this.paramScalar, this.errorsScalar);
        assertTrue(this.errorsScalar.hasErrors());
    }

    @Test
    public void testStringHasMaxiumum() {
        this.paramScalar.setComputationRuleType(ComputationRuleType.STRING);
        this.paramScalar.setDefaultValue("X");
        this.paramScalar.setMaximumValue("Y");
        this.validator.validate(this.paramScalar, this.errorsScalar);
        assertTrue(this.errorsScalar.hasErrors());
    }

}
