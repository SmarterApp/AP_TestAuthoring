/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.rest;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.opentestsystem.authoring.testauth.domain.Enemy;
import org.opentestsystem.authoring.testauth.domain.EnemyType;
import org.opentestsystem.authoring.testauth.service.EnemyService;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.opentestsystem.shared.web.AbstractRestController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.access.annotation.Secured;
import org.springframework.security.access.prepost.PostAuthorize;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import com.google.common.collect.Lists;

/**
 * Used to retrieve enemy info
 */
@Controller
public class EnemyController extends AbstractRestController {

    @Autowired
    private EnemyService enemyService;

    /**
     * Gets enemy by enemyId.
     * 
     * @param enemy id.
     * @return enemy object.
     */
    @RequestMapping(value = "/enemy/{enemyId}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Test Read" })
    @PostAuthorize("hasPermission(returnObject, 'ROLE_Test Read')")
    @ResponseBody
    public Enemy findEnemiesById(@PathVariable final String enemyId) {
        return this.enemyService.getEnemy(enemyId);
    }

    /**
     * Creates enemy.
     * 
     * @param enemy to be saved.
     * @param response HttpServletResponse.
     * @return enemy newly created enemy object.
     */
    @ResponseStatus(HttpStatus.CREATED)
    @RequestMapping(value = "/enemy", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Test Modify" })
    @PreAuthorize("hasPermission(#enemy, 'ROLE_Test Modify')")
    @ResponseBody
    public Enemy saveEnemy(@RequestBody @Valid final Enemy enemy, final HttpServletResponse response) {
        return this.enemyService.saveEnemy(null, enemy);
    }

    /**
     * Updates enemy.
     * 
     * @param enemy to be saved.
     * @param response HttpServletResponse.
     * @return enemy updated enemy object.
     */
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "/enemy/{enemyId}", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Test Modify" })
    @PreAuthorize("hasPermission(#enemy, 'ROLE_Test Modify')")
    @ResponseBody
    public Enemy updateEnemy(@PathVariable final String enemyId, @RequestBody @Valid final Enemy enemy, final HttpServletResponse response) {
        return this.enemyService.saveEnemy(enemyId, enemy);
    }

    /**
     * Removes enemy.
     * 
     * @param enemyId - id of the enemy to remove.
     */
    @RequestMapping(value = "/enemy/{enemyId}", method = RequestMethod.DELETE)
    @Secured({ "ROLE_Test Modify" })
    @PreAuthorize("hasPermission(#enemyId, 'enemy', 'ROLE_Test Modify')")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    public void removeEnemyById(@PathVariable final String enemyId) {
        this.enemyService.removeEnemy(enemyId);
    }

    @RequestMapping(value = "/enemy", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Test Read" })
    @PostAuthorize("hasPermission(returnObject, 'ROLE_Test Read')")
    @ResponseBody
    public SearchResponse<Enemy> searchEnemy(final HttpServletRequest request, final HttpServletResponse response) {
        return this.enemyService.searchEnemies(request.getParameterMap());
    }

    @RequestMapping(value = "/enemy/enemyTypes", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
    @Secured({ "ROLE_Test Read" })
    //NOTE Intentionally no @Preauthorize; enemy types are not tenanted
    @ResponseBody
    public List<EnemyType> getEnemyTypes() {
        return Lists.newArrayList(EnemyType.values());
    }
}
