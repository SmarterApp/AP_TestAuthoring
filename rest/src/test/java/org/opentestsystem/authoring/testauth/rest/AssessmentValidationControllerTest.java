/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.rest;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.MatcherAssert.assertThat;

import java.util.ArrayList;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.AdaptiveItemLocation;
import org.opentestsystem.authoring.testauth.domain.Assessment;
import org.opentestsystem.authoring.testauth.domain.BlueprintElement;
import org.opentestsystem.authoring.testauth.domain.DomainFactory;
import org.opentestsystem.authoring.testauth.domain.Form;
import org.opentestsystem.authoring.testauth.domain.Item;
import org.opentestsystem.authoring.testauth.domain.ItemLocation;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionAlgorithm;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionAlgorithmType;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionPurpose;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionType;
import org.opentestsystem.authoring.testauth.domain.Publication;
import org.opentestsystem.authoring.testauth.domain.Segment;
import org.opentestsystem.authoring.testauth.domain.Subject;
import org.opentestsystem.authoring.testauth.domain.ValidationResult;
import org.opentestsystem.authoring.testauth.persistence.SegmentRepository;
import org.opentestsystem.authoring.testauth.service.AffinityGroupService;
import org.opentestsystem.authoring.testauth.service.AssessmentService;
import org.opentestsystem.authoring.testauth.service.BlueprintElementService;
import org.opentestsystem.authoring.testauth.service.FormPartitionService;
import org.opentestsystem.authoring.testauth.service.FormService;
import org.opentestsystem.authoring.testauth.service.ItemSelectionAlgorithmService;
import org.opentestsystem.authoring.testauth.service.ItemService;
import org.opentestsystem.authoring.testauth.service.PublicationService;
import org.opentestsystem.authoring.testauth.service.SegmentService;
import org.opentestsystem.authoring.testauth.service.SubjectService;
import org.opentestsystem.shared.docs.annotation.ApiDocExample;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.ImmutableSet;

public class AssessmentValidationControllerTest extends AbstractRestEmbeddedMongoTest {

    private static final String BASE_URL = "/assessment";

    private Assessment savedAssessment;
    private Segment savedFixedSegment, savedFieldTestSegment;
    private ItemSelectionAlgorithm savedFixedAlgorithm, savedFieldTestAlgorithm;

    @Autowired
    private PublicationService publicationService;

    @Autowired
    private SubjectService subjectService;

    @Autowired
    private SegmentService segmentService;

    @Autowired
    private AssessmentService assessmentService;

    @Autowired
    private ItemSelectionAlgorithmService itemSelectionAlgorithmService;

    @Autowired
    private BlueprintElementService blueprintElementService;

    @Autowired
    private SegmentRepository segmentRepository;

    @Autowired
    private ItemService itemService;

    @Autowired
    private FormService formService;
    @Autowired
    private FormPartitionService formPartitionService;

    @Autowired
    private AffinityGroupService affinityGroupService;

    @ApiDocExample(rank = -1)
    @Before
    public void setupTestData() {
        final Subject savedSubject = this.subjectService.saveSubject(DomainFactory.manufactureValidSubject("abb"));
        final Publication savedPublication = this.publicationService.savePublication(DomainFactory.manufactureValidPublication(savedSubject.getTenantId(), ImmutableSet.of(savedSubject)));
        this.savedAssessment = this.assessmentService.saveAssessment(DomainFactory.manufactureValidAssessment(savedSubject, savedPublication));

        assertThat(this.mongoTemplate.findAll(Assessment.class).size(), is(equalTo(1)));
        assertThat(this.savedAssessment, is(notNullValue()));

        final ItemSelectionAlgorithm algorithm = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.BOOLEAN);
        algorithm.setItemSelectionAlgorithmType(ItemSelectionAlgorithmType.FIXEDFORM);
        this.savedFixedAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithm);

        final ItemSelectionAlgorithm algorithm2 = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.BOOLEAN);
        algorithm2.setItemSelectionAlgorithmType(ItemSelectionAlgorithmType.FIELDTEST);
        this.savedFieldTestAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithm2);

        final Segment segment = DomainFactory.manufactureValidSegment(this.savedAssessment.getId(), this.savedFixedAlgorithm, 1);
        segment.setId("segment1");
        segment.setMinOpItems(1);
        this.savedFixedSegment = this.segmentRepository.save(segment);

        final Segment segment2 = DomainFactory.manufactureValidSegment(this.savedAssessment.getId(), this.savedFieldTestAlgorithm, 2);
        segment2.setId("segment2");
        segment2.setMinOpItems(0);
        segment2.setMaxOpItems(0);
        this.savedFieldTestSegment = this.segmentRepository.save(segment2);
    }

    @ApiDocExample(rank = 1)
    @SuppressWarnings("unchecked")
    @Test
    public void validateBlueprint() throws InterruptedException {
        final List<Segment> segments = segmentService.findSegmentListByAssessmentId(savedAssessment.getId());
        segmentService.loadReferenceData(segments);
        final BlueprintElement blueprintElement = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), segments);
        this.blueprintElementService.saveBlueprintElement(null, blueprintElement);

        final List<ValidationResult<BlueprintElement>> results = callGETRestService(BASE_URL + "/" + this.savedAssessment.getId() + "/validateblueprint", List.class);
        assertThat(results.size(), is(0));
    }

    @ApiDocExample(rank = 2)
    @SuppressWarnings("unchecked")
    @Test
    public void validateForms() throws InterruptedException {
        final Form form1 = this.formService.saveForm(null, DomainFactory.manufactureValidForm(this.savedAssessment.getId()));
        this.formPartitionService.saveFormPartition(null, DomainFactory.manufactureValidFormPartition(this.savedAssessment.getId(), "partition1", form1.getId(), this.savedFixedSegment.getId()));

        final List<ValidationResult<BlueprintElement>> results = callGETRestService(BASE_URL + "/" + this.savedAssessment.getId() + "/validateforms", List.class);
        assertThat(results.size(), is(1));
    }

    @ApiDocExample(rank = 3)
    @SuppressWarnings("unchecked")
    @Test
    public void validateItemPools() throws InterruptedException {
        final Item itemToSave = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        itemToSave.setItemLocation(new ArrayList<ItemLocation>());

        final AdaptiveItemLocation location = new AdaptiveItemLocation();
        location.setSegmentId(this.savedFieldTestSegment.getId());
        location.setItemGroupId(Item.NO_GROUP_KEY);
        location.setFieldTestItem(false);
        itemToSave.getItemLocation().add(location);

        this.itemService.saveItem(itemToSave);

        final List<ValidationResult<Segment>> results = callGETRestService(BASE_URL + "/" + this.savedAssessment.getId() + "/validateitempools", List.class);
        assertThat(results.size(), is(1));
    }

    @ApiDocExample(rank = 4)
    @SuppressWarnings("unchecked")
    @Test
    public void validateAffinityGroups() throws InterruptedException {
        this.affinityGroupService.saveNewAffinityGroup(DomainFactory.manufactureValidAffinityGroup(this.savedAssessment.getId()));

        final List<ValidationResult<BlueprintElement>> results = callGETRestService(BASE_URL + "/" + this.savedAssessment.getId() + "/validateaffinitygroups", List.class);
        assertThat(results.size(), is(0));
    }
}
