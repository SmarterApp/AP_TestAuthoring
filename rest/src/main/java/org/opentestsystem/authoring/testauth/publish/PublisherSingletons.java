/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.publish;

import static org.opentestsystem.authoring.testauth.config.TestAuthUtil.paramArray;

import java.util.Map;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.TransformerFactoryConfigurationError;

import org.eclipse.persistence.jaxb.JAXBContextProperties;
import org.opentestsystem.authoring.testauth.publish.domain.TestSpecification;
import org.opentestsystem.shared.exception.LocalizedException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.xml.ResourceEntityResolver;
import org.springframework.core.io.DefaultResourceLoader;

import com.google.common.collect.ImmutableMap;

public final class PublisherSingletons {
    private static final Logger LOGGER = LoggerFactory.getLogger(PublisherSingletons.class);
    private final String dtdUrl;
    private Marshaller jaxbMarshaller;
    private DocumentBuilder documentBuilder;
    private Transformer documentTransformer;

    public static PublisherSingletons getInstance(final String dtdUrl) {
        return new PublisherSingletons(dtdUrl);
    }

    private PublisherSingletons(final String theDtdUrl) {
        this.dtdUrl = theDtdUrl;

        try {
            final Map<String, Object> properties = ImmutableMap.of(JAXBContextProperties.OXM_METADATA_SOURCE, (Object) "publish-binding-metadata.xml");
            final JAXBContext jaxbContext = JAXBContext.newInstance(new Class[] { TestSpecification.class }, properties);
            this.jaxbMarshaller = jaxbContext.createMarshaller();
            this.jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
        } catch (final JAXBException e) {
            LOGGER.error("cannot initialize JAXB Marshaller", e);
            throw new LocalizedException("publishingRecord.testspec.xml.marshaller", paramArray(e.getMessage()));
        }
        try {
            // XML bytes to be parsed as document source
            this.documentBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
            final ResourceEntityResolver resolver = new ResourceEntityResolver(new DefaultResourceLoader());
            this.documentBuilder.setEntityResolver(resolver);
        } catch (final ParserConfigurationException e) {
            throw new LocalizedException("publishingRecord.testspec.xml.invalid", new String[] { e.getMessage() }, e);
        }
        try {
            // ResourceEntityResolver will attempt to find DTD either in externally hosted location or on the classpath
            this.documentTransformer = TransformerFactory.newInstance().newTransformer();
            // DOCTYPE/path to DTD to be added to XML document during transformation
            this.documentTransformer.setOutputProperty(OutputKeys.DOCTYPE_SYSTEM, this.dtdUrl);
        } catch (final TransformerConfigurationException | TransformerFactoryConfigurationError e) {
            throw new LocalizedException("publishingRecord.testspec.xml.invalid", new String[] { e.getMessage() }, e);
        }
    }

    public Marshaller getJaxbMarshaller() {
        if (this.jaxbMarshaller == null) {
            throw new LocalizedException("publishingRecord.testspec.xml.marshaller", paramArray("marshaller initialization failed"));
        }
        return this.jaxbMarshaller;
    }

    public DocumentBuilder getDocumentBuilder() {
        if (this.documentBuilder == null) {
            throw new LocalizedException("publishingRecord.testspec.xml.validation", paramArray("document builder initialization failed"));
        }
        return this.documentBuilder;
    }

    public Transformer getDocumentTransformer() {
        if (this.documentTransformer == null) {
            throw new LocalizedException("publishingRecord.testspec.xml.validation", paramArray("document transformer initialization failed"));
        }
        return this.documentTransformer;
    }
}
