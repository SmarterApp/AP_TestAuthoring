/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.publish;

import java.util.Collection;
import java.util.List;
import java.util.Map;

import org.joda.time.DateTime;
import org.opentestsystem.authoring.testauth.domain.Assessment;
import org.opentestsystem.authoring.testauth.domain.ScoringRule;
import org.opentestsystem.authoring.testauth.publish.domain.Purpose;
import org.opentestsystem.authoring.testauth.publish.domain.PurposeBaseContent;
import org.opentestsystem.authoring.testauth.publish.domain.Reporting;
import org.opentestsystem.authoring.testauth.publish.domain.ScoringRuleData;
import org.opentestsystem.authoring.testauth.publish.domain.TestComputationRule;
import org.opentestsystem.authoring.testauth.publish.domain.TestSpecification;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;

@Component("reportingPublisherHelper")
public class ReportingPublisherHelper extends BasePublisherHelper implements PublisherHelper {
    private static final Logger LOGGER = LoggerFactory.getLogger(ReportingPublisherHelper.class);

    @Autowired
    @Qualifier("administrationPublisherHelper")
    private PublisherHelper administrationPublisherHelper;

    @Override
    public TestSpecification<Reporting> createTestSpec(final Assessment assessment, final DateTime publishDate, final String version, final Purpose purpose,
            TestSpecification<? extends PurposeBaseContent> seedingTestSpec) {
        final long start = System.currentTimeMillis();
        final long dataRetrieval = System.currentTimeMillis();
        long performanceCreation = System.currentTimeMillis(), reportingCreation = System.currentTimeMillis();
        final TestSpecification<Reporting> testSpec = doGeneralTestSpecificationSetup(assessment, publishDate, version, purpose, Reporting.class);

        final boolean seedIsComplete = seedingTestSpec != null && seedingTestSpec.getComplete() != null;
        boolean seedIsAdmin = seedingTestSpec != null && seedingTestSpec.getAdministration() != null;
        if (seedingTestSpec == null) {
            seedingTestSpec = this.administrationPublisherHelper.createTestSpec(assessment, publishDate, version, purpose, null);
            seedIsAdmin = true;
        }
        final Reporting specContent = seedIsComplete ? new Reporting(seedingTestSpec.getComplete()) : seedIsAdmin ? new Reporting(seedingTestSpec.getAdministration()) : new Reporting();

        if (!seedIsComplete) {
            final String assessmentId = assessment.getId();

            // PERFORMANCE LEVELS
            specContent.setTestPerformanceLevelList(setupPerformanceLevelData(assessmentId, specContent.getBlueprintReferenceMap()));
            performanceCreation = System.currentTimeMillis();

            // REPORTING MEASURES
            final List<ScoringRule> scoringRuleList = retrieveScoringRules(assessmentId);
            final ScoringRuleData scoringRuleData = setupScoringRuleData(assessmentId, specContent.getBlueprintReferenceMap(), scoringRuleList,
                    seedingTestSpec.getAdministration().getBlueprintElementList(), true);
            final Map<String, Collection<TestComputationRule>> scoringRuleReferenceMap = buildScoringRuleReferenceMap(scoringRuleData.getComputationRuleList());
            specContent.setTestReportingMeasureList(setupReportingMeasureData(assessmentId, specContent.getBlueprintReferenceMap(), scoringRuleReferenceMap));
            reportingCreation = System.currentTimeMillis();
        }

        testSpec.setContent(specContent);
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("data retrieval: " + (dataRetrieval - start) + "ms\n" +
                    "performance level: " + (performanceCreation - dataRetrieval) + "ms\n" +
                    "reporting measure: " + (reportingCreation - performanceCreation) + "ms\n" +
                    "total time: " + (System.currentTimeMillis() - start) + "ms");
        }
        return testSpec;
    }
}
