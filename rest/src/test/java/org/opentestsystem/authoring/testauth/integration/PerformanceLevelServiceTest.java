/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.integration;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.Assert.fail;

import java.util.Map;

import javax.validation.ConstraintViolationException;

import org.apache.commons.lang.RandomStringUtils;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.AffinityGroup;
import org.opentestsystem.authoring.testauth.domain.Assessment;
import org.opentestsystem.authoring.testauth.domain.BlueprintElement;
import org.opentestsystem.authoring.testauth.domain.BlueprintReferenceType;
import org.opentestsystem.authoring.testauth.domain.DomainFactory;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionAlgorithm;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionPurpose;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionType;
import org.opentestsystem.authoring.testauth.domain.PerformanceLevel;
import org.opentestsystem.authoring.testauth.domain.Publication;
import org.opentestsystem.authoring.testauth.domain.Segment;
import org.opentestsystem.authoring.testauth.domain.Subject;
import org.opentestsystem.authoring.testauth.persistence.AssessmentRepository;
import org.opentestsystem.authoring.testauth.rest.AbstractRestEmbeddedMongoTest;
import org.opentestsystem.authoring.testauth.service.AffinityGroupService;
import org.opentestsystem.authoring.testauth.service.BlueprintElementService;
import org.opentestsystem.authoring.testauth.service.ItemSelectionAlgorithmService;
import org.opentestsystem.authoring.testauth.service.PerformanceLevelService;
import org.opentestsystem.authoring.testauth.service.PublicationService;
import org.opentestsystem.authoring.testauth.service.SegmentService;
import org.opentestsystem.authoring.testauth.service.SubjectService;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Sets;

public class PerformanceLevelServiceTest extends AbstractRestEmbeddedMongoTest {

    @Autowired
    private PerformanceLevelService performanceLevelService;

    @Autowired
    private SubjectService subjectService;

    @Autowired
    private PublicationService publicationService;

    @Autowired
    private AffinityGroupService affinityGroupService;

    @Autowired
    private BlueprintElementService blueprintElementService;

    @Autowired
    private ItemSelectionAlgorithmService itemSelectionAlgorithmService;

    @Autowired
    private SegmentService segmentService;

    @Autowired
    private AssessmentRepository assessmentRepository;

    private Assessment savedAssessment;
    private ItemSelectionAlgorithm savedAlgorithm;
    private Segment savedSegment;
    private AffinityGroup savedAffinityGroup;
    private BlueprintElement savedBlueprintElement;

    @Before
    public void setupTestData() {
        final Subject savedSubject = this.subjectService.saveSubject(DomainFactory.manufactureValidSubject("abb"));
        final Publication publication = PODAM_FACTORY.manufacturePojo(Publication.class);
        publication.setId(null);
        publication.setSubjectIds(Sets.newHashSet(savedSubject.getId()));
        final Publication savedPublication = this.publicationService.savePublication(publication);
        this.savedAssessment = this.assessmentRepository.save(DomainFactory.manufactureValidAssessment(savedSubject, savedPublication));

        final ItemSelectionAlgorithm algorithm = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.BOOLEAN);
        this.savedAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithm);

        final Segment segmentToSave = DomainFactory.manufactureValidSegment(this.savedAssessment.getId(), this.savedAlgorithm, 1);
        this.savedSegment = this.segmentService.createSegment(segmentToSave);

        final AffinityGroup affinityGroupToSave = DomainFactory.manufactureValidAffinityGroup(this.savedAssessment.getId());
        this.savedAffinityGroup = this.affinityGroupService.saveNewAffinityGroup(affinityGroupToSave);

        final BlueprintElement blueprintElementToSave = DomainFactory.manufactureValidBlueprintElement(savedAssessment.getId(), ImmutableList.of(savedSegment));
        blueprintElementToSave.setId(null);
        this.savedBlueprintElement = this.blueprintElementService.saveBlueprintElement(null, blueprintElementToSave);
    }

    @Test
    public void saveNewPerformanceLevelTest() {
        final PerformanceLevel performanceLevelToSave = DomainFactory.manufactureValidPerformanceLevel(this.savedAssessment.getId());
        final PerformanceLevel savedPerformanceLevel = this.performanceLevelService.savePerformanceLevel(null, performanceLevelToSave);
        assertThat(savedPerformanceLevel, is(notNullValue()));
        final PerformanceLevel retrievedPerformanceLevel = this.performanceLevelService.getPerformanceLevel(savedPerformanceLevel.getId());
        assertThat(retrievedPerformanceLevel, is(notNullValue()));
    }

    @Test
    public void saveExistingPerformanceLevelTest() {
        final PerformanceLevel performanceLevelToSave = DomainFactory.manufactureValidPerformanceLevel(this.savedAssessment.getId());
        final PerformanceLevel savedPerformanceLevel = this.performanceLevelService.savePerformanceLevel(null, performanceLevelToSave);
        assertThat(savedPerformanceLevel, is(notNullValue()));

        final PerformanceLevel retrievedPerformanceLevel = this.performanceLevelService.getPerformanceLevel(savedPerformanceLevel.getId());
        assertThat(retrievedPerformanceLevel, is(notNullValue()));
        retrievedPerformanceLevel.getPerformanceLevelValues().get(0).setScaledHi("10");
        final PerformanceLevel resavedPerformanceLevel = this.performanceLevelService.savePerformanceLevel(retrievedPerformanceLevel.getId(), retrievedPerformanceLevel);
        assertThat(resavedPerformanceLevel, is(notNullValue()));
        assertThat(resavedPerformanceLevel.getPerformanceLevelValues().get(0).getScaledHi(), is(equalTo("10")));
    }

    @Test
    public void savePerformanceLevelWithMissingFieldsTest() {
        final PerformanceLevel performanceLevelToSave = DomainFactory.manufactureValidPerformanceLevel(this.savedAssessment.getId());
        performanceLevelToSave.setId(null);
        performanceLevelToSave.setAssessmentId(""); // NotBlank
        performanceLevelToSave.setBlueprintReferenceType(null); // NotNull
        performanceLevelToSave.setBlueprintReferenceId(null); // NotBlank

        performanceLevelToSave.getPerformanceLevelValues().clear();
        performanceLevelToSave.getPerformanceLevelValues().add(DomainFactory.manufactureValidPerformanceLevelValue(1)); // Size
        performanceLevelToSave.getPerformanceLevelValues().get(0).setLevel(null); // NotNull
        performanceLevelToSave.getPerformanceLevelValues().get(0).setScaledLo(null); // NotBlank
        performanceLevelToSave.getPerformanceLevelValues().get(0).setScaledHi(null); // NotBlank

        try {
            this.performanceLevelService.savePerformanceLevel(null, performanceLevelToSave);
            fail("should have thrown exception");
        } catch (final ConstraintViolationException e) {
            assertThat(e.getConstraintViolations().size(), is(7));
            assertThat(getConstraintViolation(e, "NotBlank").size(), is(4));
            assertThat(getConstraintViolation(e, "NotNull").size(), is(2));
            assertThat(getConstraintViolation(e, "Size").size(), is(1));
        }
    }

    @Test
    public void savePerformanceLevelWithDuplicatePositionsTest() {
        final PerformanceLevel performanceLevelToSave = DomainFactory.manufactureValidPerformanceLevel(this.savedAssessment.getId());
        performanceLevelToSave.setId(null);
        performanceLevelToSave.getPerformanceLevelValues().clear();
        performanceLevelToSave.getPerformanceLevelValues().add(DomainFactory.manufactureValidPerformanceLevelValue(1));
        performanceLevelToSave.getPerformanceLevelValues().add(DomainFactory.manufactureValidPerformanceLevelValue(2));
        performanceLevelToSave.getPerformanceLevelValues().add(DomainFactory.manufactureValidPerformanceLevelValue(5));
        performanceLevelToSave.getPerformanceLevelValues().add(DomainFactory.manufactureValidPerformanceLevelValue(4));
        performanceLevelToSave.getPerformanceLevelValues().add(DomainFactory.manufactureValidPerformanceLevelValue(5));

        try {
            this.performanceLevelService.savePerformanceLevel(null, performanceLevelToSave);
            fail("should have thrown exception");
        } catch (final ConstraintViolationException e) {
            assertThat(e.getConstraintViolations().size(), is(1));
            assertThat(getConstraintViolation(e, "performanceLevel.performanceLevelValues.level.duplicates").size(), is(1));
        }
    }

    @Test
    public void savePerformanceLevelWithInvalidPositionTest() {
        final PerformanceLevel performanceLevelToSave = DomainFactory.manufactureValidPerformanceLevel(this.savedAssessment.getId());
        performanceLevelToSave.setId(null);
        performanceLevelToSave.getPerformanceLevelValues().clear();
        performanceLevelToSave.getPerformanceLevelValues().add(DomainFactory.manufactureValidPerformanceLevelValue(1));
        performanceLevelToSave.getPerformanceLevelValues().add(DomainFactory.manufactureValidPerformanceLevelValue(2));
        performanceLevelToSave.getPerformanceLevelValues().add(DomainFactory.manufactureValidPerformanceLevelValue(44));
        performanceLevelToSave.getPerformanceLevelValues().add(DomainFactory.manufactureValidPerformanceLevelValue(4));
        performanceLevelToSave.getPerformanceLevelValues().add(DomainFactory.manufactureValidPerformanceLevelValue(5));

        try {
            this.performanceLevelService.savePerformanceLevel(null, performanceLevelToSave);
            fail("should have thrown exception");
        } catch (final ConstraintViolationException e) {
            assertThat(e.getConstraintViolations().size(), is(1));
            assertThat(getConstraintViolation(e, "performanceLevel.performanceLevelValues.level.invalid").size(), is(1));
        }
    }

    @Test
    public void savePerformanceLevelWithNegativeValuesTest() {
        final PerformanceLevel performanceLevelToSave = DomainFactory.manufactureValidPerformanceLevel(this.savedAssessment.getId());
        performanceLevelToSave.setId(null);
        performanceLevelToSave.getPerformanceLevelValues().get(0).setScaledLo("-10");
        performanceLevelToSave.getPerformanceLevelValues().get(0).setScaledHi("-1");

        try {
            this.performanceLevelService.savePerformanceLevel(null, performanceLevelToSave);
            fail("should have thrown exception");
        } catch (final ConstraintViolationException e) {
            assertThat(e.getConstraintViolations().size(), is(2));
            assertThat(getConstraintViolation(e, "performanceLevel.performanceLevelValues.scaledLo.min").size(), is(1));
            assertThat(getConstraintViolation(e, "performanceLevel.performanceLevelValues.scaledHi.min").size(), is(1));
        }
    }

    @Test
    public void savePerformanceLevelWithInvalidRangeTest() {
        final PerformanceLevel performanceLevelToSave = DomainFactory.manufactureValidPerformanceLevel(this.savedAssessment.getId());
        performanceLevelToSave.setId(null);
        performanceLevelToSave.getPerformanceLevelValues().get(0).setScaledLo("15");
        performanceLevelToSave.getPerformanceLevelValues().get(0).setScaledHi("2");

        try {
            this.performanceLevelService.savePerformanceLevel(null, performanceLevelToSave);
            fail("should have thrown exception");
        } catch (final ConstraintViolationException e) {
            assertThat(e.getConstraintViolations().size(), is(1));
            assertThat(getConstraintViolation(e, "performanceLevel.performanceLevelValues.scaledLo.lessthan.max").size(), is(1));
        }
    }

    @Test
    public void savePerformanceLevelWithReferenceIdNotMatchingAssessmentIdTest() {
        final PerformanceLevel performanceLevelToSave = DomainFactory.manufactureValidPerformanceLevel(this.savedAssessment.getId());

        performanceLevelToSave.setBlueprintReferenceType(BlueprintReferenceType.TEST);
        performanceLevelToSave.setBlueprintReferenceId(RandomStringUtils.random(25));

        try {
            this.performanceLevelService.savePerformanceLevel(null, performanceLevelToSave);
            fail("should have thrown exception");
        } catch (final ConstraintViolationException e) {
            assertThat(e.getConstraintViolations().size(), is(1));
            assertThat(getConstraintViolation(e, "blueprintReferenceId.notfound").size(), is(1));
        }
    }

    @Test
    public void savePerformanceLevelWithReferenceIdMatchingAssessmentIdTest() {
        final PerformanceLevel performanceLevelToSave = DomainFactory.manufactureValidPerformanceLevel(this.savedAssessment.getId());

        performanceLevelToSave.setBlueprintReferenceType(BlueprintReferenceType.TEST);
        performanceLevelToSave.setBlueprintReferenceId(this.savedAssessment.getId());

        final PerformanceLevel savedPerformanceLevel = this.performanceLevelService.savePerformanceLevel(null, performanceLevelToSave);
        assertThat(savedPerformanceLevel, is(notNullValue()));
        final PerformanceLevel retrievedPerformanceLevel = this.performanceLevelService.getPerformanceLevel(savedPerformanceLevel.getId());
        assertThat(retrievedPerformanceLevel, is(notNullValue()));
    }

    @Test
    public void savePerformanceLevelWithReferenceIdNotFoundSegmentIdTest() {
        final PerformanceLevel performanceLevelToSave = DomainFactory.manufactureValidPerformanceLevel(this.savedAssessment.getId());

        performanceLevelToSave.setBlueprintReferenceType(BlueprintReferenceType.SEGMENT);
        performanceLevelToSave.setBlueprintReferenceId(RandomStringUtils.random(25));

        try {
            this.performanceLevelService.savePerformanceLevel(null, performanceLevelToSave);
            fail("should have thrown exception");
        } catch (final ConstraintViolationException e) {
            assertThat(e.getConstraintViolations().size(), is(1));
            assertThat(getConstraintViolation(e, "blueprintReferenceId.notfound").size(), is(1));
        }
    }

    @Test
    public void savePerformanceLevelWithReferenceIdNotFoundAffinityGroupIdTest() {
        final PerformanceLevel performanceLevelToSave = DomainFactory.manufactureValidPerformanceLevel(this.savedAssessment.getId());

        performanceLevelToSave.setBlueprintReferenceType(BlueprintReferenceType.AFFINITY_GROUP);
        performanceLevelToSave.setBlueprintReferenceId(RandomStringUtils.random(25));

        try {
            this.performanceLevelService.savePerformanceLevel(null, performanceLevelToSave);
            fail("should have thrown exception");
        } catch (final ConstraintViolationException e) {
            assertThat(e.getConstraintViolations().size(), is(1));
            assertThat(getConstraintViolation(e, "blueprintReferenceId.notfound").size(), is(1));
        }
    }

    @Test
    public void savePerformanceLevelWithReferenceIdFoundAffinityGroupIdTest() {
        final PerformanceLevel performanceLevelToSave = DomainFactory.manufactureValidPerformanceLevel(this.savedAssessment.getId());

        performanceLevelToSave.setBlueprintReferenceType(BlueprintReferenceType.AFFINITY_GROUP);
        performanceLevelToSave.setBlueprintReferenceId(this.savedAffinityGroup.getId());

        final PerformanceLevel savedPerformanceLevel = this.performanceLevelService.savePerformanceLevel(null, performanceLevelToSave);
        assertThat(savedPerformanceLevel, is(notNullValue()));
        final PerformanceLevel retrievedPerformanceLevel = this.performanceLevelService.getPerformanceLevel(savedPerformanceLevel.getId());
        assertThat(retrievedPerformanceLevel, is(notNullValue()));
    }

    @Test
    public void savePerformanceLevelWithReferenceIdNotFoundBlueprintElementIdTest() {
        final PerformanceLevel performanceLevelToSave = DomainFactory.manufactureValidPerformanceLevel(this.savedAssessment.getId());

        performanceLevelToSave.setBlueprintReferenceType(BlueprintReferenceType.STANDARD);
        performanceLevelToSave.setBlueprintReferenceId(RandomStringUtils.random(25));

        try {
            this.performanceLevelService.savePerformanceLevel(null, performanceLevelToSave);
            fail("should have thrown exception");
        } catch (final ConstraintViolationException e) {
            assertThat(e.getConstraintViolations().size(), is(1));
            assertThat(getConstraintViolation(e, "blueprintReferenceId.notfound").size(), is(1));
        }
    }

    @Test
    public void savePerformanceLevelWithReferenceIdFoundBlueprintElementIdTest() {
        final PerformanceLevel performanceLevelToSave = DomainFactory.manufactureValidPerformanceLevel(this.savedAssessment.getId());

        performanceLevelToSave.setBlueprintReferenceType(BlueprintReferenceType.STANDARD);
        performanceLevelToSave.setBlueprintReferenceId(this.savedBlueprintElement.getId());

        final PerformanceLevel savedPerformanceLevel = this.performanceLevelService.savePerformanceLevel(null, performanceLevelToSave);
        assertThat(savedPerformanceLevel, is(notNullValue()));
        final PerformanceLevel retrievedPerformanceLevel = this.performanceLevelService.getPerformanceLevel(savedPerformanceLevel.getId());
        assertThat(retrievedPerformanceLevel, is(notNullValue()));
    }

    @Test
    public void deletePerformanceLevelTest() {
        final PerformanceLevel performanceLevelToSave = DomainFactory.manufactureValidPerformanceLevel(this.savedAssessment.getId());
        final PerformanceLevel savedPerformanceLevel = this.performanceLevelService.savePerformanceLevel(null, performanceLevelToSave);
        assertThat(savedPerformanceLevel, is(notNullValue()));
        final PerformanceLevel retrievedPerformanceLevel = this.performanceLevelService.getPerformanceLevel(savedPerformanceLevel.getId());
        assertThat(retrievedPerformanceLevel, is(notNullValue()));

        this.performanceLevelService.removePerformanceLevel(retrievedPerformanceLevel.getId());
        final PerformanceLevel reRetrievedPerformanceLevel = this.performanceLevelService.getPerformanceLevel(savedPerformanceLevel.getId());
        assertThat(reRetrievedPerformanceLevel, is(nullValue()));
    }

    @Test
    public void getPerformanceLevel() {
        final PerformanceLevel performanceLevelToSave = DomainFactory.manufactureValidPerformanceLevel(this.savedAssessment.getId());
        final PerformanceLevel savedPerformanceLevel = this.performanceLevelService.savePerformanceLevel(null, performanceLevelToSave);
        assertThat(savedPerformanceLevel, is(not(nullValue())));

        assertThat(this.performanceLevelService.getPerformanceLevel(savedPerformanceLevel.getId()), is(not(nullValue())));
        assertThat(this.performanceLevelService.getPerformanceLevel("invalid-id"), is(nullValue()));
    }

    @Test
    public void searchPerformanceLevels() {
        final PerformanceLevel performanceLevelToSave = DomainFactory.manufactureValidPerformanceLevel(this.savedAssessment.getId());
        final PerformanceLevel savedPerformanceLevel = this.performanceLevelService.savePerformanceLevel(null, performanceLevelToSave);
        assertThat(savedPerformanceLevel, is(not(nullValue())));

        final PerformanceLevel performanceLevelToSave2 = DomainFactory.manufactureValidPerformanceLevel(this.savedAssessment.getId());
        performanceLevelToSave2.setBlueprintReferenceType(BlueprintReferenceType.SEGMENT);
        performanceLevelToSave2.setBlueprintReferenceId(this.savedSegment.getId());
        final PerformanceLevel savedPerformanceLevel2 = this.performanceLevelService.savePerformanceLevel(null, performanceLevelToSave2);
        assertThat(savedPerformanceLevel2, is(not(nullValue())));

        final Map<String, String[]> params = ImmutableMap.of("blueprintReferenceId", new String[] { savedPerformanceLevel.getBlueprintReferenceId() });
        final SearchResponse<PerformanceLevel> searchResponse = this.performanceLevelService.searchPerformanceLevels(params);
        assertThat(searchResponse.getReturnCount(), is(1));
        assertThat(searchResponse.getSearchResults().size(), is(1));
    }
}
