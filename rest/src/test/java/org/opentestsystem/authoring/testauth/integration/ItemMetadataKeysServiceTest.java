/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.integration;

import static org.hamcrest.CoreMatchers.containsString;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.Assert.fail;

import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.Assessment;
import org.opentestsystem.authoring.testauth.domain.DomainFactory;
import org.opentestsystem.authoring.testauth.domain.ItemMetadataKeys;
import org.opentestsystem.authoring.testauth.domain.Publication;
import org.opentestsystem.authoring.testauth.domain.Subject;
import org.opentestsystem.authoring.testauth.persistence.AssessmentRepository;
import org.opentestsystem.authoring.testauth.rest.AbstractRestEmbeddedMongoTest;
import org.opentestsystem.authoring.testauth.service.ItemMetadataKeysService;
import org.opentestsystem.authoring.testauth.service.PublicationService;
import org.opentestsystem.authoring.testauth.service.SubjectService;
import org.opentestsystem.authoring.testitembank.client.TibItem;
import org.opentestsystem.shared.exception.LocalizedException;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.Lists;

public class ItemMetadataKeysServiceTest extends AbstractRestEmbeddedMongoTest {

    @Autowired
    private SubjectService subjectService;

    @Autowired
    private PublicationService publicationService;

    @Autowired
    private AssessmentRepository assessmentRepository;

    @Autowired
    private ItemMetadataKeysService itemMetadataKeysService;

    private Assessment savedAssessment;

    @Before
    public void setupTestData() {
        final Subject savedSubject = this.subjectService.saveSubject(DomainFactory.manufactureValidSubject("abb"));
        final Publication savedPublication = this.publicationService.savePublication(PODAM_FACTORY.manufacturePojo(Publication.class));
        this.savedAssessment = this.assessmentRepository.save(DomainFactory.manufactureValidAssessment(savedSubject, savedPublication));
    }

    @Test
    public void saveNewItemMetadataKeysTest() {
        this.itemMetadataKeysService.loadTibItemImportIntoItemMetadataKeys(this.savedAssessment.getId(), buildTibItemList());
        final ItemMetadataKeys savedItemMetadataKeys = this.itemMetadataKeysService.getItemMetadataKeysByAssessment(this.savedAssessment.getId());
        assertThat(savedItemMetadataKeys, is(notNullValue()));

        final ItemMetadataKeys retrievedItemMetadataKeys = this.itemMetadataKeysService.getItemMetadataKeysByAssessment(this.savedAssessment.getId());
        assertThat(retrievedItemMetadataKeys, is(notNullValue()));
    }

    @Test
    public void saveNewItemMetadataKeysAssessmentAlreadyLockedTest() {
        this.savedAssessment.setLocked(true);
        this.assessmentRepository.save(this.savedAssessment);

        try {
            this.itemMetadataKeysService.loadTibItemImportIntoItemMetadataKeys(this.savedAssessment.getId(), buildTibItemList());
            fail("exception should be thrown when trying to save a new itemMetadataKeys after assessment is locked");
        } catch (final LocalizedException e) {
            assertThat(e.getMessage(), is("cannot.be.altered.assessment.locked"));
        }
    }

    @Test
    public void saveExistingItemMetadataKeysTest() {
        this.itemMetadataKeysService.loadTibItemImportIntoItemMetadataKeys(this.savedAssessment.getId(), buildTibItemList());
        final ItemMetadataKeys savedItemMetadataKeys = this.itemMetadataKeysService.getItemMetadataKeysByAssessment(this.savedAssessment.getId());

        this.itemMetadataKeysService.loadTibItemImportIntoItemMetadataKeys(this.savedAssessment.getId(), buildTibItemList());
        final ItemMetadataKeys resavedItemMetadataKeys = this.itemMetadataKeysService.getItemMetadataKeysByAssessment(this.savedAssessment.getId());
        assertThat(resavedItemMetadataKeys, is(notNullValue()));
        assertThat(resavedItemMetadataKeys.getItemMetadataKeys().iterator().next(), containsString(savedItemMetadataKeys.getItemMetadataKeys().iterator().next()));
    }

    @Test
    public void saveExistingItemMetadataKeysAssessmentAlreadyLockedTest() {
        this.itemMetadataKeysService.loadTibItemImportIntoItemMetadataKeys(this.savedAssessment.getId(), buildTibItemList());

        this.savedAssessment.setLocked(true);
        this.assessmentRepository.save(this.savedAssessment);

        try {
            this.itemMetadataKeysService.loadTibItemImportIntoItemMetadataKeys(this.savedAssessment.getId(), buildTibItemList());
            fail("exception should be thrown when trying to save an existing itemMetadataKeys after assessment is locked");
        } catch (final LocalizedException e) {
            assertThat(e.getMessage(), is("cannot.be.altered.assessment.locked"));
        }
    }

    @Test
    public void removeItemMetadataKeysByAssessmentIdAssessmentAlreadyLockedTest() {
        this.itemMetadataKeysService.loadTibItemImportIntoItemMetadataKeys(this.savedAssessment.getId(), buildTibItemList());

        this.savedAssessment.setLocked(true);
        this.assessmentRepository.save(this.savedAssessment);

        try {
            this.itemMetadataKeysService.removeItemMetadataKeysByAssessment(this.savedAssessment.getId());
            fail("exception should be thrown when trying to delete an itemMetadataKeys after assessment is locked");
        } catch (final LocalizedException e) {
            assertThat(e.getMessage(), is("cannot.be.altered.assessment.locked"));
        }

        final ItemMetadataKeys retreivedItemMetadataKeys = this.itemMetadataKeysService.getItemMetadataKeysByAssessment(this.savedAssessment.getId());
        assertThat(retreivedItemMetadataKeys, is(notNullValue()));
    }

    @Test
    public void removeItemMetadataKeysByAssessmentIdTest() {
        this.itemMetadataKeysService.loadTibItemImportIntoItemMetadataKeys(this.savedAssessment.getId(), buildTibItemList());

        this.itemMetadataKeysService.removeItemMetadataKeysByAssessment(this.savedAssessment.getId());

        final ItemMetadataKeys retreivedItemMetadataKeys = this.itemMetadataKeysService.getItemMetadataKeysByAssessment(this.savedAssessment.getId());
        assertThat(retreivedItemMetadataKeys, is(nullValue()));
    }

    private List<TibItem> buildTibItemList() {
        return Lists.newArrayList(PODAM_FACTORY.manufacturePojo(TibItem.class), PODAM_FACTORY.manufacturePojo(TibItem.class));
    }
}
