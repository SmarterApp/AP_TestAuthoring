/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.rest;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.opentestsystem.authoring.testauth.domain.FormPartition;
import org.opentestsystem.authoring.testauth.service.FormPartitionService;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.opentestsystem.shared.web.AbstractRestController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.access.annotation.Secured;
import org.springframework.security.access.prepost.PostAuthorize;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

/**
 * Used to retrieve formPartition info
 */
@Controller
public class FormPartitionController extends AbstractRestController {

    @Autowired
    private FormPartitionService formPartitionService;

    @RequestMapping(value = "/formPartition/{formPartitionId}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Test Read" })
    @PostAuthorize("hasPermission(returnObject, 'ROLE_Test Read')")
    @ResponseBody
    public FormPartition findFormPartitionById(@PathVariable final String formPartitionId) {
        final FormPartition partition = this.formPartitionService.getFormPartition(formPartitionId);
        this.formPartitionService.populateReferenceData(partition);
        return partition;
    }

    @ResponseStatus(HttpStatus.CREATED)
    @RequestMapping(value = "/formPartition", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Test Modify" })
    @PreAuthorize("hasPermission(#formPartition, 'ROLE_Test Modify')")
    @ResponseBody
    public FormPartition saveFormPartition(@RequestBody @Valid final FormPartition formPartition, final HttpServletResponse response) {
        return this.formPartitionService.saveFormPartition(null, formPartition);
    }

    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = "/formPartition/{formPartitionId}", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Test Modify" })
    @PreAuthorize("hasPermission(#formPartition, 'ROLE_Test Modify')")
    @ResponseBody
    public FormPartition updateFormPartition(@PathVariable final String formPartitionId, @RequestBody @Valid final FormPartition formPartition, final HttpServletResponse response) {
        return this.formPartitionService.saveFormPartition(formPartitionId, formPartition);
    }

    @RequestMapping(value = "/formPartition/{formPartitionId}", method = RequestMethod.DELETE)
    @Secured({ "ROLE_Test Modify" })
    @PreAuthorize("hasPermission(#formPartitionId, 'formPartition', 'ROLE_Test Modify')")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    public void removeFormPartitionById(@PathVariable final String formPartitionId) {
        this.formPartitionService.removeFormPartition(formPartitionId);
    }

    @RequestMapping(value = "/formPartition", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @Secured({ "ROLE_Test Read" })
    @PostAuthorize("hasPermission(returnObject, 'ROLE_Test Read')")
    @ResponseBody
    public SearchResponse<FormPartition> searchFormPartition(final HttpServletRequest request, final HttpServletResponse response) {
        final SearchResponse<FormPartition> results = this.formPartitionService.searchFormPartitions(request.getParameterMap());
        this.formPartitionService.populateReferenceData(results.getSearchResults());
        return results;
    }
}
