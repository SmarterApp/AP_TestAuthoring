/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.integration.validation;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.DomainFactory;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionAlgorithm;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionPurpose;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionType;
import org.opentestsystem.authoring.testauth.domain.Segment;
import org.opentestsystem.authoring.testauth.rest.AbstractRestEmbeddedMongoTest;
import org.opentestsystem.authoring.testauth.service.ItemSelectionAlgorithmService;
import org.opentestsystem.authoring.testauth.validation.SegmentValidator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.BeanPropertyBindingResult;
import org.springframework.validation.Errors;
import org.springframework.validation.FieldError;

public class SegmentValidatorTest extends AbstractRestEmbeddedMongoTest {

    @Autowired
    private SegmentValidator segmentValidator;

    @Autowired
    private ItemSelectionAlgorithmService itemSelectionAlgorithmService;

    private ItemSelectionAlgorithm booleanAlgorithm = null;
    private ItemSelectionAlgorithm integerAlgorithm = null;
    private ItemSelectionAlgorithm floatAlgorithm = null;
    private ItemSelectionAlgorithm listAlgorithm = null;

    @Before
    public void setupTestData() {
        final ItemSelectionAlgorithm algorithm = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.BOOLEAN);
        this.booleanAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithm);

        final ItemSelectionAlgorithm algorithm2 = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.INTEGER);
        this.integerAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithm2);

        final ItemSelectionAlgorithm algorithm3 = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.FLOAT);
        this.floatAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithm3);

        final ItemSelectionAlgorithm algorithm4 = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.LIST);
        this.listAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithm4);
    }

    @Test
    public void validateSegment() {
        final Map<String, String> selectedParameters = new HashMap<String, String>();
        selectedParameters.put(this.booleanAlgorithm.getParameters().get(0).getParameterName(), "true");

        final Segment segment = new Segment();
        segment.setAssessmentId("assessmentId");
        segment.setLabel("label");
        segment.setMinFtItems(0);
        segment.setMaxFtItems(1);
        segment.setMinOpItems(21);
        segment.setMaxOpItems(21);
        segment.setPosition(1);
        segment.setItemSelectionAlgorithmId(this.booleanAlgorithm.getId());
        segment.setItemSelectionParameters(selectedParameters);

        final Errors errors = new BeanPropertyBindingResult(segment, "segment");
        this.segmentValidator.validate(segment, errors);
        assertThat(errors.getAllErrors().size(), is(0));
    }

    @Test
    public void validateSegmentWithMissingBasicFields() {
        final Segment segment = new Segment();

        final Errors errors = new BeanPropertyBindingResult(segment, "segment");
        this.segmentValidator.validate(segment, errors);

        assertThat(errors.getAllErrors().size(), is(8));
        assertThat(getErrorsForCode(errors, "assessmentId.required").size(), is(1));
        assertThat(getErrorsForCode(errors, "segment.label.required").size(), is(1));
        assertThat(getErrorsForCode(errors, "segment.minOpItems.required").size(), is(1));
        assertThat(getErrorsForCode(errors, "segment.maxOpItems.required").size(), is(1));
        assertThat(getErrorsForCode(errors, "segment.minFtItems.required").size(), is(1));
        assertThat(getErrorsForCode(errors, "segment.maxFtItems.required").size(), is(1));
        assertThat(getErrorsForCode(errors, "segment.position.required").size(), is(1));
        assertThat(getErrorsForCode(errors, "segment.itemSelectionAlgorithmId.required").size(), is(1));
    }

    @Test
    public void validateSegmentWithBooleanParameter() {
        final Segment segment = new Segment();
        segment.setAssessmentId("assessmentId");
        segment.setLabel("label");
        segment.setMinFtItems(0);
        segment.setMaxFtItems(1);
        segment.setMinOpItems(21);
        segment.setMaxOpItems(21);
        segment.setPosition(1);
        segment.setItemSelectionAlgorithmId(this.booleanAlgorithm.getId());

        Errors errors = new BeanPropertyBindingResult(segment, "segment");
        this.segmentValidator.validate(segment, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "segment.itemSelectionParameters.count").size(), is(1));

        segment.setItemSelectionParameters(new HashMap<String, String>());
        errors = new BeanPropertyBindingResult(segment, "segment");
        this.segmentValidator.validate(segment, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "segment.itemSelectionParameters.count").size(), is(1));

        segment.getItemSelectionParameters().put("invalid-param-name", "invalid-boolean");
        errors = new BeanPropertyBindingResult(segment, "segment");
        this.segmentValidator.validate(segment, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "segment.itemSelectionParameters.required").size(), is(1));

        segment.getItemSelectionParameters().clear();
        segment.getItemSelectionParameters().put(this.booleanAlgorithm.getParameters().get(0).getParameterName(), "invalid-boolean");
        errors = new BeanPropertyBindingResult(segment, "segment");
        this.segmentValidator.validate(segment, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "segment.itemSelectionParameters.invalid").size(), is(1));

        segment.getItemSelectionParameters().put(this.booleanAlgorithm.getParameters().get(0).getParameterName(), "false");
        errors = new BeanPropertyBindingResult(segment, "segment");
        this.segmentValidator.validate(segment, errors);
        assertThat(errors.getAllErrors().size(), is(0));
    }

    @Test
    public void validateSegmentWithIntegerParameter() {
        final Segment segment = new Segment();
        segment.setAssessmentId("assessmentId");
        segment.setLabel("label");
        segment.setMinFtItems(0);
        segment.setMaxFtItems(1);
        segment.setMinOpItems(21);
        segment.setMaxOpItems(21);
        segment.setPosition(1);
        segment.setItemSelectionAlgorithmId(this.integerAlgorithm.getId());

        Errors errors = new BeanPropertyBindingResult(segment, "segment");
        this.segmentValidator.validate(segment, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "segment.itemSelectionParameters.count").size(), is(1));

        segment.setItemSelectionParameters(new HashMap<String, String>());
        errors = new BeanPropertyBindingResult(segment, "segment");
        this.segmentValidator.validate(segment, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "segment.itemSelectionParameters.count").size(), is(1));

        segment.getItemSelectionParameters().put("invalid-param-name", "invalid-integer");
        errors = new BeanPropertyBindingResult(segment, "segment");
        this.segmentValidator.validate(segment, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "segment.itemSelectionParameters.required").size(), is(1));

        segment.getItemSelectionParameters().clear();
        segment.getItemSelectionParameters().put(this.integerAlgorithm.getParameters().get(0).getParameterName(), "invalid-integer");
        errors = new BeanPropertyBindingResult(segment, "segment");
        this.segmentValidator.validate(segment, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "segment.itemSelectionParameters.parseable.number").size(), is(1));

        segment.getItemSelectionParameters().clear();
        segment.getItemSelectionParameters().put(this.integerAlgorithm.getParameters().get(0).getParameterName(), "5.5");
        errors = new BeanPropertyBindingResult(segment, "segment");
        this.segmentValidator.validate(segment, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "segment.itemSelectionParameters.parseable.number").size(), is(1));

        segment.getItemSelectionParameters().clear();
        segment.getItemSelectionParameters().put(this.integerAlgorithm.getParameters().get(0).getParameterName(), "999");
        errors = new BeanPropertyBindingResult(segment, "segment");
        this.segmentValidator.validate(segment, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "segment.itemSelectionParameters.out.of.range").size(), is(1));

        segment.getItemSelectionParameters().clear();
        segment.getItemSelectionParameters().put(this.integerAlgorithm.getParameters().get(0).getParameterName(), "-999");
        errors = new BeanPropertyBindingResult(segment, "segment");
        this.segmentValidator.validate(segment, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "segment.itemSelectionParameters.out.of.range").size(), is(1));

        segment.getItemSelectionParameters().put(this.integerAlgorithm.getParameters().get(0).getParameterName(), "5");
        errors = new BeanPropertyBindingResult(segment, "segment");
        this.segmentValidator.validate(segment, errors);
        assertThat(errors.getAllErrors().size(), is(0));
    }

    @Test
    public void validateSegmentWithMinMax() {
        ItemSelectionAlgorithm constrainedAlgorithm = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.INTEGER);
        constrainedAlgorithm.getParameters().get(0).setMinimumValue("1");
        constrainedAlgorithm.getParameters().get(0).setMaximumValue("5");
        constrainedAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(constrainedAlgorithm);

        final Segment segment = new Segment();
        segment.setAssessmentId("assessmentId");
        segment.setLabel("label");
        segment.setMinFtItems(0);
        segment.setMaxFtItems(1);
        segment.setMinOpItems(21);
        segment.setMaxOpItems(21);
        segment.setPosition(1);
        segment.setItemSelectionAlgorithmId(constrainedAlgorithm.getId());
        segment.setItemSelectionParameters(new HashMap<String, String>());

        final Errors errors = new BeanPropertyBindingResult(segment, "segment");
        segment.getItemSelectionParameters().put(constrainedAlgorithm.getParameters().get(0).getParameterName(), "999");
        this.segmentValidator.validate(segment, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "segment.itemSelectionParameters.out.of.range").size(), is(1));
    }

    @Test
    public void validateSegmentWithMinOnly() {
        ItemSelectionAlgorithm constrainedAlgorithm = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.INTEGER);
        constrainedAlgorithm.getParameters().get(0).setMinimumValue("1");
        constrainedAlgorithm.getParameters().get(0).setMaximumValue("");
        constrainedAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(constrainedAlgorithm);

        final Segment segment = new Segment();
        segment.setAssessmentId("assessmentId");
        segment.setLabel("label");
        segment.setMinFtItems(0);
        segment.setMaxFtItems(1);
        segment.setMinOpItems(21);
        segment.setMaxOpItems(21);
        segment.setPosition(1);
        segment.setItemSelectionAlgorithmId(constrainedAlgorithm.getId());
        segment.setItemSelectionParameters(new HashMap<String, String>());

        Errors errors = new BeanPropertyBindingResult(segment, "segment");
        segment.getItemSelectionParameters().put(constrainedAlgorithm.getParameters().get(0).getParameterName(), "0");
        this.segmentValidator.validate(segment, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "segment.itemSelectionParameters.out.of.range").size(), is(1));

        segment.getItemSelectionParameters().put(constrainedAlgorithm.getParameters().get(0).getParameterName(), "1");
        errors = new BeanPropertyBindingResult(segment, "segment");
        this.segmentValidator.validate(segment, errors);
        assertThat(errors.getAllErrors().size(), is(0));
    }

    @Test
    public void validateSegmentWithMaxOnly() {
        ItemSelectionAlgorithm constrainedAlgorithm = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.INTEGER);
        constrainedAlgorithm.getParameters().get(0).setMinimumValue(null);
        constrainedAlgorithm.getParameters().get(0).setMaximumValue("10");
        constrainedAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(constrainedAlgorithm);

        final Segment segment = new Segment();
        segment.setAssessmentId("assessmentId");
        segment.setLabel("label");
        segment.setMinFtItems(0);
        segment.setMaxFtItems(1);
        segment.setMinOpItems(21);
        segment.setMaxOpItems(21);
        segment.setPosition(1);
        segment.setItemSelectionAlgorithmId(constrainedAlgorithm.getId());
        segment.setItemSelectionParameters(new HashMap<String, String>());

        Errors errors = new BeanPropertyBindingResult(segment, "segment");
        segment.getItemSelectionParameters().put(constrainedAlgorithm.getParameters().get(0).getParameterName(), "11");
        this.segmentValidator.validate(segment, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "segment.itemSelectionParameters.out.of.range").size(), is(1));

        segment.getItemSelectionParameters().put(constrainedAlgorithm.getParameters().get(0).getParameterName(), "10");
        errors = new BeanPropertyBindingResult(segment, "segment");
        this.segmentValidator.validate(segment, errors);
        assertThat(errors.getAllErrors().size(), is(0));
    }

    @Test
    public void validateSegmentWithNoRange() {
        ItemSelectionAlgorithm constrainedAlgorithm = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.INTEGER);
        constrainedAlgorithm.getParameters().get(0).setMinimumValue("");
        constrainedAlgorithm.getParameters().get(0).setMaximumValue(null);
        constrainedAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(constrainedAlgorithm);

        final Segment segment = new Segment();
        segment.setAssessmentId("assessmentId");
        segment.setLabel("label");
        segment.setMinFtItems(0);
        segment.setMaxFtItems(1);
        segment.setMinOpItems(21);
        segment.setMaxOpItems(21);
        segment.setPosition(1);
        segment.setItemSelectionAlgorithmId(constrainedAlgorithm.getId());
        segment.setItemSelectionParameters(new HashMap<String, String>());

        final Errors errors = new BeanPropertyBindingResult(segment, "segment");
        segment.getItemSelectionParameters().put(constrainedAlgorithm.getParameters().get(0).getParameterName(), "999");
        this.segmentValidator.validate(segment, errors);
        assertThat(errors.getAllErrors().size(), is(0));
    }

    @Test
    public void validateSegmentWithFloatParameter() {
        final Segment segment = new Segment();
        segment.setAssessmentId("assessmentId");
        segment.setLabel("label");
        segment.setMinFtItems(0);
        segment.setMaxFtItems(1);
        segment.setMinOpItems(21);
        segment.setMaxOpItems(21);
        segment.setPosition(1);
        segment.setItemSelectionAlgorithmId(this.floatAlgorithm.getId());

        Errors errors = new BeanPropertyBindingResult(segment, "segment");
        this.segmentValidator.validate(segment, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "segment.itemSelectionParameters.count").size(), is(1));

        segment.setItemSelectionParameters(new HashMap<String, String>());
        errors = new BeanPropertyBindingResult(segment, "segment");
        this.segmentValidator.validate(segment, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "segment.itemSelectionParameters.count").size(), is(1));

        segment.getItemSelectionParameters().put("invalid-param-name", "invalid-float");
        errors = new BeanPropertyBindingResult(segment, "segment");
        this.segmentValidator.validate(segment, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "segment.itemSelectionParameters.required").size(), is(1));

        segment.getItemSelectionParameters().clear();
        segment.getItemSelectionParameters().put(this.floatAlgorithm.getParameters().get(0).getParameterName(), "invalid-float");
        errors = new BeanPropertyBindingResult(segment, "segment");
        this.segmentValidator.validate(segment, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "segment.itemSelectionParameters.parseable.number").size(), is(1));

        segment.getItemSelectionParameters().clear();
        segment.getItemSelectionParameters().put(this.floatAlgorithm.getParameters().get(0).getParameterName(), "999");
        errors = new BeanPropertyBindingResult(segment, "segment");
        this.segmentValidator.validate(segment, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "segment.itemSelectionParameters.out.of.range").size(), is(1));

        segment.getItemSelectionParameters().clear();
        segment.getItemSelectionParameters().put(this.floatAlgorithm.getParameters().get(0).getParameterName(), "-999");
        errors = new BeanPropertyBindingResult(segment, "segment");
        this.segmentValidator.validate(segment, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "segment.itemSelectionParameters.out.of.range").size(), is(1));

        segment.getItemSelectionParameters().put(this.floatAlgorithm.getParameters().get(0).getParameterName(), "5.5");
        errors = new BeanPropertyBindingResult(segment, "segment");
        this.segmentValidator.validate(segment, errors);
        assertThat(errors.getAllErrors().size(), is(0));
    }

    @Test
    public void validateSegmentWithListParameter() {
        final Segment segment = new Segment();
        segment.setAssessmentId("assessmentId");
        segment.setLabel("label");
        segment.setMinFtItems(0);
        segment.setMaxFtItems(1);
        segment.setMinOpItems(21);
        segment.setMaxOpItems(21);
        segment.setPosition(1);
        segment.setItemSelectionAlgorithmId(this.listAlgorithm.getId());

        Errors errors = new BeanPropertyBindingResult(segment, "segment");
        this.segmentValidator.validate(segment, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "segment.itemSelectionParameters.count").size(), is(1));

        segment.setItemSelectionParameters(new HashMap<String, String>());
        errors = new BeanPropertyBindingResult(segment, "segment");
        this.segmentValidator.validate(segment, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "segment.itemSelectionParameters.count").size(), is(1));

        segment.getItemSelectionParameters().put("invalid-param-name", "invalid-list");
        errors = new BeanPropertyBindingResult(segment, "segment");
        this.segmentValidator.validate(segment, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "segment.itemSelectionParameters.required").size(), is(1));

        segment.getItemSelectionParameters().clear();
        segment.getItemSelectionParameters().put(this.listAlgorithm.getParameters().get(0).getParameterName(), "not-list-element");
        errors = new BeanPropertyBindingResult(segment, "segment");
        this.segmentValidator.validate(segment, errors);
        assertThat(errors.getAllErrors().size(), is(1));
        assertThat(getErrorsForCode(errors, "segment.itemSelectionParameters.invalid.selection").size(), is(1));

        segment.getItemSelectionParameters().put(this.listAlgorithm.getParameters().get(0).getParameterName(), this.listAlgorithm.getParameters().get(0).getDefaultValue());
        errors = new BeanPropertyBindingResult(segment, "segment");
        this.segmentValidator.validate(segment, errors);
        assertThat(errors.getAllErrors().size(), is(0));
    }

    private static List<FieldError> getErrorsForCode(final Errors errors, final String messageCode) {
        final List<FieldError> fieldErrors = new ArrayList<FieldError>();
        for (final FieldError fieldError : errors.getFieldErrors()) {
            if (fieldError.getDefaultMessage().equals(messageCode)) {
                fieldErrors.add(fieldError);
            }
        }
        return fieldErrors;
    }
}
