/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.domain;

import static org.opentestsystem.authoring.testauth.config.TestAuthUtil.safeParseInt;

import java.io.Serializable;
import java.util.Map;

import javax.validation.Valid;

import org.hibernate.validator.constraints.NotBlank;
import org.springframework.data.mongodb.core.index.CompoundIndex;
import org.springframework.data.mongodb.core.index.CompoundIndexes;
import org.springframework.data.mongodb.core.mapping.Document;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

@Document
@JsonIgnoreProperties(ignoreUnknown = true)
@CompoundIndexes(value = { @CompoundIndex(name = "assessment_aff_grp_indx", def = "{'assessmentId':1, 'groupName':1}", unique = true) })
public class AffinityGroup extends AssessmentChild implements Serializable, TenantedByAssessment {

    private static final long serialVersionUID = -6846038576997586631L;

    @NotBlank(message = "affinityGroup.groupName.required")
    private String groupName;

    private boolean active;

    @Valid
    private Map<String, AffinityGroupValue> affinityGroupValueMap; // segmentId -> AffinityGroupValue

    public String getGroupName() {
        return groupName;
    }

    public void setGroupName(final String groupName) {
        this.groupName = groupName;
    }

    public boolean isActive() {
        return active;
    }

    public void setActive(final boolean active) {
        this.active = active;
    }

    public Map<String, AffinityGroupValue> getAffinityGroupValueMap() {
        return this.affinityGroupValueMap;
    }

    public void setAffinityGroupValueMap(final Map<String, AffinityGroupValue> affinityGroupValueMap) {
        this.affinityGroupValueMap = affinityGroupValueMap;
    }

    public AffinityGroupValue getMasterAffinityGroupValue() {
        final AffinityGroupValue master = new AffinityGroupValue(0, 0, 0, 0);

        if (affinityGroupValueMap != null) {
            for (final AffinityGroupValue segValue : affinityGroupValueMap.values()) {
                master.setOperationalItemMinValue(master.getOperationalItemMinValue() + safeParseInt(segValue.getOperationalItemMinValue()));
                master.setOperationalItemMaxValue(master.getOperationalItemMaxValue() + safeParseInt(segValue.getOperationalItemMaxValue()));
                master.setFieldTestItemMinValue(master.getFieldTestItemMinValue() + safeParseInt(segValue.getFieldTestItemMinValue()));
                master.setFieldTestItemMaxValue(master.getFieldTestItemMaxValue() + safeParseInt(segValue.getFieldTestItemMaxValue()));
            }
        }

        return master;
    }

}
