/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.service.impl;

import static org.opentestsystem.authoring.testauth.config.TestAuthUtil.paramArray;

import org.opentestsystem.authoring.testauth.domain.ItemMetadataConfig;
import org.opentestsystem.authoring.testauth.domain.ItemMetadataKeys;
import org.opentestsystem.authoring.testauth.persistence.ItemMetadataConfigRepository;
import org.opentestsystem.authoring.testauth.service.ItemMetadataConfigService;
import org.opentestsystem.authoring.testauth.service.ItemMetadataKeysService;
import org.opentestsystem.authoring.testauth.validation.ValidationHelper;
import org.opentestsystem.shared.exception.LocalizedException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DuplicateKeyException;
import org.springframework.stereotype.Service;
import org.springframework.validation.BeanPropertyBindingResult;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;

@Service
public class ItemMetadataConfigServiceImpl extends AssessmentChildHelper implements ItemMetadataConfigService {

    @Autowired
    private transient ItemMetadataConfigRepository itemMetadataConfigRepository;

    @Autowired
    private transient ItemMetadataKeysService itemMetadataKeysService;

    @Override
    public ItemMetadataConfig getItemMetadataConfigByAssessment(final String assessmentId) {
        return this.itemMetadataConfigRepository.findByAssessmentId(assessmentId);
    }

    @Override
    public ItemMetadataConfig saveItemMetadataConfig(final ItemMetadataConfig itemMetadataConfig) {
        ItemMetadataConfig savedMetadataConfig = null;
        if (itemMetadataConfig != null) {
            checkForLockedAssessment(itemMetadataConfig.getAssessmentId());
            validateKeys(itemMetadataConfig);
            try {
                savedMetadataConfig = this.itemMetadataConfigRepository.save(itemMetadataConfig);
            } catch (final DuplicateKeyException dke) {
                throw new LocalizedException("itemMetadataConfig.already.exists", new String[] { }, dke);
            }
        }
        return savedMetadataConfig;
    }

    private void validateKeys(final ItemMetadataConfig itemMetadataConfig) {
        final BindingResult bindingResult = new BeanPropertyBindingResult(itemMetadataConfig, "itemMetadataConfig");
        final ItemMetadataKeys itemMetadataKeys = this.itemMetadataKeysService.getItemMetadataKeysByAssessment(itemMetadataConfig.getAssessmentId());
        if (itemMetadataKeys != null && !itemMetadataKeys.getItemMetadataKeys().containsAll(itemMetadataConfig.getItemMetadataReckonSet())) {
            bindingResult.addError(new FieldError("itemMetadataConfig", "itemMetadataReckonSet", null, false, paramArray("itemMetadataConfig.temMetadataReckonSet.notfound"),
                    null, "itemMetadataConfig.temMetadataReckonSet.notfound"));
        }
        if (bindingResult.hasErrors()) {
            throw ValidationHelper.convertErrorsToConstraintException(itemMetadataConfig, bindingResult);
        }
    }

    @Override
    public void removeItemMetadataConfig(final String itemMetadataConfigId) {
        final ItemMetadataConfig existingMetadataConfig = this.itemMetadataConfigRepository.findOne(itemMetadataConfigId);
        checkForLockedAssessment(existingMetadataConfig.getAssessmentId());
        this.itemMetadataConfigRepository.delete(itemMetadataConfigId);
    }

    @Override
    public void removeItemMetadataConfigByAssessment(final String assessmentId) {
        checkForLockedAssessment(assessmentId);
        final ItemMetadataConfig itemMetadataConfig = this.itemMetadataConfigRepository.findByAssessmentId(assessmentId);
        if (itemMetadataConfig != null) {
            this.itemMetadataConfigRepository.delete(itemMetadataConfig);
        }
    }
}
