/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.domain;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.MatcherAssert.assertThat;

import org.junit.Test;

import com.google.common.collect.ImmutableList;

public class ComputationRuleTest {

    @Test
    public void equalsTest() {
        final ComputationRule expected = createDummyComputationRule();
        final ComputationRule actual = createDummyComputationRule();
        final ComputationRule unexpected = createDummyComputationRule();
        unexpected.setName("unexpected-name");

        assertThat(actual, is(equalTo(expected)));
        assertThat(actual, is(not(equalTo(unexpected))));
    }

    @Test
    public void toStringTest() {
        final ComputationRule expected = createDummyComputationRule();
        final ComputationRule actual = createDummyComputationRule();

        assertThat(actual.toString(), is(equalTo(expected.toString())));
    }

    @Test
    public void hashcodeTest() {
        final ComputationRule expected = createDummyComputationRule();
        final ComputationRule actual = createDummyComputationRule();

        assertThat(actual.hashCode(), is(equalTo(expected.hashCode())));
    }

    public static ComputationRule createDummyComputationRule() {
        final ComputationRule computationRule = new ComputationRule();
        computationRule.setId("1");
        computationRule.setName("name");
        computationRule.setVersion("version");
        computationRule.setConversionTableType(ConversionTableType.VALUE_STANDARD_ERROR);
        computationRule.setDescription("description");
        final ComputationRuleParameter crfp = new ComputationRuleParameter();
        crfp.setParameterName("parameterName");
        crfp.setComputationRuleType(ComputationRuleType.INTEGER);
        crfp.setDefaultValue("1");
        crfp.setMinimumValue("1");
        crfp.setMaximumValue("9");
        crfp.setComputationRuleMultiplicityType(ComputationRuleMultiplicityType.DICTIONARY);
        crfp.setDictionaryIndexType(DictionaryIndexType.INTEGER);
        final ComputationRuleParameter crfp2 = new ComputationRuleParameter();
        crfp2.setParameterName("parameterName2");
        crfp2.setComputationRuleType(ComputationRuleType.INTEGER);
        crfp2.setDefaultValue("1");
        crfp2.setMinimumValue("1");
        crfp2.setMaximumValue("9");
        crfp2.setComputationRuleMultiplicityType(ComputationRuleMultiplicityType.DICTIONARY);
        crfp2.setDictionaryIndexType(DictionaryIndexType.INTEGER);
        computationRule.setParameters(ImmutableList.of(crfp, crfp2));
        return computationRule;
    }
}
