/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testitembank.client;

import static org.opentestsystem.authoring.testauth.config.TestAuthUtil.paramArray;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.annotation.Resource;

import org.opentestsystem.shared.exception.LocalizedException;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.oauth2.client.OAuth2RestTemplate;
import org.springframework.stereotype.Component;

import com.google.common.collect.ImmutableMap;

/**
 * Integrated implementation of the Test Item Bank client.
 * Talks to a running instance of the Test Item Bank REST api.
 */
@Component
public class TestItemBankClient implements TestItemBankClientInterface {

    /**
     * Base URI to use to talk to TIB REST API
     */
    @Value("${tib.baseUri}")
    private String baseUri;

    @Resource
    protected OAuth2RestTemplate tibClientRestTemplate;

    @Override
    public String getItems(final Map<String, String[]> requestParamMap) {
        final String retValue = this.tibClientRestTemplate.getForObject(this.baseUri + "item" + buildRequestParamQuery(requestParamMap), String.class);
        return retValue;
    }

    @Override
    public List<TibItem> searchItems(final Map<String, String[]> requestParamMap) {
        final TibItemSearchResponse searchResponse = this.tibClientRestTemplate.getForObject(this.baseUri + "item" + buildRequestParamQuery(requestParamMap), TibItemSearchResponse.class);
        return searchResponse.getSearchResults();
    }

    @Override
    public TibItemMetadata getItemMetadataByTenantId(final String tenantId) {
        return this.tibClientRestTemplate.getForObject(this.baseUri + "itemMetadata" + buildRequestParamQuery(ImmutableMap.of("tenantId", paramArray(tenantId))), TibItemMetadata.class);
    }

    @SuppressWarnings("unchecked")
    @Override
    public SearchResponse<TibItemMetadataValue> searchItemMetadataValues(final Map<String, String[]> requestParamMap) {
        return this.tibClientRestTemplate.getForObject(this.baseUri + "itemMetadataValue" + buildRequestParamQuery(requestParamMap), SearchResponse.class);
    }

    @Override
    public List<TibItem> retrieveItemsByIdentifierList(final String tenantId, final List<String> identifiers) {
        final TibIdentifierListPayload requestBody = new TibIdentifierListPayload();
        requestBody.setTenantId(tenantId);
        requestBody.setItemIdentifiers(identifiers);
        return Arrays.asList(this.tibClientRestTemplate.postForObject(this.baseUri + "itemsByIdentifierSearch", requestBody, TibItem[].class));
    }

    private String buildRequestParamQuery(final Map<String, String[]> requestParamMap) {
        final StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append('?');
        boolean first = true;
        final Iterator<Entry<String, String[]>> it = requestParamMap.entrySet().iterator();

        while (it.hasNext()) {
            final Map.Entry<String, String[]> pairs = it.next();

            if (pairs != null) {
                for (final String val : pairs.getValue()) {
                    if (!first) {
                        queryBuilder.append('&');
                    }
                    first = false;

                    try {
                        final String encodedVal = URLEncoder.encode(val, "UTF-8");
                        queryBuilder.append(pairs.getKey()).append("=").append(encodedVal);
                    } catch (final UnsupportedEncodingException e) {
                        throw new LocalizedException("tib.encoding.exception", e);
                    }
                }
            }
        }
        return queryBuilder.toString();
    }
}
