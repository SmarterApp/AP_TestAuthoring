/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.rest;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import org.opentestsystem.authoring.testauth.config.TestAuthUtil;
import org.opentestsystem.authoring.testauth.domain.AdaptiveItemLocation;
import org.opentestsystem.authoring.testauth.domain.Assessment;
import org.opentestsystem.authoring.testauth.domain.BlueprintElement;
import org.opentestsystem.authoring.testauth.domain.BlueprintReferenceType;
import org.opentestsystem.authoring.testauth.domain.ComputationRule;
import org.opentestsystem.authoring.testauth.domain.ComputationRuleMultiplicityType;
import org.opentestsystem.authoring.testauth.domain.ComputationRuleParameter;
import org.opentestsystem.authoring.testauth.domain.ComputationRuleType;
import org.opentestsystem.authoring.testauth.domain.ConversionTableType;
import org.opentestsystem.authoring.testauth.domain.DomainFactory;
import org.opentestsystem.authoring.testauth.domain.Item;
import org.opentestsystem.authoring.testauth.domain.ItemLocation;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionAlgorithm;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionAlgorithmType;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionPurpose;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionType;
import org.opentestsystem.authoring.testauth.domain.PerformanceLevel;
import org.opentestsystem.authoring.testauth.domain.Publication;
import org.opentestsystem.authoring.testauth.domain.PublishingRecord;
import org.opentestsystem.authoring.testauth.domain.PublishingStatus;
import org.opentestsystem.authoring.testauth.domain.ReportingMeasure;
import org.opentestsystem.authoring.testauth.domain.ScoringRule;
import org.opentestsystem.authoring.testauth.domain.ScoringRuleParameter;
import org.opentestsystem.authoring.testauth.domain.Segment;
import org.opentestsystem.authoring.testauth.domain.Subject;
import org.opentestsystem.authoring.testauth.service.AssessmentService;
import org.opentestsystem.authoring.testauth.service.BlueprintElementService;
import org.opentestsystem.authoring.testauth.service.ComputationRuleService;
import org.opentestsystem.authoring.testauth.service.ItemSelectionAlgorithmService;
import org.opentestsystem.authoring.testauth.service.ItemService;
import org.opentestsystem.authoring.testauth.service.PerformanceLevelService;
import org.opentestsystem.authoring.testauth.service.PublicationService;
import org.opentestsystem.authoring.testauth.service.ReportingMeasureService;
import org.opentestsystem.authoring.testauth.service.ScoringRuleService;
import org.opentestsystem.authoring.testauth.service.SegmentService;
import org.opentestsystem.authoring.testauth.service.SubjectService;
import org.opentestsystem.authoring.testspecbank.client.TestSpecBankClientInterface;
import org.opentestsystem.authoring.testspecbank.client.domain.TestSpecBankClientObj;
import org.opentestsystem.shared.docs.annotation.ApiDocExample;
import org.opentestsystem.shared.exception.RestException;
import org.opentestsystem.shared.progman.client.ProgManClient;
import org.opentestsystem.shared.progman.client.domain.Tenant;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;

public class PublishingRecordControllerTest extends AbstractRestEmbeddedMongoTest {
    private static final String BASE_URL = "/publishingRecord";

    @Autowired
    private ProgManClient progManClient;

    @Autowired
    private TestSpecBankClientInterface testSpecBankClient;

    @Autowired
    private AssessmentService assessmentService;

    @Autowired
    private SubjectService subjectService;

    @Autowired
    private PublicationService publicationService;

    @Autowired
    private ItemSelectionAlgorithmService itemSelectionAlgorithmService;

    @Autowired
    private SegmentService segmentService;

    @Autowired
    private BlueprintElementService blueprintElementService;

    @Autowired
    private ItemService itemService;

    @Autowired
    private ComputationRuleService computationRuleService;

    @Autowired
    private ScoringRuleService scoringRuleService;

    @Autowired
    private PerformanceLevelService performanceLevelService;

    @Autowired
    private ReportingMeasureService reportingMeasureService;

    private final Tenant tenant1 = buildTenant("id1", "tenant1", "description1");
    private Assessment savedAssessment;
    private ItemSelectionAlgorithm savedAlgorithm;
    private PublishingRecord savedPublishingRecord;

    @ApiDocExample(rank = -1)
    @Before
    public void setupTestData() {
        final Subject savedSubject = this.subjectService.saveSubject(DomainFactory.manufactureValidSubject("ABB"));
        final Publication savedPublication = this.publicationService.savePublication(DomainFactory.manufactureValidPublication(savedSubject.getTenantId(), ImmutableSet.of(savedSubject)));
        this.savedAssessment = this.assessmentService.saveAssessment(DomainFactory.manufactureValidAssessment(savedSubject, savedPublication));

        final ItemSelectionAlgorithm algorithm = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.BOOLEAN);
        algorithm.setItemSelectionAlgorithmType(ItemSelectionAlgorithmType.ADAPTIVE);
        this.savedAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithm);

        assertThat(this.mongoTemplate.findAll(Assessment.class).size(), is(equalTo(1)));
        assertThat(this.savedAssessment, is(notNullValue()));
        this.savedPublishingRecord = callGETRestService(BASE_URL + "/current/" + this.savedAssessment.getId(), PublishingRecord.class);

        saveGoodMinimalSegmentAndItemData();
        saveGoodMinimalBlueprintData();
    }

    @ApiDocExample(rank = 1)
    @Test
    public void findPublishingRecord() throws InterruptedException {
        final PublishingRecord fetchedPublishingRecord = callGETRestService(BASE_URL + "/" + this.savedPublishingRecord.getId(), PublishingRecord.class);
        assertThat(fetchedPublishingRecord, is(notNullValue()));
    }

    @ApiDocExample(rank = 2)
    @SuppressWarnings("unchecked")
    @Test
    public void searchPublishingRecordByAssessmentId() {
        final Subject savedSubject = this.subjectService.saveSubject(DomainFactory.manufactureValidSubject("ABB"));
        final Publication savedPublication = this.publicationService.savePublication(DomainFactory.manufactureValidPublication(savedSubject.getTenantId(), ImmutableSet.of(savedSubject)));
        final Assessment newAssessment = this.assessmentService.saveAssessment(DomainFactory.manufactureValidAssessment(savedSubject, savedPublication));

        final Map<String, String> publishingRecord = Maps.newHashMap();
        publishingRecord.put("assessmentId", newAssessment.getId());
        final SearchResponse<ScoringRule> response = callGETRestService(BASE_URL + buildQueryString(publishingRecord), SearchResponse.class);
        assertThat(response.getReturnCount(), is(equalTo(1)));
        assertThat(1, is(equalTo(response.getSearchResults().size())));
    }

    @ApiDocExample(rank = 3)
    @Test
    public void savePublishingRecordTest() throws InterruptedException {
        when(this.progManClient.getTenantById(Mockito.anyString())).thenReturn(this.tenant1);
        when(this.testSpecBankClient.publishTestSpecification((TestSpecBankClientObj) Mockito.anyObject())).thenReturn(new TestSpecBankClientObj());

        this.savedPublishingRecord = callGETRestService(BASE_URL + "/current/" + this.savedAssessment.getId(), PublishingRecord.class);
        final PublishingRecord returnedPublishingRecord = callPUTRestService(BASE_URL + "/" + this.savedPublishingRecord.getId(), buildParamObject(this.savedPublishingRecord), PublishingRecord.class);

        assertThat(returnedPublishingRecord, is(notNullValue()));
    }

    @ApiDocExample(rank = 4)
    @SuppressWarnings("unchecked")
    @Test
    public void getPublishingStatusTypes() throws InterruptedException {
        final List<PublishingStatus> publishingStatusTypes = callGETRestService(BASE_URL + "/publishingStatusTypes", List.class);
        assertThat(publishingStatusTypes, is(notNullValue()));
        assertThat(publishingStatusTypes.size(), is(PublishingStatus.values().length));
    }

    @ApiDocExample(rank = 5)
    @Test
    public void simulateRegistration() throws InterruptedException {
        when(this.progManClient.getTenantById(Mockito.anyString())).thenReturn(this.tenant1);

        final ResponseEntity<byte[]> response = callGETResponseEntityRestService(BASE_URL + "/" + this.savedPublishingRecord.getId() + "/simulate?purpose=REGISTRATION");
        assertThat(response, is(notNullValue()));
    }

    @ApiDocExample(rank = -1)
    @Test
    public void simulateAdministration() throws InterruptedException {
        when(this.progManClient.getTenantById(Mockito.anyString())).thenReturn(this.tenant1);

        final ResponseEntity<byte[]> response = callGETResponseEntityRestService(BASE_URL + "/" + this.savedPublishingRecord.getId() + "/simulate?purpose=ADMINISTRATION");

        assertThat(response, is(notNullValue()));
    }

    @ApiDocExample(rank = -1)
    @Test
    public void simulateComplete() throws InterruptedException {
        when(this.progManClient.getTenantById(Mockito.anyString())).thenReturn(this.tenant1);

        saveGoodMinimalPerformanceLevelData();
        final ScoringRule scoringRule = saveGoodMinimalScoringRuleData();
        saveGoodMinimalReportingMeasureData(scoringRule);

        final ResponseEntity<byte[]> response = callGETResponseEntityRestService(BASE_URL + "/" + this.savedPublishingRecord.getId() + "/simulate?purpose=COMPLETE");

        assertThat(response, is(notNullValue()));
        // try {
        // final XPathFactory factory = XPathFactory.newInstance();
        // final XPath xpath = factory.newXPath();
        //
        // final DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
        // DocumentBuilder docBuilder;
        // final XPathExpression expression = xpath.compile("/testspecification/administration/itempool/text()");
        //
        // docBuilder = docBuilderFactory.newDocumentBuilder();
        // final String xmlString = new String(response.getBody());
        // System.out.println(xmlString.substring(1, xmlString.length() - 1));
        // final byte[] justTheXmlMaam = response.getBody();
        // final Document document = docBuilder.parse(new ByteArrayInputStream(justTheXmlMaam));
        //
        // final String result = (String) expression.evaluate(document, XPathConstants.STRING);
        //
        // System.out.println("STRING: " + result);
        //
        // final NodeList resultNL = (NodeList) expression.evaluate(document, XPathConstants.NODESET);
        //
        // for (int i = 0; i < resultNL.getLength(); i++) {
        // System.out.println("NODE[" + i + "]: " + resultNL.item(i).getTextContent());
        // }
        //
        // } catch (ParserConfigurationException | SAXException | IOException | XPathExpressionException e) {
        // e.printStackTrace(System.out);
        // fail("XPath parsing failed");
        // }
    }

    private ResponseEntity<byte[]> callGETResponseEntityRestService(final String uri) {
        ResponseEntity<byte[]> object = null;
        try {
            final MockHttpServletRequestBuilder get = get(uri);
            final MvcResult result = this.mockMvc.perform(get).andExpect(status().isOk()).andReturn();
            final byte[] responseGet = result.getResponse().getContentAsByteArray();
            if (responseGet != null && responseGet.length > 1) {
                object = new ResponseEntity<byte[]>(responseGet, HttpStatus.OK);
            }
        } catch (final Exception e) {
            throw new RestException("error int callGETResponseEntityRestService " + uri, e);
        }
        return object;
    }

    private void saveGoodMinimalSegmentAndItemData() {
        final Segment savedSegment = this.segmentService.createSegment(DomainFactory.manufactureValidSegment(this.savedAssessment.getId(), this.savedAlgorithm, 1));
        final Item item = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        item.setId(null);
        final List<ItemLocation> itemLocationList = Lists.newArrayList();
        itemLocationList.add(new AdaptiveItemLocation(savedSegment.getId(), null));
        item.setItemLocation(itemLocationList);
        this.itemService.saveItem(item);
    }

    private void saveGoodMinimalBlueprintData() {
        final List<Segment> segments = this.segmentService.findSegmentListByAssessmentId(this.savedAssessment.getId());
        this.segmentService.loadReferenceData(segments);
        final BlueprintElement bpe = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), segments);
        bpe.setGrade(this.savedAssessment.getGrade()[0]);
        bpe.setLevel("1");
        bpe.setStandardKey("CC-ELA-v1");
        bpe.setTextDescription("textDescription");
        bpe.setActive(true);
        this.blueprintElementService.saveBlueprintElement(null, bpe);
    }

    private ScoringRule saveGoodMinimalScoringRuleData() {
        final ComputationRule computationRule = new ComputationRule();
        computationRule.setConversionTableType(ConversionTableType.NONE);
        computationRule.setName("name");
        computationRule.setVersion("1.0");
        final ComputationRuleParameter computationRuleParameter = new ComputationRuleParameter();
        computationRuleParameter.setParameterName("parameterName");
        computationRuleParameter.setComputationRuleType(ComputationRuleType.STRING);
        computationRuleParameter.setDefaultValue("defaultValue");
        computationRuleParameter.setComputationRuleMultiplicityType(ComputationRuleMultiplicityType.SCALAR);
        computationRuleParameter.setPosition(1);
        computationRule.setParameters(ImmutableList.of(computationRuleParameter));
        final ComputationRule savedComputationRule = this.computationRuleService.createComputationRule(computationRule);
        final ScoringRule scoringRule = new ScoringRule();
        scoringRule.setAssessmentId(this.savedAssessment.getId());
        scoringRule.setLabel("label");
        scoringRule.setOrder(1);
        scoringRule.setComputationRuleId(savedComputationRule.getId());
        scoringRule.setBlueprintReferenceType(BlueprintReferenceType.SEGMENT);
        final Segment savedSegment = this.segmentService.searchSegments(TestAuthUtil.searchParamsByAssessmentIdSmall(this.savedAssessment.getId())).getSearchResults().get(0);
        scoringRule.setBlueprintReferenceId(savedSegment.getId());
        final ScoringRuleParameter scoringRuleParameter = new ScoringRuleParameter();
        scoringRuleParameter.setComputationRuleParameterName(computationRuleParameter.getParameterName());
        scoringRuleParameter.setComputationRuleParameterMultiplicity(ComputationRuleMultiplicityType.SCALAR);
        scoringRuleParameter.setScalarValue("scalarValue");
        scoringRule.setParameters(ImmutableList.of(scoringRuleParameter));
        return this.scoringRuleService.saveScoringRule(null, scoringRule);
    }

    private void saveGoodMinimalPerformanceLevelData() {
        final PerformanceLevel performanceLevel = DomainFactory.manufactureValidPerformanceLevel(this.savedAssessment.getId());
        this.performanceLevelService.savePerformanceLevel(null, performanceLevel);
    }

    private void saveGoodMinimalReportingMeasureData(final ScoringRule scoringRule) {
        final ReportingMeasure reportingMeasure = manufactureValidReportingMeasure(this.savedAssessment.getId(), scoringRule);
        this.reportingMeasureService.saveReportingMeasure(null, reportingMeasure);
    }

    private ReportingMeasure manufactureValidReportingMeasure(final String assessmentId, final ScoringRule scoringRule) {
        final ReportingMeasure reportingMeasure = new ReportingMeasure();
        reportingMeasure.setId(null);
        reportingMeasure.setBlueprintReferenceType(scoringRule.getBlueprintReferenceType());
        reportingMeasure.setBlueprintReferenceId(scoringRule.getBlueprintReferenceId());
        reportingMeasure.setAssessmentId(assessmentId);
        reportingMeasure.setScoringRuleIdList(Lists.newArrayList(scoringRule.getId()));
        return reportingMeasure;
    }
}
