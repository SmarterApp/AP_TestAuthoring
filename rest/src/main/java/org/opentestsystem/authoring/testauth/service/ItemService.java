/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.service;

import java.util.List;
import java.util.Map;

import org.opentestsystem.authoring.testauth.domain.BlueprintElement;
import org.opentestsystem.authoring.testauth.domain.FixedFormItemLocation;
import org.opentestsystem.authoring.testauth.domain.Item;
import org.opentestsystem.authoring.testauth.domain.ItemCountSummary;
import org.opentestsystem.authoring.testauth.domain.ItemLocation;
import org.opentestsystem.authoring.testauth.domain.ItemMoveRequest;
import org.opentestsystem.authoring.testauth.domain.ItemMoveResponse;
import org.opentestsystem.authoring.testauth.domain.Segment;
import org.opentestsystem.authoring.testauth.domain.TibImportResult;
import org.opentestsystem.authoring.testauth.domain.ValidationResult;
import org.opentestsystem.authoring.testauth.domain.search.ItemSearchRequest;
import org.opentestsystem.authoring.testitembank.client.TibItem;
import org.opentestsystem.shared.search.domain.SearchResponse;

public interface ItemService {

    Item getItem(String itemId);

    List<Item> getItems();

    TibImportResult importItemsFromTib(String targetSegmentId, String targetformPartitionId, String targetItemGroupId, Map<String, String[]> params);

    TibImportResult importTibItemsToSegment(String segementId, String groupId, List<TibItem> tibItems);

    TibImportResult importTibItemsToFormPartition(String partitionId, String groupId, List<TibItem> tibItems);

    List<Item> getItemsByAssessmentId(String assessmentId);

    List<Item> getItemsBySegmentId(String segmentId);

    Item getItemByAssessmentIdAndTibIdentifier(String assessmentId, String tibIdentifier);

    List<Item> getItemsByItemGroupId(String itemGroupId);

    List<Item> getItemsByFormPartitionId(String partitionId);

    List<Item> getItemsByAffinityGroupId(String id);

    /**
     * Finds the first 20 distinct (based on 'tibIdentifier' field) items by assessment while filtering
     * by searchVal (tibIdentifier/description). Items will be sorted by tibIdentifier field.
     * 
     * @param assessmentId - assessment to search items for
     * @param searchVal - a string to match the Item tibIdentifier/description on (NULL = any tibIdentifier/primaryStandard)
     * @return List of Item objects.
     */
    List<Item> getFirst20DistinctItemsByAssessmentIdAndSearchVal(String assessmentId, String searchVal);

    Map<String, Map<String, ItemCountSummary>> getSegmentItemCounts(String segmentId);

    SearchResponse<Item> searchItems(ItemSearchRequest searchRequest);

    long searchItemCounts(Map<String, String[]> parameterMap);

    Item saveItem(Item item);

    List<Item> saveItemList(List<Item> items);

    void removeItem(String itemId);

    void removeByAssessmentId(String assessmentId);

    void removeBySegmentId(String segmentId);

    void removeByItemGroupId(String itemGroupId);

    void removeByAffinityGroupId(String affinityGroupId);

    void autoSortFormPartitionItems(String assessmentId, String formPartitionId);

    List<FixedFormItemLocation> getItemLocationsOnPartition(String formPartitionId, List<Item> items);

    void updateItemLocationSortingInformation(String assessmentId, List<Item> itemsOnPartition, List<FixedFormItemLocation> itemLocationList);

    void updateItemLocationForPartition(String formPartitionId, List<FixedFormItemLocation> itemLocationList);

    ItemMoveResponse moveSegmentPoolItems(final String assessmentId, final ItemMoveRequest moveRequest);

    ItemMoveResponse moveFormPartitionItems(final String assessmentId, final ItemMoveRequest moveRequest);

    ItemMoveResponse moveItems(final String assessmentId, final ItemLocation source, final ItemLocation target, List<String> itemIdsToMove);

    ItemMoveResponse removeFormPartitionItems(final String assessmentId, final ItemMoveRequest moveRequest);

    ItemMoveResponse removeSegmentPoolItems(final String assessmentId, final ItemMoveRequest moveRequest);

    ItemMoveResponse removeItemsFromLocation(final String assessmentId, final ItemLocation removeMe, List<String> itemIdsToRemove);

    List<ValidationResult<Segment>> validateItemPools(String assessmentId);

    boolean hasLocation(Item item, ItemLocation location);

    /**
     * Accumulates a map relating each form partition id in the assessment to a map of blueprint standards to item count summaries. That is:<br/>
     * <code>{ formPartitionId : { blueprintElement : itemCountSummary } }</code>
     * 
     * @param assessmentId
     * @return item count map
     */
    Map<String, Map<BlueprintElement, ItemCountSummary>> getFormPartitionStandardItemCounts(String assessmentId);

    /**
     * Accumulates a map relating each adaptive/fieldtest segment id in the assessment to a map of blueprint standards to item count summaries. That is:<br/>
     * <code>{ segmentId : { blueprintElement : itemCountSummary } }</code>
     * 
     * @param assessmentId
     * @return item count map
     */
    Map<String, Map<BlueprintElement, ItemCountSummary>> getAdaptiveSegmentStandardItemCounts(String assessmentId);

    Map<String, ItemCountSummary> getAffinityGroupItemCounts(String affinityGroupId);

    /**
     * Accumulates a map relating each affinity group id in the assessment to a map of segment item counts. That is:<br/>
     * <code>{ affinityGroupId : { segmentId : itemCountSummary } }</code>
     * 
     * @param assessmentId
     * @return item count map
     */
    Map<String, Map<String, ItemCountSummary>> getAffinityGroupItemCountsByAssessment(String assessmentId);
}
