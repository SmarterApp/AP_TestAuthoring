/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.domain;

import static org.opentestsystem.authoring.testauth.config.TestAuthUtil.safeParseInt;

import java.io.Serializable;
import java.util.Map;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.springframework.data.mongodb.core.index.CompoundIndex;
import org.springframework.data.mongodb.core.index.CompoundIndexes;
import org.springframework.data.mongodb.core.mapping.Document;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

@Document
@JsonIgnoreProperties(ignoreUnknown = true)
@CompoundIndexes(value = { @CompoundIndex(name = "blueprint_element_indx", def = "{'assessmentId':1, 'standardKey':1, 'grade':1}", unique = true) })
public class BlueprintElement extends AssessmentChild implements Serializable, TenantedByAssessment {
    private static final long serialVersionUID = 1693202958911228485L;

    @NotNull(message = "blueprintElement.standard.required")
    private String standardKey;

    private String parentKey;

    @NotNull(message = "blueprintElement.level.required")
    private String level;

    @NotNull(message = "blueprintElement.grade.required")
    private String grade;

    private String textDescription;

    private boolean active;

    private String sortData;

    @Valid
    private Map<String, BlueprintElementValue> blueprintElementValueMap;

    public String getStandardKey() {
        return this.standardKey;
    }

    public void setStandardKey(final String aStandardKey) {
        this.standardKey = aStandardKey;
    }

    public String getParentKey() {
        return this.parentKey;
    }

    public void setParentKey(final String aParentKey) {
        this.parentKey = aParentKey;
    }

    public String getLevel() {
        return this.level;
    }

    public void setLevel(final String aLevel) {
        this.level = aLevel;
    }

    public String getGrade() {
        return this.grade;
    }

    public void setGrade(final String aGrade) {
        this.grade = aGrade;
    }

    public String getTextDescription() {
        return this.textDescription;
    }

    public void setTextDescription(final String aTextDescription) {
        this.textDescription = aTextDescription;
    }

    public boolean isActive() {
        return this.active;
    }

    public void setActive(final boolean isActive) {
        this.active = isActive;
    }

    public String getSortData() {
        return this.sortData;
    }

    public void setSortData(final String aSortData) {
        this.sortData = aSortData;
    }

    public Map<String, BlueprintElementValue> getBlueprintElementValueMap() {
        return this.blueprintElementValueMap;
    }

    public void setBlueprintElementValueMap(final Map<String, BlueprintElementValue> aBlueprintElementValueMap) {
        this.blueprintElementValueMap = aBlueprintElementValueMap;
    }

    public BlueprintElementValue getMasterValue() {
        final BlueprintElementValue master = new BlueprintElementValue(0, 0, 0, 0);

        if (blueprintElementValueMap != null) {
            for (final BlueprintElementValue segValue : blueprintElementValueMap.values()) {
                master.setOperationalItemMinValue(master.getOperationalItemMinValue() + safeParseInt(segValue.getOperationalItemMinValue()));
                master.setOperationalItemMaxValue(master.getOperationalItemMaxValue() + safeParseInt(segValue.getOperationalItemMaxValue()));
                master.setFieldTestItemMinValue(master.getFieldTestItemMinValue() + safeParseInt(segValue.getFieldTestItemMinValue()));
                master.setFieldTestItemMaxValue(master.getFieldTestItemMaxValue() + safeParseInt(segValue.getFieldTestItemMaxValue()));
            }
        }

        return master;
    }
    
    public String getElementTypeName()
    {
    	String name = null;
    	if(parentKey == null || parentKey.isEmpty())
    		name = "strand";
    	else 
    		name = "contentlevel";
		return name;
    	
    }
}
