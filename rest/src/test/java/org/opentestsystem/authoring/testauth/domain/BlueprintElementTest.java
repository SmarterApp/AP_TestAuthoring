/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.domain;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.MatcherAssert.assertThat;

import org.junit.Test;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Maps;

public class BlueprintElementTest {

    @Test
    public void equalsTest() {
        final BlueprintElement expected = createDummyBlueprintElement();
        final BlueprintElement actual = createDummyBlueprintElement();
        final BlueprintElement unexpected = createDummyBlueprintElement();
        unexpected.setAssessmentId("no-assess-id");

        assertThat(actual, is(equalTo(expected)));
        assertThat(actual, is(not(equalTo(unexpected))));
    }

    @Test
    public void toStringTest() {
        final BlueprintElement expected = createDummyBlueprintElement();
        final BlueprintElement actual = createDummyBlueprintElement();

        assertThat(actual.toString(), is(equalTo(expected.toString())));
    }

    @Test
    public void hashcodeTest() {
        final BlueprintElement expected = createDummyBlueprintElement();
        final BlueprintElement actual = createDummyBlueprintElement();

        assertThat(actual.hashCode(), is(equalTo(expected.hashCode())));
    }

    public static BlueprintElement createDummyBlueprintElement() {
        final BlueprintElement bpe = new BlueprintElement();
        bpe.setId("1");
        bpe.setAssessmentId("1");
        bpe.setStandardKey("standard1");
        bpe.setLevel("level");
        bpe.setGrade("1");
        bpe.setTextDescription("textDescription");
        bpe.setActive(true);

        final BlueprintElementValue bpev = new BlueprintElementValue();
        bpev.setOperationalItemMinValue(1);
        bpev.setOperationalItemMaxValue(15);
        bpev.setFieldTestItemMinValue(4);
        bpev.setFieldTestItemMaxValue(8);
        bpe.setBlueprintElementValueMap(Maps.newHashMap(ImmutableMap.of("MASTER", bpev)));

        return bpe;
    }
}
