/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.rest;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.Assert.fail;

import java.util.List;
import java.util.Map;

import org.apache.commons.lang.RandomStringUtils;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.Assessment;
import org.opentestsystem.authoring.testauth.domain.AssessmentType;
import org.opentestsystem.authoring.testauth.domain.DomainFactory;
import org.opentestsystem.authoring.testauth.domain.Publication;
import org.opentestsystem.authoring.testauth.domain.Subject;
import org.opentestsystem.authoring.testauth.service.PublicationService;
import org.opentestsystem.authoring.testauth.service.SubjectService;
import org.opentestsystem.shared.docs.annotation.ApiDocExample;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Maps;

public class AssessmentControllerTest extends AbstractRestEmbeddedMongoTest {

    private static final String BASE_URL = "/assessment";
    private static final String TENANT_ID = "12345";
    private Map<String, Object> assessmentParams;
    private Assessment savedAssessment;
    private String publicationId;
    private String subjectId;

    @Autowired
    private SubjectService subjectService;

    @Autowired
    private PublicationService publicationService;

    @ApiDocExample(rank = -1)
    @Before
    public void setupTestData() {
        final Subject subject = PODAM_FACTORY.manufacturePojo(Subject.class);
        subject.setId(null);
        subject.setAbbreviation("ABB");
        this.subjectId = this.subjectService.saveSubject(subject).getId();

        final Publication savedPublication = this.publicationService.savePublication(DomainFactory.manufactureValidPublication(subject.getTenantId(), ImmutableSet.of(subject)));
        this.publicationId = savedPublication.getId();
        this.assessmentParams = buildAssessmentMap(0);
        this.savedAssessment = callPOSTRestService(BASE_URL, this.assessmentParams, Assessment.class);
        assertThat(this.savedAssessment, is(notNullValue()));
    }

    @ApiDocExample(rank = 1)
    @SuppressWarnings("unchecked")
    @Test
    public void getAssessmentTypes() throws InterruptedException {
        final List<AssessmentType> types = callGETRestService(BASE_URL + "/type", List.class);
        assertThat(types, is(notNullValue()));
        assertThat(types.size(), is(AssessmentType.values().length));
    }

    @ApiDocExample(rank = 2)
    @Test
    public void findAssessment() throws InterruptedException {
        final Assessment fetchedAssessment = callGETRestService(BASE_URL + "/" + this.savedAssessment.getId(), Assessment.class);
        assertThat(fetchedAssessment, is(notNullValue()));
    }

    @SuppressWarnings("unchecked")
    @ApiDocExample(rank = 3)
    @Test
    public void searchAssessmentWithTenantOnly() {
        final Map<String, String> params = Maps.newHashMap();
        params.put("tenantId", TENANT_ID);
        final SearchResponse<Assessment> response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getReturnCount(), is(1));
        assertThat(response.getSearchResults().size(), is(1));
    }

    @SuppressWarnings("unchecked")
    @ApiDocExample(rank = 4)
    @Test
    public void searchAssessmentWithTenantAndName() {
        final Map<String, String> params = Maps.newHashMap();
        params.put("tenantId", TENANT_ID);
        params.put("label", "test0");
        final SearchResponse<Assessment> response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getReturnCount(), is(1));
        assertThat(response.getSearchResults().size(), is(1));
    }

    @ApiDocExample(rank = 5)
    @Test
    public void invalidAssessmentSearch() {
        final Map<String, String> params = Maps.newHashMap();
        params.put("name", "test1");
        final Map<String, List<String>> errorMessages = callInvalidGETRequest(BASE_URL + buildQueryString(params));
        assertThat(errorMessages.size(), is(1));
        assertApplicationErrorMessageReturned(errorMessages, "Tenant is required");
    }

    @ApiDocExample(rank = 6)
    @Test
    public void saveAssessment() throws InterruptedException {
        callPOSTRestService(BASE_URL, buildAssessmentMap(1), Assessment.class);
        assertThat(this.mongoTemplate.findAll(Assessment.class).size(), is(equalTo(2)));
    }

    @ApiDocExample(rank = 7)
    @Test
    public void updateAssessment() throws InterruptedException {
        this.assessmentParams.put("id", this.savedAssessment.getId());
        this.assessmentParams.put("description", "updated Assessment description");
        final Assessment updatedAssessment = callPUTRestService(BASE_URL + "/" + this.savedAssessment.getId(), this.assessmentParams, Assessment.class);
        assertThat(updatedAssessment, is(notNullValue()));
        assertThat(updatedAssessment.getDescription(), is(equalTo("updated Assessment description")));
    }

    @ApiDocExample(rank = 8)
    @Test
    public void removeAssessment() throws InterruptedException {
        try {
            callDeleteRestService(BASE_URL + "/" + this.savedAssessment.getId());
        } catch (final Exception e) {
            fail("Cannot delete assessment");
        }

        final Assessment fetchedAssessment = callGETRestService(BASE_URL + "/" + this.savedAssessment.getId(), Assessment.class);
        assertThat(fetchedAssessment, is(nullValue()));
    }

    @SuppressWarnings("unchecked")
    @ApiDocExample(rank = 9)
    @Test
    public void getAffinityGroupItemCounts() throws InterruptedException {
        try {
            final Map<String, Map<String, Long>> itemCounts = callGETRestService(BASE_URL + "/" + this.savedAssessment.getId() + "/affinityGroupItemCounts", Map.class);
            assertThat(itemCounts, is(not(nullValue())));
            assertThat(itemCounts.size(), is(0));

        } catch (final Exception e) {
            fail("Cannot get assessment item counts");
        }
    }

    @ApiDocExample(rank = -1)
    @SuppressWarnings("unchecked")
    @Test
    public void searchAssessments() {
        for (int i = 1; i < 11; i++) {
            callPOSTRestService(BASE_URL, buildAssessmentMap(i), Assessment.class);
        }

        final Map<String, String> params = Maps.newHashMap();
        params.put("tenantId", TENANT_ID);
        params.put("label", "test1");

        SearchResponse<Assessment> response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getReturnCount(), is(2));
        assertThat(response.getSearchResults().size(), is(2));

        params.clear();
        params.put("tenantId", TENANT_ID);
        params.put("label", "test3");
        response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getReturnCount(), is(1));
        assertThat(response.getSearchResults().size(), is(1));

        params.clear();
        params.put("tenantId", TENANT_ID);
        params.put("label", "invalid");
        response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getReturnCount(), is(0));
        assertThat(response.getSearchResults().size(), is(0));

        params.clear();
        params.put("tenantId", TENANT_ID);
        params.put("type", AssessmentType.FORMATIVE.getTitle());
        response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getReturnCount(), is(0));
        assertThat(response.getSearchResults().size(), is(0));

        params.clear();
        params.put("tenantId", TENANT_ID);
        params.put("type", AssessmentType.INTERIM.name());
        response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getReturnCount(), is(10));
        assertThat(response.getSearchResults().size(), is(10));

        params.clear();
        params.put("tenantId", TENANT_ID);
        params.put("label", "test");
        response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getReturnCount(), is(10));
        assertThat(response.getSearchResults().size(), is(10));

        params.clear();
        params.put("tenantId", TENANT_ID);
        response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getReturnCount(), is(10));
        assertThat(response.getSearchResults().size(), is(10));
    }

    private Map<String, Object> buildAssessmentMap(final int uniqueId) {
        final Assessment assessment = PODAM_FACTORY.manufacturePojo(Assessment.class);
        assessment.setId(null);
        assessment.setTenantId(TENANT_ID);
        assessment.setName("test" + uniqueId);
        assessment.setAdministration("administration" + uniqueId);
        assessment.setLocked(false);
        assessment.setLabel("test" + uniqueId);
        assessment.setPublicationId(this.publicationId);
        assessment.setSubjectId(this.subjectId);
        assessment.setType(AssessmentType.INTERIM);
        assessment.setVersion("1.0");
        return buildParamObject(assessment);
    }

    @ApiDocExample(rank = -1)
    @Test
    public void testValidationComment() {
        this.assessmentParams = buildAssessmentMap(0);

        final String bigString = RandomStringUtils.random(101);
        this.assessmentParams.put("comment", bigString);
        final Map<String, List<String>> data = callPOSTWithBadData(BASE_URL, this.assessmentParams);
        assertFieldLevelErrorMessageContains(data, "comment", "Comment maximum length is");

        this.assessmentParams.put("comment", RandomStringUtils.random(100));
        this.savedAssessment = callPOSTRestService(BASE_URL, this.assessmentParams, Assessment.class);

    }

    @ApiDocExample(rank = -1)
    @Test
    public void testValidationDescription() {
        this.assessmentParams = buildAssessmentMap(0);

        this.assessmentParams.put("description", RandomStringUtils.random(5001));
        final Map<String, List<String>> data = callPOSTWithBadData(BASE_URL, this.assessmentParams);
        assertFieldLevelErrorMessageContains(data, "description", "Description maximum length is");

        this.assessmentParams.put("description", "this assessment must never be administered for the good of humanity; the contents therein are an abomination and an affront to common decency");
        this.savedAssessment = callPOSTRestService(BASE_URL, this.assessmentParams, Assessment.class);

    }

    @ApiDocExample(rank = -1)
    @Test
    public void testValidationTestFamily() {
        this.assessmentParams = buildAssessmentMap(0);

        final String bigString = RandomStringUtils.random(101);
        this.assessmentParams.put("testFamily", bigString);
        final Map<String, List<String>> data = callPOSTWithBadData(BASE_URL, this.assessmentParams);
        assertFieldLevelErrorMessageContains(data, "testFamily", "Test Family maximum length is");

        this.assessmentParams.put("testFamily", RandomStringUtils.random(100));
        this.savedAssessment = callPOSTRestService(BASE_URL, this.assessmentParams, Assessment.class);

    }

    @ApiDocExample(rank = -1)
    @Test
    public void testValidationLabel() {
        this.assessmentParams = buildAssessmentMap(0);

        final String bigString = RandomStringUtils.randomAlphanumeric(101);
        this.assessmentParams.put("label", bigString);
        final Map<String, List<String>> data = callPOSTWithBadData(BASE_URL, this.assessmentParams);
        assertFieldLevelErrorMessageContains(data, "label", "Label maximum length is");

        this.assessmentParams.put("label", RandomStringUtils.randomAlphanumeric(100));
        this.savedAssessment = callPOSTRestService(BASE_URL, this.assessmentParams, Assessment.class);

    }

    @ApiDocExample(rank = -1)
    @Test
    public void testValidationAdministration() {
        this.assessmentParams = buildAssessmentMap(0);

        final String bigString = RandomStringUtils.randomAlphanumeric(31);
        this.assessmentParams.put("administration", bigString);
        final Map<String, List<String>> data = callPOSTWithBadData(BASE_URL, this.assessmentParams);
        assertFieldLevelErrorMessageContains(data, "administration", "Administration maximum length is");

        this.assessmentParams.put("administration", RandomStringUtils.randomAlphanumeric(30));
        this.savedAssessment = callPOSTRestService(BASE_URL, this.assessmentParams, Assessment.class);

    }

    @ApiDocExample(rank = -1)
    @Test
    public void testValidationCategory() {
        this.assessmentParams = buildAssessmentMap(0);

        final String bigString = RandomStringUtils.random(31);
        this.assessmentParams.put("category", bigString);
        final Map<String, List<String>> data = callPOSTWithBadData(BASE_URL, this.assessmentParams);
        assertFieldLevelErrorMessageContains(data, "category", "Category maximum length is");

        this.assessmentParams.put("category", RandomStringUtils.random(30));
        this.savedAssessment = callPOSTRestService(BASE_URL, this.assessmentParams, Assessment.class);

    }

}
