/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.domain;

import java.io.Serializable;
import java.util.List;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;
import org.hibernate.validator.constraints.NotBlank;
import org.springframework.data.annotation.Id;
import org.springframework.data.annotation.Transient;
import org.springframework.data.mongodb.core.index.CompoundIndex;
import org.springframework.data.mongodb.core.index.CompoundIndexes;
import org.springframework.data.mongodb.core.mapping.Document;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.google.common.collect.Iterables;
import com.google.common.collect.Lists;

@Document
@JsonIgnoreProperties(ignoreUnknown = true)
@CompoundIndexes(value = { @CompoundIndex(name = "computationRuleFunction_indx", def = "{'name':1, 'version':1}", unique = true) })
public class ItemSelectionAlgorithm implements Serializable {
    private static final long serialVersionUID = 1693202958911228485L;

    @Id
    private String id;

    private static final int NAME_LEN_MAX = 60;

    @NotBlank(message = "itemSelectionAlgorithm.name.required")
    @Size(max = NAME_LEN_MAX, message = "itemSelectionAlgorithm.name.length")
    private String name;

    @NotBlank(message = "itemSelectionAlgorithm.version.required")
    private String version;

    @NotNull(message = "itemSelectionAlgorithm.itemSelectionAlgorithmType.required")
    private ItemSelectionAlgorithmType itemSelectionAlgorithmType;

    @Valid
    private List<ItemSelectionAlgorithmParameter> parameters;

    @Transient
    private transient boolean canEdit;

    public String getId() {
        return this.id;
    }

    public void setId(final String anId) {
        this.id = anId;
    }

    public String getName() {
        return this.name;
    }

    public void setName(final String aName) {
        this.name = aName;
    }

    public String getVersion() {
        return this.version;
    }

    public void setVersion(final String aVersion) {
        this.version = aVersion;
    }

    public ItemSelectionAlgorithmType getItemSelectionAlgorithmType() {
        return this.itemSelectionAlgorithmType;
    }

    public void setItemSelectionAlgorithmType(final ItemSelectionAlgorithmType aItemSelectionAlgorithmType) {
        this.itemSelectionAlgorithmType = aItemSelectionAlgorithmType;
    }

    public List<ItemSelectionAlgorithmParameter> getParameters() {
        return this.parameters;
    }

    public void setParameters(final List<ItemSelectionAlgorithmParameter> parameterList) {
        this.parameters = parameterList == null ? null : ItemSelectionAlgorithmParameter.BY_POSITION_ORDERING.sortedCopy(parameterList);
    }

    public List<ItemSelectionAlgorithmParameter> getScalarParameters() {
        final List<ItemSelectionAlgorithmParameter> paramList = Lists.newArrayList();
        return this.parameters == null ? paramList : Lists.newArrayList(Iterables.filter(this.parameters, ItemSelectionAlgorithmHelper.ITEM_SELECTION_PARAM_SCALAR));
    }

    public List<ItemSelectionAlgorithmParameter> getBlueprintParameters() {
        final List<ItemSelectionAlgorithmParameter> paramList = Lists.newArrayList();
        return this.parameters == null ? paramList : Lists.newArrayList(Iterables.filter(this.parameters, ItemSelectionAlgorithmHelper.ITEM_SELECTION_PARAM_BLUEPRINT));
    }

    public boolean isCanEdit() {
        return this.canEdit;
    }

    public void setCanEdit(final boolean aCanEdit) {
        this.canEdit = aCanEdit;
    }

    /**
     * Trims the default, min, and max values of leading and trailing zeroes for each parameter in the algorithm. Should only be called after validation is successful.
     */
    public void trimParameterValues() {
        if (this.parameters != null) {
            for (final ItemSelectionAlgorithmParameter parameter : this.parameters) {
                parameter.trimValues();
            }
        }
    }

    @Override
    public boolean equals(final Object obj) {
        return EqualsBuilder.reflectionEquals(this, obj);
    }

    @Override
    public String toString() {
        return ToStringBuilder.reflectionToString(this, ToStringStyle.SHORT_PREFIX_STYLE);
    }

    @Override
    public int hashCode() {
        return HashCodeBuilder.reflectionHashCode(this);
    }
}
