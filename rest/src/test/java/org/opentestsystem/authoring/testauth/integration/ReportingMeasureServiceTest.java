/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.integration;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.Assert.fail;

import javax.validation.ConstraintViolationException;

import org.apache.commons.lang.RandomStringUtils;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.AffinityGroup;
import org.opentestsystem.authoring.testauth.domain.Assessment;
import org.opentestsystem.authoring.testauth.domain.BlueprintDenotationType;
import org.opentestsystem.authoring.testauth.domain.BlueprintElement;
import org.opentestsystem.authoring.testauth.domain.BlueprintReferenceType;
import org.opentestsystem.authoring.testauth.domain.ComputationRule;
import org.opentestsystem.authoring.testauth.domain.ComputationRuleMultiplicityType;
import org.opentestsystem.authoring.testauth.domain.ComputationRuleParameter;
import org.opentestsystem.authoring.testauth.domain.ComputationRuleType;
import org.opentestsystem.authoring.testauth.domain.ConversionTableType;
import org.opentestsystem.authoring.testauth.domain.DomainFactory;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionAlgorithm;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionPurpose;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionType;
import org.opentestsystem.authoring.testauth.domain.Publication;
import org.opentestsystem.authoring.testauth.domain.ReportingMeasure;
import org.opentestsystem.authoring.testauth.domain.ScoringRule;
import org.opentestsystem.authoring.testauth.domain.ScoringRuleParameter;
import org.opentestsystem.authoring.testauth.domain.Segment;
import org.opentestsystem.authoring.testauth.domain.Subject;
import org.opentestsystem.authoring.testauth.persistence.AssessmentRepository;
import org.opentestsystem.authoring.testauth.rest.AbstractRestEmbeddedMongoTest;
import org.opentestsystem.authoring.testauth.service.AffinityGroupService;
import org.opentestsystem.authoring.testauth.service.BlueprintElementService;
import org.opentestsystem.authoring.testauth.service.ComputationRuleService;
import org.opentestsystem.authoring.testauth.service.ItemSelectionAlgorithmService;
import org.opentestsystem.authoring.testauth.service.PublicationService;
import org.opentestsystem.authoring.testauth.service.ReportingMeasureService;
import org.opentestsystem.authoring.testauth.service.ScoringRuleService;
import org.opentestsystem.authoring.testauth.service.SegmentService;
import org.opentestsystem.authoring.testauth.service.SubjectService;
import org.opentestsystem.shared.exception.LocalizedException;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;

public class ReportingMeasureServiceTest extends AbstractRestEmbeddedMongoTest {

    @Autowired
    private ComputationRuleService computationRuleService;

    @Autowired
    private ScoringRuleService scoringRuleService;

    @Autowired
    private SubjectService subjectService;

    @Autowired
    private PublicationService publicationService;

    @Autowired
    private AssessmentRepository assessmentRepository;

    @Autowired
    private ItemSelectionAlgorithmService itemSelectionAlgorithmService;

    @Autowired
    private SegmentService segmentService;

    @Autowired
    private AffinityGroupService affinityGroupService;

    @Autowired
    private BlueprintElementService blueprintElementService;

    @Autowired
    private ReportingMeasureService reportingMeasureService;

    private Assessment savedAssessment;
    private ItemSelectionAlgorithm savedAlgorithm;
    private Segment savedSegment;
    private AffinityGroup savedAffinityGroup;
    private BlueprintElement savedBlueprintElement;
    private ComputationRule savedComputationRule;
    private ScoringRule savedScoringRule;
    private ScoringRule savedTestScoringRule;
    private ScoringRule savedAffinityGroupScoringRule;
    private ScoringRule savedStandardScoringRule;

    @Before
    public void setupTestData() {
        final Subject savedSubject = this.subjectService.saveSubject(DomainFactory.manufactureValidSubject("abb"));
        final Publication publication = DomainFactory.manufactureValidPublication(savedSubject.getTenantId(), ImmutableSet.of(savedSubject));
        final Publication savedPublication = this.publicationService.savePublication(publication);
        this.savedAssessment = this.assessmentRepository.save(DomainFactory.manufactureValidAssessment(savedSubject, savedPublication));

        final ItemSelectionAlgorithm algorithm = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.BOOLEAN);
        this.savedAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithm);

        final Segment segmentToSave = DomainFactory.manufactureValidSegment(this.savedAssessment.getId(), this.savedAlgorithm, 1);
        this.savedSegment = this.segmentService.createSegment(segmentToSave);

        final AffinityGroup affinityGroupToSave = DomainFactory.manufactureValidAffinityGroup(this.savedAssessment.getId());
        this.savedAffinityGroup = this.affinityGroupService.saveNewAffinityGroup(affinityGroupToSave);

        final BlueprintElement blueprintElementToSave = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), ImmutableList.of(this.savedSegment));
        blueprintElementToSave.setId(null);
        this.savedBlueprintElement = this.blueprintElementService.saveBlueprintElement(null, blueprintElementToSave);

        final ComputationRule computationRule = PODAM_FACTORY.manufacturePojo(ComputationRule.class);
        computationRule.setId(null);
        computationRule.setConversionTableType(ConversionTableType.NONE);
        computationRule.getParameters().clear();
        computationRule.setVersion("1.0");
        final ComputationRuleParameter computationRuleParameter = new ComputationRuleParameter();
        computationRuleParameter.setParameterName("parameter1");
        computationRuleParameter.setComputationRuleType(ComputationRuleType.STRING);
        computationRuleParameter.setDefaultValue("Q");
        computationRuleParameter.setComputationRuleMultiplicityType(ComputationRuleMultiplicityType.SCALAR);
        computationRuleParameter.setPosition(1);
        computationRule.getParameters().add(computationRuleParameter);
        this.savedComputationRule = this.computationRuleService.createComputationRule(computationRule);

        this.savedScoringRule = this.scoringRuleService.saveScoringRule(null, buildScoringRule(BlueprintReferenceType.SEGMENT, 1));
        this.savedTestScoringRule = this.scoringRuleService.saveScoringRule(null, buildScoringRule(BlueprintReferenceType.TEST, 2));
        this.savedAffinityGroupScoringRule = this.scoringRuleService.saveScoringRule(null, buildScoringRule(BlueprintReferenceType.AFFINITY_GROUP, 3));
        this.savedStandardScoringRule = this.scoringRuleService.saveScoringRule(null, buildScoringRule(BlueprintReferenceType.STANDARD, 4));
    }

    @Test
    public void saveNewReportingMeasureTest() {
        final ReportingMeasure reportingMeasureToSave = manufactureValidReportingMeasure();

        final ReportingMeasure savedReportingMeasure = this.reportingMeasureService.saveReportingMeasure(null, reportingMeasureToSave);
        assertThat(savedReportingMeasure, is(notNullValue()));

        final ReportingMeasure retrievedReportingMeasure = this.reportingMeasureService.getReportingMeasure(savedReportingMeasure.getId());
        assertThat(retrievedReportingMeasure, is(notNullValue()));
    }

    @Test
    public void saveNewReportingMeasureWithInvalidDataTest() {
        final ReportingMeasure reportingMeasureToSave = manufactureValidReportingMeasure();
        reportingMeasureToSave.setBlueprintReferenceId(null);
        reportingMeasureToSave.setBlueprintReferenceType(null);
        reportingMeasureToSave.setScoringRuleIdList(null);

        try {
            this.reportingMeasureService.saveReportingMeasure(null, reportingMeasureToSave);
            fail("exception should be thrown when trying to add a new reportingMeasure w/ invalid objectId1");
        } catch (final ConstraintViolationException e) {
            assertThat(e.getConstraintViolations().size(), is(2));
            assertThat(getConstraintViolation(e, "reportingMeasure.scoringRuleIdList.required").size(), is(1));
            assertThat(getConstraintViolation(e, "blueprintReferenceType.required").size(), is(1));
        }
    }

    @Test
    public void saveNewReportingMeasureAssessmentAlreadyLockedTest() {
        this.savedAssessment.setLocked(true);
        this.assessmentRepository.save(this.savedAssessment);

        final ReportingMeasure reportingMeasureToSave = manufactureValidReportingMeasure();
        try {
            this.reportingMeasureService.saveReportingMeasure(null, reportingMeasureToSave);
            fail("exception should be thrown when trying to save a new reportingMeasure after assessment is locked");
        } catch (final LocalizedException e) {
            assertThat(e.getMessage(), is("cannot.be.altered.assessment.locked"));
        }
    }

    @Test
    public void saveExistingReportingMeasureTest() {
        final ReportingMeasure reportingMeasureToSave = manufactureValidReportingMeasure();
        final ReportingMeasure savedReportingMeasure = this.reportingMeasureService.saveReportingMeasure(null, reportingMeasureToSave);

        savedReportingMeasure.setBlueprintReferenceType(BlueprintReferenceType.AFFINITY_GROUP);
        savedReportingMeasure.setBlueprintReferenceId(this.savedAffinityGroup.getId());
        savedReportingMeasure.setScoringRuleIdList(Lists.newArrayList(this.savedAffinityGroupScoringRule.getId()));

        final ReportingMeasure resavedReportingMeasure = this.reportingMeasureService.saveReportingMeasure(savedReportingMeasure.getId(), savedReportingMeasure);
        assertThat(resavedReportingMeasure, is(notNullValue()));
        assertThat(resavedReportingMeasure.getBlueprintReferenceType(), is(equalTo(BlueprintReferenceType.AFFINITY_GROUP)));
        assertThat(resavedReportingMeasure.getBlueprintReferenceId(), is(equalTo(this.savedAffinityGroup.getId())));
    }

    @Test
    public void saveDuplicateReportingMeasureTest() {
        final ReportingMeasure reportingMeasureToSave = manufactureValidReportingMeasure();
        final ReportingMeasure savedReportingMeasure = this.reportingMeasureService.saveReportingMeasure(null, reportingMeasureToSave);

        final ReportingMeasure duplicateReportingMeasure = this.reportingMeasureService.getReportingMeasure(savedReportingMeasure.getId());
        duplicateReportingMeasure.setId(null);

        try {
            this.reportingMeasureService.saveReportingMeasure(null, duplicateReportingMeasure);
            fail("should thow duplicate key exception");
        } catch (final LocalizedException e) {
            assertThat(e.getMessage(), is("reportingMeasure.already.exists"));
        }
    }

    @Test
    public void saveExistingReportingMeasureAssessmentAlreadyLockedTest() {
        final ReportingMeasure reportingMeasureToSave = manufactureValidReportingMeasure();
        final ReportingMeasure savedReportingMeasure = this.reportingMeasureService.saveReportingMeasure(null, reportingMeasureToSave);

        this.savedAssessment.setLocked(true);
        this.assessmentRepository.save(this.savedAssessment);

        savedReportingMeasure.setBlueprintReferenceType(BlueprintReferenceType.AFFINITY_GROUP);
        savedReportingMeasure.setBlueprintReferenceId(this.savedAffinityGroup.getId());
        try {
            this.reportingMeasureService.saveReportingMeasure(savedReportingMeasure.getId(), savedReportingMeasure);
            fail("exception should be thrown when trying to save an existing reportingMeasure after assessment is locked");
        } catch (final LocalizedException e) {
            assertThat(e.getMessage(), is("cannot.be.altered.assessment.locked"));
        }
    }

    @Test
    public void deleteReportingMeasureTest() {
        final ReportingMeasure reportingMeasureToSave = manufactureValidReportingMeasure();
        final ReportingMeasure savedReportingMeasure = this.reportingMeasureService.saveReportingMeasure(null, reportingMeasureToSave);

        this.reportingMeasureService.removeReportingMeasure(savedReportingMeasure.getId());

        final ReportingMeasure retreivedReportingMeasure = this.reportingMeasureService.getReportingMeasure(savedReportingMeasure.getId());
        assertThat(retreivedReportingMeasure, is(nullValue()));
    }

    @Test
    public void deleteReportingMeasureAssessmentAlreadyLockedTest() {
        final ReportingMeasure reportingMeasureToSave = manufactureValidReportingMeasure();
        final ReportingMeasure savedReportingMeasure = this.reportingMeasureService.saveReportingMeasure(null, reportingMeasureToSave);

        this.savedAssessment.setLocked(true);
        this.assessmentRepository.save(this.savedAssessment);

        try {
            this.reportingMeasureService.removeReportingMeasure(savedReportingMeasure.getId());
            fail("exception should be thrown when trying to delete an reportingMeasure after assessment is locked");
        } catch (final LocalizedException e) {
            assertThat(e.getMessage(), is("cannot.be.altered.assessment.locked"));
        }

        final ReportingMeasure retreivedReportingMeasure = this.reportingMeasureService.getReportingMeasure(savedReportingMeasure.getId());
        assertThat(retreivedReportingMeasure, is(notNullValue()));
    }

    @Test
    public void removeReportingMeasureByAssessmentIdTest() {
        final ReportingMeasure reportingMeasureToSave1 = manufactureValidReportingMeasure();
        final ReportingMeasure reportingMeasureToSave2 = buildValidReportingMeasure(BlueprintReferenceType.AFFINITY_GROUP);
        final ReportingMeasure reportingMeasureToSave3 = buildValidReportingMeasure(BlueprintReferenceType.TEST);
        final ReportingMeasure savedReportingMeasure1 = this.reportingMeasureService.saveReportingMeasure(null, reportingMeasureToSave1);
        final ReportingMeasure savedReportingMeasure2 = this.reportingMeasureService.saveReportingMeasure(null, reportingMeasureToSave2);
        final ReportingMeasure savedReportingMeasure3 = this.reportingMeasureService.saveReportingMeasure(null, reportingMeasureToSave3);

        this.reportingMeasureService.removeByAssessmentId(this.savedAssessment.getId());

        final ReportingMeasure retrievedReportingMeasure1 = this.reportingMeasureService.getReportingMeasure(savedReportingMeasure1.getId());
        assertThat(retrievedReportingMeasure1, is(nullValue()));

        final ReportingMeasure retrievedReportingMeasure2 = this.reportingMeasureService.getReportingMeasure(savedReportingMeasure2.getId());
        assertThat(retrievedReportingMeasure2, is(nullValue()));

        final ReportingMeasure retrievedReportingMeasure3 = this.reportingMeasureService.getReportingMeasure(savedReportingMeasure3.getId());
        assertThat(retrievedReportingMeasure3, is(nullValue()));
    }

    @Test
    public void searchReportingMeasures() {
        final ReportingMeasure reportingMeasureToSave1 = manufactureValidReportingMeasure();
        final ReportingMeasure reportingMeasureToSave2 = buildValidReportingMeasure(BlueprintReferenceType.AFFINITY_GROUP);
        final ReportingMeasure savedReportingMeasure1 = this.reportingMeasureService.saveReportingMeasure(null, reportingMeasureToSave1);
        final ReportingMeasure savedReportingMeasure2 = this.reportingMeasureService.saveReportingMeasure(null, reportingMeasureToSave2);

        SearchResponse<ReportingMeasure> searchResponse = this.reportingMeasureService.searchReportingMeasures(ImmutableMap.of("assessmentId", new String[] { "invalid-assessment-id" }));
        assertThat(searchResponse.getSearchResults().size(), is(0));

        searchResponse = this.reportingMeasureService.searchReportingMeasures(ImmutableMap.of("assessmentId", new String[] { this.savedAssessment.getId() }));
        assertThat(searchResponse.getSearchResults().size(), is(2));

        searchResponse = this.reportingMeasureService.searchReportingMeasures(ImmutableMap.of("blueprintReferenceId", new String[] { savedReportingMeasure1.getBlueprintReferenceId() }));
        assertThat(searchResponse.getSearchResults().size(), is(1));

        searchResponse = this.reportingMeasureService.searchReportingMeasures(ImmutableMap.of("blueprintReferenceId", new String[] { savedReportingMeasure2.getBlueprintReferenceId() }));
        assertThat(searchResponse.getSearchResults().size(), is(1));
    }

    @Test
    public void saveReportingMeasureWithReferenceIdNotMatchingAssessmentIdTest() {
        final ReportingMeasure reportingMeasureToSave = manufactureValidReportingMeasure();

        reportingMeasureToSave.setBlueprintReferenceType(BlueprintReferenceType.TEST);
        reportingMeasureToSave.setBlueprintReferenceId(RandomStringUtils.random(25));

        try {
            this.reportingMeasureService.saveReportingMeasure(null, reportingMeasureToSave);
            fail("should have thrown exception");
        } catch (final ConstraintViolationException e) {
            assertThat(e.getConstraintViolations().size(), is(2));
            assertThat(getConstraintViolation(e, "blueprintReferenceId.notfound").size(), is(1));
            assertThat(getConstraintViolation(e, "reportingMeasure.scoringRuleIdList.mismatch").size(), is(1));
        }
    }

    @Test
    public void saveReportingMeasureWithReferenceIdMatchingAssessmentIdTest() {
        final ReportingMeasure reportingMeasureToSave = manufactureValidReportingMeasure();

        reportingMeasureToSave.setBlueprintReferenceType(BlueprintReferenceType.TEST);
        reportingMeasureToSave.setBlueprintReferenceId(this.savedAssessment.getId());
        reportingMeasureToSave.setScoringRuleIdList(Lists.newArrayList(this.savedTestScoringRule.getId()));

        final ReportingMeasure savedReportingMeasure = this.reportingMeasureService.saveReportingMeasure(null, reportingMeasureToSave);
        assertThat(savedReportingMeasure, is(notNullValue()));
        final ReportingMeasure retrievedReportingMeasure = this.reportingMeasureService.getReportingMeasure(savedReportingMeasure.getId());
        assertThat(retrievedReportingMeasure, is(notNullValue()));
    }

    @Test
    public void saveReportingMeasureWithReferenceIdNotFoundSegmentIdTest() {
        final ReportingMeasure reportingMeasureToSave = manufactureValidReportingMeasure();

        reportingMeasureToSave.setBlueprintReferenceType(BlueprintReferenceType.SEGMENT);
        reportingMeasureToSave.setBlueprintReferenceId(RandomStringUtils.random(25));

        try {
            this.reportingMeasureService.saveReportingMeasure(null, reportingMeasureToSave);
            fail("should have thrown exception");
        } catch (final ConstraintViolationException e) {
            assertThat(e.getConstraintViolations().size(), is(2));
            assertThat(getConstraintViolation(e, "blueprintReferenceId.notfound").size(), is(1));
            assertThat(getConstraintViolation(e, "reportingMeasure.scoringRuleIdList.mismatch").size(), is(1));
        }
    }

    @Test
    public void saveReportingMeasureWithReferenceIdNotFoundAffinityGroupIdTest() {
        final ReportingMeasure reportingMeasureToSave = manufactureValidReportingMeasure();

        reportingMeasureToSave.setBlueprintReferenceType(BlueprintReferenceType.AFFINITY_GROUP);
        reportingMeasureToSave.setBlueprintReferenceId(RandomStringUtils.random(25));

        try {
            this.reportingMeasureService.saveReportingMeasure(null, reportingMeasureToSave);
            fail("should have thrown exception");
        } catch (final ConstraintViolationException e) {
            assertThat(e.getConstraintViolations().size(), is(2));
            assertThat(getConstraintViolation(e, "blueprintReferenceId.notfound").size(), is(1));
            assertThat(getConstraintViolation(e, "reportingMeasure.scoringRuleIdList.mismatch").size(), is(1));
        }
    }

    @Test
    public void saveReportingMeasureWithReferenceIdFoundAffinityGroupIdTest() {
        final ReportingMeasure reportingMeasureToSave = manufactureValidReportingMeasure();

        reportingMeasureToSave.setBlueprintReferenceType(BlueprintReferenceType.AFFINITY_GROUP);
        reportingMeasureToSave.setBlueprintReferenceId(this.savedAffinityGroup.getId());
        reportingMeasureToSave.setScoringRuleIdList(Lists.newArrayList(this.savedAffinityGroupScoringRule.getId()));

        final ReportingMeasure savedReportingMeasure = this.reportingMeasureService.saveReportingMeasure(null, reportingMeasureToSave);
        assertThat(savedReportingMeasure, is(notNullValue()));
        final ReportingMeasure retrievedReportingMeasure = this.reportingMeasureService.getReportingMeasure(savedReportingMeasure.getId());
        assertThat(retrievedReportingMeasure, is(notNullValue()));
    }

    @Test
    public void saveReportingMeasureWithReferenceIdNotFoundBlueprintElementIdTest() {
        final ReportingMeasure reportingMeasureToSave = manufactureValidReportingMeasure();

        reportingMeasureToSave.setBlueprintReferenceType(BlueprintReferenceType.STANDARD);
        reportingMeasureToSave.setBlueprintDenotationType(BlueprintDenotationType.STANDARD_KEY);
        reportingMeasureToSave.setBlueprintReferenceId(RandomStringUtils.random(25));

        try {
            this.reportingMeasureService.saveReportingMeasure(null, reportingMeasureToSave);
            fail("should have thrown exception");
        } catch (final ConstraintViolationException e) {
            assertThat(e.getConstraintViolations().size(), is(2));
            assertThat(getConstraintViolation(e, "blueprintReferenceId.notfound").size(), is(1));
            assertThat(getConstraintViolation(e, "reportingMeasure.scoringRuleIdList.mismatch").size(), is(1));
        }
    }

    @Test
    public void saveReportingMeasureWithReferenceIdFoundBlueprintElementIdTest() {
        final ReportingMeasure reportingMeasureToSave = manufactureValidReportingMeasure();

        reportingMeasureToSave.setBlueprintReferenceType(BlueprintReferenceType.STANDARD);
        reportingMeasureToSave.setBlueprintDenotationType(BlueprintDenotationType.STANDARD_KEY);
        reportingMeasureToSave.setBlueprintReferenceId(this.savedBlueprintElement.getId());
        reportingMeasureToSave.setScoringRuleIdList(Lists.newArrayList(this.savedStandardScoringRule.getId()));

        final ReportingMeasure savedReportingMeasure = this.reportingMeasureService.saveReportingMeasure(null, reportingMeasureToSave);
        assertThat(savedReportingMeasure, is(notNullValue()));
        final ReportingMeasure retrievedReportingMeasure = this.reportingMeasureService.getReportingMeasure(savedReportingMeasure.getId());
        assertThat(retrievedReportingMeasure, is(notNullValue()));
    }

    private ReportingMeasure manufactureValidReportingMeasure() {
        return buildValidReportingMeasure(BlueprintReferenceType.SEGMENT);
    }

    private ReportingMeasure buildValidReportingMeasure(final BlueprintReferenceType blueprintReferenceType) {
        final ReportingMeasure reportingMeasure = PODAM_FACTORY.manufacturePojo(ReportingMeasure.class);
        reportingMeasure.setId(null);
        reportingMeasure.setAssessmentId(this.savedAssessment.getId());
        reportingMeasure.setBlueprintReferenceType(blueprintReferenceType);
        switch (blueprintReferenceType) {
        case SEGMENT:
            reportingMeasure.setBlueprintReferenceId(this.savedSegment.getId());
            reportingMeasure.setScoringRuleIdList(Lists.newArrayList(this.savedScoringRule.getId()));
            break;
        case AFFINITY_GROUP:
            reportingMeasure.setBlueprintReferenceId(this.savedAffinityGroup.getId());
            reportingMeasure.setScoringRuleIdList(Lists.newArrayList(this.savedAffinityGroupScoringRule.getId()));
            break;
        case STANDARD:
            reportingMeasure.setBlueprintReferenceId(this.savedBlueprintElement.getId());
            reportingMeasure.setScoringRuleIdList(Lists.newArrayList(this.savedStandardScoringRule.getId()));
            break;
        case TEST:
            reportingMeasure.setBlueprintReferenceId(this.savedAssessment.getId());
            reportingMeasure.setScoringRuleIdList(Lists.newArrayList(this.savedTestScoringRule.getId()));
            break;
        default:
            break;
        }
        return reportingMeasure;
    }

    private ScoringRule buildScoringRule(final BlueprintReferenceType blueprintReferenceType, final int i) {
        final ScoringRule scoringRule = new ScoringRule();
        scoringRule.setAssessmentId(this.savedAssessment.getId());
        scoringRule.setLabel("label" + i);
        scoringRule.setOrder(i);
        scoringRule.setBlueprintReferenceType(blueprintReferenceType);
        switch (blueprintReferenceType) {
        case SEGMENT:
            scoringRule.setBlueprintReferenceId(this.savedSegment.getId());
            break;
        case AFFINITY_GROUP:
            scoringRule.setBlueprintReferenceId(this.savedAffinityGroup.getId());
            break;
        case STANDARD:
            scoringRule.setBlueprintDenotationType(BlueprintDenotationType.STANDARD_KEY);
            scoringRule.setBlueprintReferenceId(this.savedBlueprintElement.getId());
            break;
        case TEST:
            scoringRule.setBlueprintReferenceId(this.savedAssessment.getId());
            break;
        default:
            break;
        }
        scoringRule.setComputationRuleId(this.savedComputationRule.getId());
        scoringRule.setParameters(Lists.newArrayList(new ScoringRuleParameter("parameter1", ComputationRuleMultiplicityType.SCALAR, "soleString")));
        return scoringRule;
    }

}
