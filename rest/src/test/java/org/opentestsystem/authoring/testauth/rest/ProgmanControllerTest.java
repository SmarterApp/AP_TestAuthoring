/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.rest;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.junit.Test;
import org.opentestsystem.shared.progman.client.ProgManClient;
import org.opentestsystem.shared.progman.client.domain.Tenant;
import org.opentestsystem.shared.progman.client.domain.TenantType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort.Direction;

import com.google.common.collect.ImmutableList;

public class ProgmanControllerTest extends AbstractRestEmbeddedMongoTest {

    @Autowired
    private ProgManClient progManClient; // mocked client

    private final Tenant tenant1 = buildTenant("id1", "tenant1", "description1");
    private final Tenant tenant2 = buildTenant("id2", "tenant2", "description2");

    private final Pageable defaultPageable = new PageRequest(0, 10);

    @SuppressWarnings("unchecked")
    @Test
    public void findInGoodStandingTenantsByComponentIdNoResults() throws InterruptedException {
        when(this.progManClient.findTenantsByComponentAndSearchVal("component-name-123", null, null, null, this.defaultPageable)).thenReturn(new ArrayList<Tenant>());
        final List<Tenant> foundTenantList = callGETRestService("/progman/tenant/component/name/component-name-123", List.class);
        verify(this.progManClient).findTenantsByComponentAndSearchVal("component-name-123", null, null, null, this.defaultPageable);
        assertThat(foundTenantList.size(), is(0));
    }

    @SuppressWarnings("unchecked")
    @Test
    public void findInGoodStandingTenantsByComponentId() throws InterruptedException {
        when(this.progManClient.findTenantsByComponentAndSearchVal("component-name-123", true, "xxx", TenantType.STATE, this.defaultPageable)).thenReturn(ImmutableList.of(this.tenant1, this.tenant2));
        final List<Tenant> foundTenantList = callGETRestService("/progman/tenant/component/name/component-name-123?inGoodStanding=true&tenantType=STATE&searchVal=xxx", List.class);
        assertThat(foundTenantList.size(), is(2));
    }

    @SuppressWarnings("unchecked")
    @Test
    public void findInGoodStandingTenantsByComponentIdWithPagingParams() throws InterruptedException {
        when(this.progManClient.findTenantsByComponentAndSearchVal("123", null, null, null, new PageRequest(2, 5, Direction.DESC, "name"))).thenReturn(ImmutableList.of(this.tenant1, this.tenant2));
        final List<Tenant> foundTenantList = callGETRestService("/progman/tenant/component/name/123?page.page=3&page.size=5&page.sort=name&page.sort.dir=desc", List.class);
        assertThat(foundTenantList.size(), is(2));
    }

    @SuppressWarnings("unchecked")
    @Test
    public void findInGoodStandingTenantsByComponentIdWithPartialPagingParams() throws InterruptedException {
        when(this.progManClient.findTenantsByComponentAndSearchVal("123", null, null, null, new PageRequest(0, 10, Direction.DESC, "name"))).thenReturn(ImmutableList.of(this.tenant1, this.tenant2));
        final List<Tenant> foundTenantList = callGETRestService("/progman/tenant/component/name/123?page.sort=name&page.sort.dir=desc", List.class);
        assertThat(foundTenantList.size(), is(2));
    }

    @SuppressWarnings("unchecked")
    @Test
    public void findTenantTypes() throws InterruptedException {
        when(this.progManClient.getTenantTypes()).thenReturn(Arrays.asList(TenantType.values()));
        final List<TenantType> foundTypes = callGETRestService("/progman/tenantTypes", List.class);
        verify(this.progManClient).getTenantTypes();
        assertThat(foundTypes.size(), is(7));
    }
}
