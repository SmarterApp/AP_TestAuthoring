/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.integration;

import static org.hamcrest.CoreMatchers.containsString;
import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.Assert.fail;

import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.DomainFactory;
import org.opentestsystem.authoring.testauth.domain.ItemMetadataConfig;
import org.opentestsystem.authoring.testauth.persistence.ItemMetadataConfigRepository;
import org.opentestsystem.authoring.testauth.rest.AbstractRestEmbeddedMongoTest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DuplicateKeyException;

public class ItemMetadataConfigRepositoryTest extends AbstractRestEmbeddedMongoTest {

    @Autowired
    private ItemMetadataConfigRepository itemMetadataConfigRepository;

    @Test
    public void saveItemMetadataConfigTest() {
        final ItemMetadataConfig itemMetadataConfig = manufactureValidItemMetadataConfigPojo("1");
        final ItemMetadataConfig savedItemMetadataConfig = this.itemMetadataConfigRepository.save(itemMetadataConfig);
        assertThat(savedItemMetadataConfig, is(notNullValue()));
        assertThat(savedItemMetadataConfig.getId(), is(notNullValue()));
    }

    @Test
    public void saveDuplicateItemMetadataConfigTest() {
        final ItemMetadataConfig itemMetadataConfig = manufactureValidItemMetadataConfigPojo("1");
        this.itemMetadataConfigRepository.save(itemMetadataConfig);

        final ItemMetadataConfig duplicateItemMetadataConfig = manufactureValidItemMetadataConfigPojo("1");
        try {
            this.itemMetadataConfigRepository.save(duplicateItemMetadataConfig);
            fail("should have thrown exception");
        } catch (final DuplicateKeyException e) {
            assertThat(e.getMessage(), containsString("assessment_itemMetadataConfig_indx"));
        }
    }

    @Test
    public void findItemMetadataConfigTest() {
        final ItemMetadataConfig itemMetadataConfig = manufactureValidItemMetadataConfigPojo("1");
        final ItemMetadataConfig savedItemMetadataConfig = this.itemMetadataConfigRepository.save(itemMetadataConfig);

        final ItemMetadataConfig foundItemMetadataConfig = this.itemMetadataConfigRepository.findOne(savedItemMetadataConfig.getId());
        assertThat(savedItemMetadataConfig.getId(), is(equalTo(foundItemMetadataConfig.getId())));
        assertThat(savedItemMetadataConfig, is(equalTo(foundItemMetadataConfig)));
    }

    @Test
    public void findByAssessmentIdTest() {
        final ItemMetadataConfig itemMetadataConfig = DomainFactory.manufactureValidItemMetadataConfig("1", "itemMetadataField1", "itemMetadataField");
        final ItemMetadataConfig savedItemMetadataConfig1 = this.itemMetadataConfigRepository.save(itemMetadataConfig);

        final ItemMetadataConfig retrievedItemMetadataConfig = this.itemMetadataConfigRepository.findByAssessmentId("1");
        assertThat(retrievedItemMetadataConfig, is(equalTo(savedItemMetadataConfig1)));
    }

    @Test
    public void removeItemMetadataConfigTest() {
        final ItemMetadataConfig itemMetadataConfig = manufactureValidItemMetadataConfigPojo("1");
        final ItemMetadataConfig savedItemMetadataConfig = this.itemMetadataConfigRepository.save(itemMetadataConfig);

        this.itemMetadataConfigRepository.delete(itemMetadataConfig);
        final ItemMetadataConfig foundItemMetadataConfig = this.itemMetadataConfigRepository.findOne(savedItemMetadataConfig.getId());
        assertThat(foundItemMetadataConfig, is(nullValue()));
    }

    private ItemMetadataConfig manufactureValidItemMetadataConfigPojo(final String assessmentId) {
        return DomainFactory.manufactureValidItemMetadataConfig(assessmentId, "itemMetadataField1", "itemMetadataField2");
    }
}
