/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.validation;

import static org.opentestsystem.authoring.testauth.config.TestAuthUtil.paramArray;
import static org.opentestsystem.authoring.testauth.service.impl.ItemHelper.FT_OR_ADAPTIVE_SEGMENT_FILTER;

import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.opentestsystem.authoring.testauth.domain.BlueprintElement;
import org.opentestsystem.authoring.testauth.domain.ItemCountSummary;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionAlgorithmType;
import org.opentestsystem.authoring.testauth.domain.Segment;
import org.opentestsystem.authoring.testauth.domain.ValidationResult;
import org.opentestsystem.authoring.testauth.domain.search.ItemSearchRequest;
import org.opentestsystem.authoring.testauth.service.SegmentService;
import org.opentestsystem.authoring.testauth.service.impl.ItemCountHelper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Iterables;
import com.google.common.collect.Lists;

@Component
public final class ItemValidationHelper {

    private static final String FT_SEGMENT_ITEM_MSG = "Segment: %s is a field test (FT) segment but contains non-FT items.";
    private static final String BLUEPRINT_ITEM_COUNT_MSG = "Segment: %s contains too %s %s items (%s) for standard %s (grade %s).  The %s defined by the blueprint is %s.";

    @Autowired
    private SegmentService segmentService;
    @Autowired
    private ItemCountHelper itemCountHelper;

    public List<ValidationResult<Segment>> validateItemPools(final String assessmentId, final Map<String, Map<BlueprintElement, ItemCountSummary>> standardCounts) {
        final List<ValidationResult<Segment>> validationList = Lists.newArrayList();

        final List<Segment> allSegments = this.segmentService.findSegmentListByAssessmentId(assessmentId);
        this.segmentService.loadReferenceData(allSegments);

        for (final Segment segment : Iterables.filter(allSegments, FT_OR_ADAPTIVE_SEGMENT_FILTER)) {
            // validate FT segments do not contain OP items
            if (ItemSelectionAlgorithmType.FIELDTEST.equals(segment.getItemSelectionAlgorithm().getItemSelectionAlgorithmType())) {
                final long opItemCount = this.itemCountHelper.searchItems(new ItemSearchRequest(ImmutableMap.of("segmentId", paramArray(segment.getId()), "fieldTestItem", paramArray("false"))))
                        .getTotalCount();

                if (opItemCount > 0) {
                    validationList.add(new ValidationResult<Segment>(segment, String.format(FT_SEGMENT_ITEM_MSG, segment.getLabel())));
                }
            }

            // validate BP standard counts
            for (final Entry<BlueprintElement, ItemCountSummary> entry : standardCounts.get(segment.getId()).entrySet()) {
                final BlueprintElement standard = entry.getKey();
                final ItemCountSummary standardCount = entry.getValue();
                if (standardCount.getOpCount() < standardCount.getOpMin()) {
                    validationList.add(new ValidationResult<Segment>(segment, String.format(BLUEPRINT_ITEM_COUNT_MSG, segment.getLabel(), "few", "OP", standardCount.getOpCount(),
                            standard.getStandardKey(), standard.getGrade(), "minimum", standardCount.getOpMin()), ValidationResult.ERROR_LEVEL));
                }
                if (standardCount.getFtCount() < standardCount.getFtMin()) {
                    validationList.add(new ValidationResult<Segment>(segment, String.format(BLUEPRINT_ITEM_COUNT_MSG, segment.getLabel(), "few", "FT", standardCount.getFtCount(),
                            standard.getStandardKey(), standard.getGrade(), "minimum", standardCount.getFtMin()), ValidationResult.ERROR_LEVEL));

                }
            }
        }

        return validationList;
    }
}
