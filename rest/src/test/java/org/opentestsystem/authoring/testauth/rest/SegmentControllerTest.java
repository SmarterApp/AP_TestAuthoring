/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.rest;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;

import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.Assessment;
import org.opentestsystem.authoring.testauth.domain.DomainFactory;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionAlgorithm;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionPurpose;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionType;
import org.opentestsystem.authoring.testauth.domain.Publication;
import org.opentestsystem.authoring.testauth.domain.Segment;
import org.opentestsystem.authoring.testauth.domain.Subject;
import org.opentestsystem.authoring.testauth.service.AssessmentService;
import org.opentestsystem.authoring.testauth.service.ItemSelectionAlgorithmService;
import org.opentestsystem.authoring.testauth.service.PublicationService;
import org.opentestsystem.authoring.testauth.service.SegmentService;
import org.opentestsystem.authoring.testauth.service.SubjectService;
import org.opentestsystem.shared.docs.annotation.ApiDocExample;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.Maps;

public class SegmentControllerTest extends AbstractRestEmbeddedMongoTest {

    private static final String BASE_URL = "/segment";

    @Autowired
    private PublicationService publicationService;

    @Autowired
    private SubjectService subjectService;

    @Autowired
    private ItemSelectionAlgorithmService itemSelectionAlgorithmService;

    @Autowired
    private AssessmentService assessmentService;

    @Autowired
    private SegmentService segmentService;

    private Assessment savedAssessment;
    private ItemSelectionAlgorithm savedAlgorithm;
    private Segment savedSegment;

    @ApiDocExample(rank = -1)
    @Before
    public void setupTestData() {
        final Subject savedSubject = this.subjectService.saveSubject(DomainFactory.manufactureValidSubject("ABB"));
        final Publication savedPublication = this.publicationService.savePublication(PODAM_FACTORY.manufacturePojo(Publication.class));
        this.savedAssessment = this.assessmentService.saveAssessment(DomainFactory.manufactureValidAssessment(savedSubject, savedPublication));

        final ItemSelectionAlgorithm algorithm = DomainFactory.manufactureValidItemSelectionAlgorithm(ItemSelectionPurpose.SCALAR, ItemSelectionType.BOOLEAN);
        this.savedAlgorithm = this.itemSelectionAlgorithmService.createItemSelectionAlgorithm(algorithm);
        this.savedSegment = this.segmentService.createSegment(DomainFactory.manufactureValidSegment(this.savedAssessment.getId(), this.savedAlgorithm, 1));
    }

    @ApiDocExample(rank = 1)
    @Test
    public void saveSegment() throws InterruptedException {
        assertThat(this.mongoTemplate.findAll(Segment.class).size(), is(equalTo(1)));
        assertThat(this.savedSegment, is(notNullValue()));
    }

    @ApiDocExample(rank = 2)
    @Test
    public void updateSegment() throws InterruptedException {
        assertThat(this.savedSegment, is(notNullValue()));
        this.savedSegment.setMaxOpItems(921);
        final Segment updatedSegment = callPUTRestService(BASE_URL + "/" + this.savedSegment.getId(), buildParamObject(this.savedSegment), Segment.class);
        assertThat(updatedSegment, is(notNullValue()));
        assertThat(updatedSegment.getMaxOpItems(), is(equalTo(921)));
    }

    @ApiDocExample(rank = 3)
    @Test
    public void testRemoveSegment() throws InterruptedException {
        final Map<String, Object> segment = buildSegmentMap(2);
        final Segment savedSegment2 = callPOSTRestService(BASE_URL, segment, Segment.class);
        assertThat(savedSegment2, is(notNullValue()));
        assertThat(this.mongoTemplate.findAll(Segment.class).size(), is(equalTo(2)));

        callDeleteRestService(BASE_URL + "/" + this.savedSegment.getId());

        final Segment fetchedSegment = callGETRestService(BASE_URL + "/" + this.savedSegment.getId(), Segment.class);
        assertThat(fetchedSegment, is(nullValue()));

        final Segment fetchedSegment2 = callGETRestService(BASE_URL + "/" + savedSegment2.getId(), Segment.class);
        assertThat(fetchedSegment2, is(notNullValue()));
        assertThat(fetchedSegment2.getPosition(), is(1));
    }

    @ApiDocExample(rank = 4)
    @Test
    public void findSegment() throws InterruptedException {
        final Segment fetchedSegment = callGETRestService(BASE_URL + "/" + this.savedSegment.getId(), Segment.class);
        assertThat(fetchedSegment, is(notNullValue()));
    }

    @ApiDocExample(rank = 5)
    @SuppressWarnings("unchecked")
    @Test
    public void findSegments() throws InterruptedException {
        final SearchResponse<Segment> response = callGETRestService(BASE_URL, SearchResponse.class);
        assertThat(response.getSearchResults().size(), is(1));
    }

    @ApiDocExample(rank = -1)
    @SuppressWarnings("unchecked")
    @Test
    public void searchSegments() {
        for (int i = 2; i < 11; i++) {
            callPOSTRestService(BASE_URL, buildSegmentMap(i), Segment.class);
        }
        assertThat(this.mongoTemplate.findAll(Segment.class).size(), is(10));

        final Map<String, String> params = Maps.newHashMap();
        params.put("position", "10");

        SearchResponse<Segment> response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getReturnCount(), is(1));
        assertThat(response.getSearchResults().size(), is(1));

        params.clear();
        params.put("position", "3");
        response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getReturnCount(), is(1));
        assertThat(response.getSearchResults().size(), is(1));

        params.clear();
        params.put("position", "42");
        response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getReturnCount(), is(0));
        assertThat(response.getSearchResults().size(), is(0));

        params.clear();
        response = callGETRestService(BASE_URL + buildQueryString(params), SearchResponse.class);
        assertThat(response.getReturnCount(), is(10));
        assertThat(response.getSearchResults().size(), is(10));
    }

    private Map<String, Object> buildSegmentMap(final int uniqueId) {
        final Segment segment = DomainFactory.manufactureValidSegment(this.savedAssessment.getId(), this.savedAlgorithm, 1);
        segment.setPosition(uniqueId);
        segment.setMinFtItems(uniqueId);
        segment.setMaxFtItems(Integer.valueOf(1 + String.valueOf(uniqueId)));
        segment.setMinOpItems(uniqueId);
        segment.setMaxOpItems(Integer.valueOf(1 + String.valueOf(uniqueId)));
        return buildParamObject(segment);
    }
}
