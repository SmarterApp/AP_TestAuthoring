/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.validation;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.util.ArrayList;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.ComputationRuleMultiplicityType;
import org.opentestsystem.authoring.testauth.domain.ComputationRuleParameter;
import org.opentestsystem.authoring.testauth.domain.ComputationRuleType;
import org.opentestsystem.authoring.testauth.domain.ScoringRuleDictionaryElement;
import org.opentestsystem.authoring.testauth.domain.ScoringRuleParameter;
import org.springframework.validation.BeanPropertyBindingResult;
import org.springframework.validation.Errors;

public class ScoringRuleParameterValidatorTest {

    private final ScoringRuleParameterValidator validator = new ScoringRuleParameterValidator();
    private ScoringRuleParameter scoringRuleParameterScalar;
    private ScoringRuleParameter scoringRuleParameterDictionary;
    private Errors errors;

    @Before
    public void setup() {
        this.scoringRuleParameterScalar = new ScoringRuleParameter("p1", ComputationRuleMultiplicityType.SCALAR, "1");

        final ScoringRuleDictionaryElement scoringRuleDictionaryElement = new ScoringRuleDictionaryElement("x", "1");
        final List<ScoringRuleDictionaryElement> elements = new ArrayList<ScoringRuleDictionaryElement>();
        elements.add(scoringRuleDictionaryElement);
        this.scoringRuleParameterDictionary = new ScoringRuleParameter("p1", ComputationRuleMultiplicityType.DICTIONARY, elements);

        this.errors = new BeanPropertyBindingResult(this.scoringRuleParameterScalar, "");

    }

    @Test
    public void testValidateScalarBadInput() {
        final ComputationRuleParameter computationRuleParameterFail = manufactureComputationRuleParameter("sfp1", "0", "10", ComputationRuleType.INTEGER, ComputationRuleMultiplicityType.SCALAR, 0);
        this.scoringRuleParameterScalar.setScalarValue("X");
        this.validator.validate(this.scoringRuleParameterScalar, this.errors, new Object[] { computationRuleParameterFail });
        assertTrue(this.errors.hasErrors());
    }

    @Test
    public void testValidateScalarMinMax() {
        final ComputationRuleParameter computationRuleParameterPass = manufactureComputationRuleParameter("sfp1", "0", "10", ComputationRuleType.INTEGER, ComputationRuleMultiplicityType.SCALAR, 0);
        final ComputationRuleParameter computationRuleParameterFail = manufactureComputationRuleParameter("sfp1", "-10", "0", ComputationRuleType.INTEGER, ComputationRuleMultiplicityType.SCALAR, 0);
        this.validator.validate(this.scoringRuleParameterScalar, this.errors, new Object[] { computationRuleParameterPass });
        assertFalse(this.errors.hasErrors());
        this.validator.validate(this.scoringRuleParameterScalar, this.errors, new Object[] { computationRuleParameterFail });
        assertTrue(this.errors.hasErrors());
    }

    @Test
    public void testValidateScalarMinOnly() {
        final ComputationRuleParameter computationRuleParameterPass = manufactureComputationRuleParameter("sfp1", "0", "", ComputationRuleType.INTEGER, ComputationRuleMultiplicityType.SCALAR, 0);
        final ComputationRuleParameter computationRuleParameterFail = manufactureComputationRuleParameter("sfp1", "10", "", ComputationRuleType.INTEGER, ComputationRuleMultiplicityType.SCALAR, 0);
        this.validator.validate(this.scoringRuleParameterScalar, this.errors, new Object[] { computationRuleParameterPass });
        assertFalse(this.errors.hasErrors());
        this.validator.validate(this.scoringRuleParameterScalar, this.errors, new Object[] { computationRuleParameterFail });
        assertTrue(this.errors.hasErrors());
    }

    @Test
    public void testValidateScalarMaxOnly() {
        final ComputationRuleParameter computationRuleParameterPass = manufactureComputationRuleParameter("sfp1", "", "10", ComputationRuleType.INTEGER, ComputationRuleMultiplicityType.SCALAR, 0);
        final ComputationRuleParameter computationRuleParameterFail = manufactureComputationRuleParameter("sfp1", "", "0", ComputationRuleType.INTEGER, ComputationRuleMultiplicityType.SCALAR, 0);
        this.validator.validate(this.scoringRuleParameterScalar, this.errors, new Object[] { computationRuleParameterPass });
        assertFalse(this.errors.hasErrors());
        this.validator.validate(this.scoringRuleParameterScalar, this.errors, new Object[] { computationRuleParameterFail });
        assertTrue(this.errors.hasErrors());
    }

    @Test
    public void testValidateScalarNoBounds() {
        final ComputationRuleParameter computationRuleParameter = manufactureComputationRuleParameter("sfp1", "", "", ComputationRuleType.INTEGER, ComputationRuleMultiplicityType.SCALAR, 0);
        this.validator.validate(this.scoringRuleParameterScalar, this.errors, new Object[] { computationRuleParameter });
        assertFalse(this.errors.hasErrors());
        this.scoringRuleParameterScalar.setScalarValue("");
        this.validator.validate(this.scoringRuleParameterScalar, this.errors, new Object[] { computationRuleParameter });
        assertTrue(this.errors.hasErrors());
    }

    @Test
    public void testValidateDictionaryEmpty() {
        final ComputationRuleParameter computationRuleParameter = manufactureComputationRuleParameter("sfp1", "0", "10", ComputationRuleType.INTEGER, ComputationRuleMultiplicityType.SCALAR, 0);
        this.scoringRuleParameterDictionary.setDictionaryValue(new ArrayList<ScoringRuleDictionaryElement>());
        this.validator.validate(this.scoringRuleParameterDictionary, this.errors, new Object[] { computationRuleParameter });
        assertTrue(this.errors.hasErrors());
    }

    @Test
    public void testValidateDictionaryDuplicate() {
        final ComputationRuleParameter computationRuleParameter = manufactureComputationRuleParameter("sfp1", "0", "10", ComputationRuleType.INTEGER, ComputationRuleMultiplicityType.SCALAR, 0);
        final ScoringRuleDictionaryElement element = new ScoringRuleDictionaryElement("x", "1");
        this.scoringRuleParameterDictionary.getDictionaryValue().add(element);
        this.validator.validate(this.scoringRuleParameterDictionary, this.errors, new Object[] { computationRuleParameter });
        assertTrue(this.errors.hasErrors());
    }

    @Test
    public void testValidateDictionaryMinMax() {
        final ComputationRuleParameter computationRuleParameterPass = manufactureComputationRuleParameter("sfp1", "0", "10", ComputationRuleType.INTEGER, ComputationRuleMultiplicityType.SCALAR, 0);
        final ComputationRuleParameter computationRuleParameterFail = manufactureComputationRuleParameter("sfp1", "-10", "0", ComputationRuleType.INTEGER, ComputationRuleMultiplicityType.SCALAR, 0);
        this.validator.validate(this.scoringRuleParameterDictionary, this.errors, new Object[] { computationRuleParameterPass });
        assertFalse(this.errors.hasErrors());
        this.validator.validate(this.scoringRuleParameterDictionary, this.errors, new Object[] { computationRuleParameterFail });
        assertTrue(this.errors.hasErrors());
    }

    @Test
    public void testValidateDictionaryMinOnly() {
        final ComputationRuleParameter computationRuleParameterPass = manufactureComputationRuleParameter("sfp1", "0", "", ComputationRuleType.INTEGER, ComputationRuleMultiplicityType.SCALAR, 0);
        final ComputationRuleParameter computationRuleParameterFail = manufactureComputationRuleParameter("sfp1", "10", "", ComputationRuleType.INTEGER, ComputationRuleMultiplicityType.SCALAR, 0);
        this.validator.validate(this.scoringRuleParameterDictionary, this.errors, new Object[] { computationRuleParameterPass });
        assertFalse(this.errors.hasErrors());
        this.validator.validate(this.scoringRuleParameterDictionary, this.errors, new Object[] { computationRuleParameterFail });
        assertTrue(this.errors.hasErrors());
    }

    @Test
    public void testValidateDictionaryMaxOnly() {
        final ComputationRuleParameter computationRuleParameterPass = manufactureComputationRuleParameter("sfp1", "", "10", ComputationRuleType.INTEGER, ComputationRuleMultiplicityType.SCALAR, 0);
        final ComputationRuleParameter computationRuleParameterFail = manufactureComputationRuleParameter("sfp1", "", "0", ComputationRuleType.INTEGER, ComputationRuleMultiplicityType.SCALAR, 0);
        this.validator.validate(this.scoringRuleParameterDictionary, this.errors, new Object[] { computationRuleParameterPass });
        assertFalse(this.errors.hasErrors());
        this.validator.validate(this.scoringRuleParameterDictionary, this.errors, new Object[] { computationRuleParameterFail });
        assertTrue(this.errors.hasErrors());
    }

    @Test
    public void testValidateDictionaryNoBounds() {
        final ComputationRuleParameter computationRuleParameter = manufactureComputationRuleParameter("sfp1", "", "", ComputationRuleType.INTEGER, ComputationRuleMultiplicityType.SCALAR, 0);
        this.validator.validate(this.scoringRuleParameterDictionary, this.errors, new Object[] { computationRuleParameter });
        assertFalse(this.errors.hasErrors());
        this.scoringRuleParameterDictionary.getDictionaryValue().get(0).setValue("");
        this.validator.validate(this.scoringRuleParameterDictionary, this.errors, new Object[] { computationRuleParameter });
        assertTrue(this.errors.hasErrors());
    }

    private ComputationRuleParameter manufactureComputationRuleParameter(final String name, final String min, final String max, final ComputationRuleType compRuleType,
            final ComputationRuleMultiplicityType compRuleMultType, final Integer position) {
        final ComputationRuleParameter computationRuleParameter = new ComputationRuleParameter();
        computationRuleParameter.setParameterName(name);
        computationRuleParameter.setPosition(position);
        computationRuleParameter.setMinimumValue(min);
        computationRuleParameter.setMaximumValue(max);
        computationRuleParameter.setComputationRuleType(compRuleType);
        computationRuleParameter.setComputationRuleMultiplicityType(compRuleMultType);
        return computationRuleParameter;
    }

}
