/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.integration;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.HashMap;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.authoring.testauth.rest.AbstractRestEmbeddedMongoTest;
import org.opentestsystem.authoring.testitembank.client.TestItemBankClientInterface;
import org.springframework.beans.factory.annotation.Autowired;

public class TibClientTest extends AbstractRestEmbeddedMongoTest {

    private String responseList, filteredResponse;

    @Autowired
    private TestItemBankClientInterface tibClient;

    @Before
    public void testSetup() {
        this.responseList = "{\"items\": [{\"identifier\":\"SQA001\", \"url\":\"item/apipitem_SQA001\"}, {\"identifier\":\"SQA643\", \"url\":\"item/apipitem_SQA643\"}] }";
        this.filteredResponse = "{\"items\": [{\"identifier\":\"SQA001\", \"url\":\"item/apipitem_SQA001\"}] }";
    }

    @Test
    public void getAllItems() {
        final Map<String, String[]> params = new HashMap<String, String[]>();
        when(this.tibClient.getItems(params)).thenReturn(this.responseList);
        this.tibClient.getItems(params);
        assertThat(this.responseList.contains("SQA643"), is(true));
    }

    @Test
    public void getFilteredItems() {
        final Map<String, String[]> params = new HashMap<String, String[]>();
        params.put("identifier", new String[] { "SQA00" });

        when(this.tibClient.getItems(params)).thenReturn(this.filteredResponse);
        this.tibClient.getItems(params);
        verify(this.tibClient).getItems(params);

        assertThat(this.filteredResponse.contains("SQA001"), is(true));
    }
}
