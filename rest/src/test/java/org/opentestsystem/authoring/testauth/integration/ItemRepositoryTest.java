/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.integration;

import static org.hamcrest.CoreMatchers.containsString;
import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.Assert.fail;

import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.DomainFactory;
import org.opentestsystem.authoring.testauth.domain.Item;
import org.opentestsystem.authoring.testauth.persistence.ItemRepository;
import org.opentestsystem.authoring.testauth.rest.AbstractRestEmbeddedMongoTest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DuplicateKeyException;

public class ItemRepositoryTest extends AbstractRestEmbeddedMongoTest {

    @Autowired
    private ItemRepository itemRepository;

    @Test
    public void saveItemTest() {
        final Item item = PODAM_FACTORY.manufacturePojo(Item.class);
        final Item savedItem = this.itemRepository.save(item);
        assertThat(savedItem, is(notNullValue()));
        assertThat(savedItem.getId(), is(notNullValue()));
    }

    @Test
    public void saveDuplicateItemTest() {
        final Item item = PODAM_FACTORY.manufacturePojo(Item.class);
        this.itemRepository.save(item);

        final Item duplicateItem = item;
        duplicateItem.setId(null);
        try {
            this.itemRepository.save(duplicateItem);
            fail("should have thrown exception");
        } catch (final DuplicateKeyException e) {
            assertThat(e.getMessage(), containsString("assessment_item_indx"));
        }
    }

    @Test
    public void findItemTest() {
        final Item item = PODAM_FACTORY.manufacturePojo(Item.class);
        final Item savedItem = this.itemRepository.save(item);

        final Item foundItem = this.itemRepository.findOne(savedItem.getId());
        assertThat(savedItem.getId(), is(equalTo(foundItem.getId())));
        assertThat(savedItem, is(equalTo(foundItem)));
    }

    @Test
    public void removeItemTest() {
        final Item item = PODAM_FACTORY.manufacturePojo(Item.class);
        final Item savedItem = this.itemRepository.save(item);

        this.itemRepository.delete(item);
        final Item foundItem = this.itemRepository.findOne(savedItem.getId());
        assertThat(foundItem, is(nullValue()));
    }

    @Test
    public void testFindByAssessmentIdAndSearchVal() {
        setupTestItems();
        assertThat(this.itemRepository.findFirst20DistinctItemsByAssessmentIdAndSearchVal("assessment-1", "item-").size(), is(equalTo(4)));
        assertThat(this.itemRepository.findFirst20DistinctItemsByAssessmentIdAndSearchVal("assessment-1", "item-4").size(), is(equalTo(1)));
        assertThat(this.itemRepository.findFirst20DistinctItemsByAssessmentIdAndSearchVal("assessment-1", "nothing").size(), is(equalTo(0)));
    }

    private void setupTestItems() {
        final Item item = DomainFactory.manufactureValidItem("assessment-id");
        item.setAssessmentId("assessment-1");
        item.setTibIdentifier("item-1");
        this.itemRepository.save(item);

        final Item item2 = DomainFactory.manufactureValidItem("assessment-id");
        item2.setAssessmentId("assessment-1");
        item2.setTibIdentifier("item-2");
        this.itemRepository.save(item2);

        final Item item3 = DomainFactory.manufactureValidItem("assessment-id");
        item3.setAssessmentId("assessment-1");
        item3.setTibIdentifier("item-3");
        this.itemRepository.save(item3);

        final Item item4 = DomainFactory.manufactureValidItem("assessment-id");
        item4.setAssessmentId("assessment-1");
        item4.setTibIdentifier("item-4");
        this.itemRepository.save(item4);

        final Item item5 = DomainFactory.manufactureValidItem("assessment-id");
        item5.setAssessmentId("assessment-2");
        item5.setTibIdentifier("item-1");
        this.itemRepository.save(item5);
    }
}
