/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.rest;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.Assert.fail;

import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.ComputationRule;
import org.opentestsystem.authoring.testauth.domain.ComputationRuleMultiplicityType;
import org.opentestsystem.authoring.testauth.domain.ComputationRuleType;
import org.opentestsystem.authoring.testauth.domain.ConversionTableType;
import org.opentestsystem.authoring.testauth.domain.DictionaryIndexType;
import org.opentestsystem.shared.docs.annotation.ApiDocExample;
import org.opentestsystem.shared.search.domain.SearchResponse;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;

public class ComputationRuleControllerTest extends AbstractRestEmbeddedMongoTest {

    private static final String BASE_URL = "/computationRule";
    private Map<String, Object> computationRuleParams;
    private ComputationRule savedComputationRule;

    @ApiDocExample(rank = -1)
    @Before
    public void setupTestData() throws InterruptedException {
        this.computationRuleParams = buildComputationRuleMap(0);
        this.savedComputationRule = callPOSTRestService(BASE_URL, this.computationRuleParams, ComputationRule.class);
        assertThat(this.mongoTemplate.findAll(ComputationRule.class).size(), is(equalTo(1)));
        assertThat(this.savedComputationRule, is(notNullValue()));
    }

    @ApiDocExample(rank = 1)
    @Test
    public void findComputationRule() throws InterruptedException {
        final ComputationRule fetchedComputationRule = callGETRestService(BASE_URL + "/" + this.savedComputationRule.getId(), ComputationRule.class);
        assertThat(fetchedComputationRule, is(notNullValue()));
    }

    @ApiDocExample(rank = 2)
    @SuppressWarnings("unchecked")
    @Test
    public void findComputationRules() throws InterruptedException {
        final SearchResponse<ComputationRule> response = callGETRestService(BASE_URL, SearchResponse.class);
        assertThat(1, is(equalTo(response.getSearchResults().size())));
    }

    @ApiDocExample(rank = 3)
    @SuppressWarnings("unchecked")
    @Test
    public void searchComputationRuleByParentId() {
        final Map<String, String> computationRule = Maps.newHashMap();
        computationRule.put("name", "name-0");
        final SearchResponse<ComputationRule> response = callGETRestService(BASE_URL + buildQueryString(computationRule), SearchResponse.class);
        assertThat(response.getReturnCount(), is(equalTo(1)));
        assertThat(1, is(equalTo(response.getSearchResults().size())));
    }

    @ApiDocExample(rank = 4)
    @Test
    public void saveComputationRule() throws InterruptedException {
        this.computationRuleParams = buildComputationRuleMap(1);
        this.savedComputationRule = callPOSTRestService(BASE_URL, this.computationRuleParams, ComputationRule.class);
        assertThat(this.mongoTemplate.findAll(ComputationRule.class).size(), is(equalTo(2)));
        assertThat(this.savedComputationRule, is(notNullValue()));
    }

    @ApiDocExample(rank = 5)
    @Test
    public void updateComputationRule() throws InterruptedException {
        this.computationRuleParams.put("id", this.savedComputationRule.getId());
        this.computationRuleParams.put("name", "updated-name");
        final ComputationRule updatedComputationRule = callPUTRestService(BASE_URL + "/" + this.savedComputationRule.getId(), this.computationRuleParams,
                ComputationRule.class);
        assertThat(updatedComputationRule, is(notNullValue()));
        assertThat(updatedComputationRule.getName(), is(equalTo("updated-name")));
    }

    @ApiDocExample(rank = 6)
    @Test
    public void removeComputationRule() throws InterruptedException {
        try {
            callDeleteRestService(BASE_URL + "/" + this.savedComputationRule.getId());
        } catch (final Exception e) {
            fail("Cannot delete configuration");
        }

        final ComputationRule fetchedComputationRule = callGETRestService(BASE_URL + "/" + this.savedComputationRule.getId(), ComputationRule.class);
        assertThat(fetchedComputationRule, is(nullValue()));
    }

    @ApiDocExample(rank = 7)
    @SuppressWarnings("unchecked")
    @Test
    public void getComputationRuleTypes() throws InterruptedException {
        final List<ComputationRuleType> types = callGETRestService(BASE_URL + "/computationRuleTypes", List.class);
        assertThat(types, is(notNullValue()));
        assertThat(types.size(), is(ComputationRuleType.values().length));
    }

    @ApiDocExample(rank = 8)
    @SuppressWarnings("unchecked")
    @Test
    public void getComputationRuleMultiplicityTypes() throws InterruptedException {
        final List<ComputationRuleMultiplicityType> types = callGETRestService(BASE_URL + "/computationRuleMultiplicityTypes", List.class);
        assertThat(types, is(notNullValue()));
        assertThat(types.size(), is(ComputationRuleMultiplicityType.values().length));
    }

    @ApiDocExample(rank = 9)
    @SuppressWarnings("unchecked")
    @Test
    public void getDictionaryIndexTypes() throws InterruptedException {
        final List<DictionaryIndexType> types = callGETRestService(BASE_URL + "/dictionaryIndexTypes", List.class);
        assertThat(types, is(notNullValue()));
        assertThat(types.size(), is(DictionaryIndexType.values().length));
    }

    @ApiDocExample(rank = -1)
    @SuppressWarnings("unchecked")
    @Test
    public void searchComputationRules() {
        for (int i = 1; i < 11; i++) {
            callPOSTRestService(BASE_URL, buildComputationRuleMap(i), ComputationRule.class);
        }
        assertThat(this.mongoTemplate.findAll(ComputationRule.class).size(), is(equalTo(11)));

        final Map<String, String> computationRule = Maps.newHashMap();

        computationRule.put("name", "name-10");
        SearchResponse<ComputationRule> response = callGETRestService(BASE_URL + buildQueryString(computationRule), SearchResponse.class);
        assertThat(response.getReturnCount(), is(equalTo(1)));
        assertThat(1, is(equalTo(response.getSearchResults().size())));

        computationRule.put("name", "name-3");
        response = callGETRestService(BASE_URL + buildQueryString(computationRule), SearchResponse.class);
        assertThat(response.getReturnCount(), is(equalTo(1)));
        assertThat(response.getSearchResults().size(), is(equalTo(1)));

        computationRule.put("name", "invalid");
        response = callGETRestService(BASE_URL + buildQueryString(computationRule), SearchResponse.class);
        assertThat(response.getReturnCount(), is(equalTo(0)));
        assertThat(response.getSearchResults().size(), is(equalTo(0)));

        computationRule.put("name", "name-");
        // search pageable default size is 10
        response = callGETRestService(BASE_URL + buildQueryString(computationRule), SearchResponse.class);
        assertThat(response.getReturnCount(), is(equalTo(10)));
        assertThat(response.getSearchResults().size(), is(equalTo(10)));

        computationRule.clear();
        // search pageable default size is 10
        response = callGETRestService(BASE_URL + buildQueryString(computationRule), SearchResponse.class);
        assertThat(response.getReturnCount(), is(equalTo(10)));
        assertThat(response.getSearchResults().size(), is(equalTo(10)));
    }

    private Map<String, Object> buildComputationRuleMap(final int uniqueId) {
        final Map<String, Object> computationRule = Maps.newHashMap();
        computationRule.put("name", "name-" + String.valueOf(uniqueId));
        computationRule.put("version", "1.0");
        computationRule.put("conversionTableType", ConversionTableType.VALUE_STANDARD_ERROR);
        computationRule.put("description", "description-" + String.valueOf(uniqueId));

        final List<Map<String, Object>> parameterList = Lists.newArrayList();
        for (int i = 0; i < uniqueId + 1; i++) {
            final Map<String, Object> computationRuleParameter = Maps.newHashMap();
            computationRuleParameter.put("parameterName", "parameterName-" + String.valueOf(i));
            computationRuleParameter.put("computationRuleType", ComputationRuleType.FLOAT);
            computationRuleParameter.put("defaultValue", String.valueOf(i + 1));
            computationRuleParameter.put("minimumValue", String.valueOf(i));
            computationRuleParameter.put("maximumValue", String.valueOf(i + 2));
            computationRuleParameter.put("computationRuleMultiplicityType", ComputationRuleMultiplicityType.DICTIONARY);
            computationRuleParameter.put("dictionaryIndexType", DictionaryIndexType.INTEGER);
            computationRuleParameter.put("position", i + 1);
            parameterList.add(computationRuleParameter);
        }

        computationRule.put("parameters", parameterList);
        return computationRule;
    }
}
