/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.validation;

import org.opentestsystem.authoring.testauth.domain.AffinityGroup;
import org.opentestsystem.authoring.testauth.domain.AffinityGroupListPayload;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.validation.Errors;
import org.springframework.validation.ValidationUtils;

@Component
public class AffinityGroupListPayloadValidator extends AbstractDomainValidator
{
    private static final String ERROR_MSG_ROOT = "affinityGroupListPayload.";
    private static final String AFFINITY_GROUPS_FIELD = "affinityGroups";

    @Autowired
    private AffinityGroupValidator affinityGroupValidator;

    @Override
    public boolean supports(final Class<?> clazz) {
        return AffinityGroupListPayload.class.equals(clazz);
    }

    @Override
    public void validate(final Object obj, final Errors errors) {
        final AffinityGroupListPayload affinityGroupListPayload = (AffinityGroupListPayload) obj;

        for (int i = 0; i < affinityGroupListPayload.getAffinityGroups().size(); i++) {
            final AffinityGroup nextElement = affinityGroupListPayload.getAffinityGroups().get(i);
            try {
                errors.pushNestedPath(AFFINITY_GROUPS_FIELD + "[" + i + "]");
                ValidationUtils.invokeValidator(this.affinityGroupValidator, nextElement, errors);
            } finally {
                errors.popNestedPath();
            }
        }
    }

    @Override
    protected String getErrorMessageRoot() {
        return ERROR_MSG_ROOT;
    }
}
