/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.service.impl;

import java.lang.reflect.InvocationTargetException;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.apache.commons.beanutils.PropertyUtilsBean;
import org.apache.commons.lang.StringUtils;
import org.opentestsystem.authoring.testauth.domain.Assessment;
import org.opentestsystem.authoring.testauth.domain.Tenanted;
import org.opentestsystem.authoring.testauth.domain.TenantedByAssessment;
import org.opentestsystem.authoring.testauth.service.AssessmentService;
import org.opentestsystem.authoring.testauth.service.TenantEnforcementService;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.opentestsystem.shared.security.domain.SbacUser;
import org.opentestsystem.shared.security.service.UserService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;

@Service
public class TenantEnforcementServiceImpl implements TenantEnforcementService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TenantEnforcementServiceImpl.class);

    @Autowired
    private UserService userService;

    @Autowired
    private AssessmentService assessmentService;

    @Override
    public boolean enforceTenancyForObject(final Object verifyMe, final String[] permissionsToEnforce) {
        boolean ret = true;
        //scan object(s) for tenantIds
        Set<String> tenantIds = findTenantIds(verifyMe);
        if (CollectionUtils.isEmpty(tenantIds)){
            //go through object scanning for assessments
            ret = ensureTenancyForAssessmentIds(findAssociatedAssessmentIds(verifyMe), permissionsToEnforce);
        } else {
            //presence of tenantIds jump to validating rights for Tenants
            ret = ensureRightsForTenantIds(tenantIds, permissionsToEnforce);
        }
        return ret;
    }

    @SuppressWarnings("unchecked")
    private Set<String> findTenantIds(final Object verifyMe) {
        final Set<String> tenantIds = new HashSet<String>();
        if (verifyMe instanceof String) {
            //bare tenantID
            tenantIds.add((String)verifyMe);
        } else if (verifyMe instanceof Tenanted) {
            //single tenanted object
            tenantIds.add(((Tenanted)verifyMe).getTenantId());
        } else if (verifyMe instanceof SearchResponse<?>) {
            List<?> results = ((SearchResponse<?>)verifyMe).getSearchResults();
            if (!CollectionUtils.isEmpty(results) && results.get(0) instanceof Tenanted) {
                for (Tenanted tenanted : (List<Tenanted>)results) {
                    //search response full of tenanted objects
                    tenantIds.add(tenanted.getTenantId());
                }
            }
        }
        return tenantIds;
    }

    @Override
    public Set<String> findAssociatedAssessmentIds(final Object verifyMe) {
        Set<String> assessmentIds = new HashSet<String>();
        if (verifyMe != null) {
            if (verifyMe instanceof Collection) {
                Collection<?> collection = (Collection<?>) verifyMe;
                if (collection.size() > 0 && collection.iterator().next() instanceof TenantedByAssessment) {
                    for (Object obj : collection) {
                        assessmentIds.addAll(findAssociatedAssessmentIds(obj));
                    }
                }
            } else {
                if (verifyMe instanceof TenantedByAssessment) {
                    TenantedByAssessment obj = (TenantedByAssessment) verifyMe;
                    assessmentIds.add(obj.getAssessmentId());
                }
                PropertyUtilsBean pub = new PropertyUtilsBean();
                try {
                    Map<String, Object> properties = pub.describe(verifyMe);
                    for (Entry<String, Object> entry : properties.entrySet()) {
                        if (entry.getValue() != null && !(entry.getValue() instanceof Class)) {
                            assessmentIds.addAll(findAssociatedAssessmentIds(entry.getValue()));
                        }
                    }
                } catch (IllegalAccessException | NoSuchMethodException | InvocationTargetException e2) {
                    //at this point if a bad thing happens due to reflection, that's ok...swallow the exceptins.
                }
            }
        }
        return assessmentIds;
    }

    private boolean ensureTenancyForAssessmentIds(final Set<String> assessmentIds, final String[] permissionsToEnforce) {
        boolean valid = true;
        if (!CollectionUtils.isEmpty(assessmentIds)) {
            for (String assessmentId : assessmentIds) {
                LOGGER.debug("check tenancy rights for: " + assessmentId);
                if (!validateRightsForAssessment(assessmentId, permissionsToEnforce)) {
                    valid = false;
                }
            }
        }
        LOGGER.debug("has access :" + valid);
        return valid;
    }


    public boolean ensureRightsForTenantIds(final Set<String> tenantIds, final String[] permssions) {
        SbacUser user = userService.getCurrentUser();
        boolean validForAllTenants = true;
        if (tenantIds != null) {
            for (String tenantId : tenantIds) {

                boolean hasOne = false;
                if (!StringUtils.isEmpty(tenantId) && permssions != null) {
                    for (String permission : permssions) {
                        hasOne = hasOne || user.hasPermissionForTenant(permission,tenantId);
                    }
                }
                validForAllTenants = validForAllTenants && hasOne;
            }
        }
        return validForAllTenants;
    }

    public boolean validateRightsForAssessment(final String assessmentId, final String[] permssions) {
        boolean hasRights = true;
        if (assessmentId != null) {
            Assessment assessment = assessmentService.getAssessment(assessmentId);
            if (assessment != null) {
                hasRights = ensureRightsForTenantIds(new HashSet<String>(Arrays.asList(assessment.getTenantId())), permssions);
            }
        }
        return hasRights;
    }
}
