/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.integration;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.Assessment;
import org.opentestsystem.authoring.testauth.domain.Item;
import org.opentestsystem.authoring.testauth.domain.ItemGroup;
import org.opentestsystem.authoring.testauth.domain.ItemLocation;
import org.opentestsystem.authoring.testauth.domain.Segment;
import org.opentestsystem.authoring.testauth.domain.TibImportResult;
import org.opentestsystem.authoring.testauth.service.impl.ItemImportHelper;
import org.opentestsystem.authoring.testitembank.client.TibItem;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.ImmutableList;

public class ItemServiceAdaptiveTibImportsTest extends AbstractAssessmentServiceTest {

    private static final Random RANDOMIZER = new Random();
    private static final List<String> POSSIBLE_STATUSES = ImmutableList.of("Active", "Inactive", "OP", "FT");
    private static final List<String> EXPECTED_OP_STATUSES = ImmutableList.of("Active", "OP");
    
    @Autowired
    private ItemImportHelper itemImportHelper;

    private TibItem getTibItem(final String passageId, final String identifier) {
        final TibItem tibItem = PODAM_FACTORY.manufacturePojo(TibItem.class);
        tibItem.setAssociatedStimulus(passageId);
        tibItem.setIdentifier(identifier);

        final String pickedStatus = POSSIBLE_STATUSES.get(RANDOMIZER.nextInt(POSSIBLE_STATUSES.size()));
        tibItem.setStatus(pickedStatus);

        return tibItem;
    }

    @Test
    public void saveTibItems() {
        addAdaptiveItem(savedAdaptiveSegment.getId(), "APIP_5000", Item.NO_GROUP_KEY);
        addAdaptiveItem(savedAdaptiveSegment.getId(), "APIP_5001", Item.NO_GROUP_KEY);

        final ArrayList<TibItem> itemsToAdd = new ArrayList<TibItem>();
        itemsToAdd.add(getTibItem("", "APIP_5003"));
        itemsToAdd.add(getTibItem("", "APIP_5004"));
        itemsToAdd.add(getTibItem("", "APIP_5005"));

        final TibImportResult importResult = importTibItemsToSegment(savedAdaptiveSegment.getId(), null, itemsToAdd);
        assertThat(importResult.getItemsImported(), is(3));
        assertThat(importResult.getItemsOmitted(), is(0));
        assertNumberOfItemsInSegment(savedAdaptiveSegment, 5);

        final List<Item> foundItems = itemService.getItemsBySegmentId(savedAdaptiveSegment.getId());
        for (final Item item : foundItems) {
            for (final ItemLocation location : item.getAdaptiveAndFixedItemLocations()) {
                if (savedAdaptiveSegment.getId().equals(location.getSegmentId())) {
                    if (EXPECTED_OP_STATUSES.contains(item.getStatus())) {
                        assertThat(location.isFieldTestItem(), is(false)); // 'Active' or 'OP' status should map to OP
                    } else {
                        assertThat(location.isFieldTestItem(), is(true));
                    }
                }
            }
        }
    }

    @Test
    public void saveTibItemWithDuplicate() {
        addAdaptiveItem(savedAdaptiveSegment.getId(), "APIP_5000", Item.NO_GROUP_KEY);
        addAdaptiveItem(savedAdaptiveSegment.getId(), "APIP_5001", Item.NO_GROUP_KEY);
        addAdaptiveItem(savedAdaptiveSegment.getId(), "APIP_5002", Item.NO_GROUP_KEY);

        final ArrayList<TibItem> itemsToAdd = new ArrayList<TibItem>();
        itemsToAdd.add(getTibItem("", "APIP_5001"));
        itemsToAdd.add(getTibItem("", "APIP_5002"));

        final TibImportResult importResult = importTibItemsToSegment(savedAdaptiveSegment.getId(), null, itemsToAdd);
        assertThat(importResult.getItemsImported(), is(0));
        assertThat(importResult.getItemsOmitted(), is(2));
        assertNumberOfItemsInSegment(savedAdaptiveSegment, 3);
    }

    @Test
    public void saveTibItemReimportItems() {
        addAdaptiveItem(savedAdaptiveSegment.getId(), "APIP_5000", Item.NO_GROUP_KEY);
        addAdaptiveItem(savedAdaptiveSegment.getId(), "APIP_5001", Item.NO_GROUP_KEY);
        addAdaptiveItem(savedAdaptiveSegment.getId(), "APIP_5002", Item.NO_GROUP_KEY);

        final ArrayList<TibItem> itemsToAdd = new ArrayList<TibItem>();
        itemsToAdd.add(getTibItem(null, "APIP_5005"));
        itemsToAdd.add(getTibItem(null, "APIP_5006"));

        final TibImportResult importResult = importTibItemsToSegment(savedAdaptiveSegment.getId(), null, itemsToAdd);
        assertThat(importResult.getItemsImported(), is(2));
        assertThat(importResult.getItemsOmitted(), is(0));
        assertNumberOfItemsInSegment(savedAdaptiveSegment, 5);

        final TibImportResult importResult2 = importTibItemsToSegment(savedAdaptiveSegment.getId(), null, itemsToAdd);
        assertThat(importResult2.getItemsImported(), is(0));
        assertThat(importResult2.getItemsOmitted(), is(2));
        assertNumberOfItemsInSegment(savedAdaptiveSegment, 5);

        assertNumberOfItemGroupsInSegment(savedAdaptiveSegment, 0);
    }

    @Test
    public void saveTibItemDifferentGroup() {
        final ItemGroup group1 = addAdaptiveItemGroup(savedAssessment, savedAdaptiveSegment, "groupA");
        final ItemGroup group2 = addAdaptiveItemGroup(savedAssessment, savedAdaptiveSegment, "groupB");

        assertNumberOfItemGroupsInSegment(savedAdaptiveSegment, 2);

        addAdaptiveItem(savedAdaptiveSegment.getId(), "APIP_5000", group1.getId());
        addAdaptiveItem(savedAdaptiveSegment.getId(), "APIP_5001", group1.getId());
        addAdaptiveItem(savedAdaptiveSegment.getId(), "APIP_5002", group1.getId());

        final ArrayList<TibItem> itemsToAdd = new ArrayList<TibItem>();
        itemsToAdd.add(getTibItem(null, "APIP_5000"));
        itemsToAdd.add(getTibItem(null, "APIP_5001"));
        itemsToAdd.add(getTibItem(null, "APIP_5002"));

        final TibImportResult importResult = importTibItemsToSegment(savedAdaptiveSegment.getId(), group2.getId(), itemsToAdd);

        assertThat(importResult.getItemsImported(), is(3));
        assertThat(importResult.getItemsOmitted(), is(0));

        assertNumberOfItemsInSegment(savedAdaptiveSegment, 3);

        final List<Item> items = itemService.getItemsBySegmentId(savedAdaptiveSegment.getId());
        for (final Item i : items) {
            assertThat(i.getItemLocation().size(), is(2));
        }

        assertNumberOfItemGroupsInSegment(savedAdaptiveSegment, 2);
    }

    @Test
    public void saveTibItemSameGroup() {
        final ItemGroup group1 = addAdaptiveItemGroup(savedAssessment, savedAdaptiveSegment, "groupA");

        addAdaptiveItem(savedAdaptiveSegment.getId(), "APIP_5000", group1.getId());
        addAdaptiveItem(savedAdaptiveSegment.getId(), "APIP_5001", group1.getId());
        addAdaptiveItem(savedAdaptiveSegment.getId(), "APIP_5002", group1.getId());

        final ArrayList<TibItem> itemsToAdd = new ArrayList<TibItem>();
        itemsToAdd.add(getTibItem(null, "APIP_5000"));// flagged as dup
        itemsToAdd.add(getTibItem(null, "APIP_5001"));// flagged as dup
        itemsToAdd.add(getTibItem(null, "APIP_5002"));// flagged as dup
        itemsToAdd.add(getTibItem(null, "APIP_5003"));// this one will import

        final TibImportResult importResult = importTibItemsToSegment(savedAdaptiveSegment.getId(), group1.getId(), itemsToAdd);
        assertThat(importResult.getItemsImported(), is(1));
        assertThat(importResult.getItemsOmitted(), is(3));
        assertNumberOfItemsInSegment(savedAdaptiveSegment, 4);
    }

    @Test
    public void saveImportItemsTwiceWithSamePassageId() {
        final ItemGroup group1 = addAdaptiveItemGroup(savedAssessment, savedAdaptiveSegment, "groupA");

        assertNumberOfItemGroupsInSegment(savedAdaptiveSegment, 1);

        addAdaptiveItem(savedAdaptiveSegment.getId(), "APIP_5000", group1.getId());
        addAdaptiveItem(savedAdaptiveSegment.getId(), "APIP_5001", group1.getId());
        addAdaptiveItem(savedAdaptiveSegment.getId(), "APIP_5002", group1.getId());

        final ArrayList<TibItem> itemsToAdd = new ArrayList<TibItem>();
        itemsToAdd.add(getTibItem("123", "APIP_6000"));
        itemsToAdd.add(getTibItem("123", "APIP_6001"));
        itemsToAdd.add(getTibItem("123", "APIP_6002"));

        // first import should create a new group for passage id 123
        final TibImportResult importResult = importTibItemsToSegment(savedAdaptiveSegment.getId(), null, itemsToAdd);
        assertThat(importResult.getItemsImported(), is(3));
        assertThat(importResult.getItemsOmitted(), is(0));
        assertNumberOfItemsInSegment(savedAdaptiveSegment, 6);

        // second import should detect that a group is already created for the passage
        final TibImportResult importResult2 = importTibItemsToSegment(savedAdaptiveSegment.getId(), null, itemsToAdd);
        assertThat(importResult2.getItemsImported(), is(0));
        assertThat(importResult2.getItemsOmitted(), is(3));
        assertNumberOfItemsInSegment(savedAdaptiveSegment, 6);

        assertNumberOfItemGroupsInSegment(savedAdaptiveSegment, 2);
    }

    @Test
    public void nullPassageIdWorksSameAsEmptyString() {
        assertNumberOfItemGroupsInSegment(savedAdaptiveSegment, 0);

        final ArrayList<TibItem> nullPassageitemsToAdd = new ArrayList<TibItem>();
        nullPassageitemsToAdd.add(getTibItem(null, "APIP_6000"));
        nullPassageitemsToAdd.add(getTibItem(null, "APIP_6001"));
        nullPassageitemsToAdd.add(getTibItem(null, "APIP_6002"));

        final ArrayList<TibItem> emptyStringPassageItems = new ArrayList<TibItem>();
        emptyStringPassageItems.add(getTibItem("", "APIP_6000"));
        emptyStringPassageItems.add(getTibItem("", "APIP_6001"));
        emptyStringPassageItems.add(getTibItem("", "APIP_6002"));

        // first import should create a new group for passage id 123
        final TibImportResult importResult = importTibItemsToSegment(savedAdaptiveSegment.getId(), null, nullPassageitemsToAdd);
        assertThat(importResult.getItemsImported(), is(3));
        assertThat(importResult.getItemsOmitted(), is(0));
        assertNumberOfItemsInSegment(savedAdaptiveSegment, 3);

        // second import should detect that a group is already created for the passage
        final TibImportResult importResult2 = importTibItemsToSegment(savedAdaptiveSegment.getId(), null, emptyStringPassageItems);
        assertThat(importResult2.getItemsImported(), is(0));
        assertThat(importResult2.getItemsOmitted(), is(3));
        assertNumberOfItemsInSegment(savedAdaptiveSegment, 3);

        assertNumberOfItemGroupsInSegment(savedAdaptiveSegment, 0);
    }

    @Test
    public void sameItemsInDifferentSegmentsIsOk() {
        final ArrayList<TibItem> itemsToAdd = new ArrayList<TibItem>();
        itemsToAdd.add(getTibItem(null, "APIP_6000"));
        itemsToAdd.add(getTibItem(null, "APIP_6001"));
        itemsToAdd.add(getTibItem(null, "APIP_6002"));

        final TibImportResult importResult = importTibItemsToSegment(savedAdaptiveSegment.getId(), null, itemsToAdd);
        assertThat(importResult.getItemsImported(), is(3));
        assertThat(importResult.getItemsOmitted(), is(0));
        assertNumberOfItemsInSegment(savedAdaptiveSegment, 3);
        assertNumberOfItemsInSegment(savedAdaptiveSegment2, 0);

        final TibImportResult importResult2 = importTibItemsToSegment(savedAdaptiveSegment2.getId(), null, itemsToAdd);
        assertThat(importResult2.getItemsImported(), is(3));
        assertThat(importResult2.getItemsOmitted(), is(0));
        assertNumberOfItemsInSegment(savedAdaptiveSegment, 3);
        assertNumberOfItemsInSegment(savedAdaptiveSegment2, 3);
    }

    @Test
    public void ifGroupIsSpecifiedOnImportPassageGroupingDoesNotHappen() {
        final ItemGroup group1 = addAdaptiveItemGroup(savedAssessment, savedAdaptiveSegment, "groupA");

        assertNumberOfItemGroupsInSegment(savedAdaptiveSegment, 1);

        final ArrayList<TibItem> itemsToAdd = new ArrayList<TibItem>();
        itemsToAdd.add(getTibItem("123", "APIP_6000"));// wont create a new group because a specific group is targeted
        itemsToAdd.add(getTibItem("123", "APIP_6001"));// wont create a new group because a specific group is targeted

        // Data coming in wouldn't looks like this...
        final ArrayList<TibItem> itemsToAdd2 = new ArrayList<TibItem>();
        itemsToAdd2.add(getTibItem("111", "APIP_6000"));// will get dups because passage is ignored
        itemsToAdd2.add(getTibItem("111", "APIP_6001"));// will get dups because passage is ignored

        final TibImportResult importResult = importTibItemsToSegment(savedAdaptiveSegment.getId(), group1.getId(), itemsToAdd);
        assertThat(importResult.getItemsImported(), is(2));
        assertThat(importResult.getItemsOmitted(), is(0));
        assertNumberOfItemsInSegment(savedAdaptiveSegment, 2);

        assertNumberOfItemGroupsInSegment(savedAdaptiveSegment, 1);

        final TibImportResult importResult2 = importTibItemsToSegment(savedAdaptiveSegment.getId(), group1.getId(), itemsToAdd2);
        assertThat(importResult2.getItemsImported(), is(0));
        assertThat(importResult2.getItemsOmitted(), is(2)); // will get dups because
        assertNumberOfItemsInSegment(savedAdaptiveSegment, 2);

        assertNumberOfItemGroupsInSegment(savedAdaptiveSegment, 1);

    }


      public TibImportResult importTibItemsToSegment(final String segmentId, final String importToGroupId, final List<TibItem> tibItems) {
          Segment seg = segmentService.getSegment(segmentId);
          Assessment ass = assessmentService.getAssessment(seg.getAssessmentId());
          return itemImportHelper.importTibItemsToSegment(ass, segmentId, importToGroupId, tibItems);
      }
}
