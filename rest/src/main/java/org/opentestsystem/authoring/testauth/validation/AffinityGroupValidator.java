/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.validation;

import java.util.List;
import java.util.Map.Entry;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.authoring.testauth.domain.AffinityGroup;
import org.opentestsystem.authoring.testauth.domain.AffinityGroupValue;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionAlgorithm;
import org.opentestsystem.authoring.testauth.domain.ItemSelectionAlgorithmParameter;
import org.opentestsystem.authoring.testauth.domain.Segment;
import org.opentestsystem.authoring.testauth.service.SegmentService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;
import org.springframework.util.CollectionUtils;
import org.springframework.validation.Errors;
import org.springframework.validation.Validator;

@Component
public class AffinityGroupValidator extends AbstractDomainValidator
{
    private static final String ERROR_MSG_ROOT = "affinityGroup.";

    private static final String ELEMENT_MAP_FIELD = "affinityGroupValueMap";
    private static final String PARAMETERS_FIELD = "itemSelectionParameters";
    private static final String OP_MAX_FIELD = "operationalItemMaxValue";
    private static final String FT_MAX_FIELD = "fieldTestItemMaxValue";
    private static final String ELEMENT_MAP_PARAMETERS_FIELDS = ELEMENT_MAP_FIELD + "." + PARAMETERS_FIELD;
    private static final String ELEMENT_MAP_OP_MAX_FIELD = ELEMENT_MAP_FIELD + "." + OP_MAX_FIELD;
    private static final String ELEMENT_MAP_FT_MAX_FIELD = ELEMENT_MAP_FIELD + "." + FT_MAX_FIELD;
    private static final String MSG_SEGMENT_INVALID = ".segment" + MSG_INVALID;
    private static final String MSG_LESS_THAN_MIN = ".lessthanmin";

    @Autowired
    @Qualifier("jsr303Validator")
    private Validator jsrValidator;

    @Autowired
    private SegmentService segmentService;

    @Override
    public boolean supports(final Class<?> clazz) {
        return AffinityGroup.class.equals(clazz);
    }

    @Override
    public void validate(final Object obj, final Errors errors) {
        // execute JSR-303 validations (annotations)
        this.jsrValidator.validate(obj, errors);

        final AffinityGroup affinityGroup = (AffinityGroup) obj;

        // validate correct number of segment values
        if (isReadyForSegmentValidation(affinityGroup)) {
            final List<Segment> segmentList = segmentService.findSegmentListByAssessmentId(affinityGroup.getAssessmentId());

            if (!segmentList.isEmpty() && affinityGroup.getAffinityGroupValueMap() == null) {
                rejectValue(errors, ELEMENT_MAP_FIELD, getErrorMessageRoot() + ELEMENT_MAP_FIELD + MSG_COUNT, 0, segmentList.size());
            } else if (segmentList.size() != affinityGroup.getAffinityGroupValueMap().size()) {
                rejectValue(errors, ELEMENT_MAP_FIELD, getErrorMessageRoot() + ELEMENT_MAP_FIELD + MSG_COUNT, affinityGroup.getAffinityGroupValueMap().size(), segmentList.size());
            } else {
                for (final Segment segment : segmentList) {
                    if (!affinityGroup.getAffinityGroupValueMap().containsKey(segment.getId())) {
                        rejectValue(errors, ELEMENT_MAP_FIELD, getErrorMessageRoot() + ELEMENT_MAP_FIELD + MSG_SEGMENT_INVALID, segment.getLabel());
                    }
                }
            }
        }

        // validate op/ft min/max values
        if (affinityGroup.getAffinityGroupValueMap() != null) {
            for (final Entry<String, AffinityGroupValue> entry : affinityGroup.getAffinityGroupValueMap().entrySet()) {
                errors.pushNestedPath(ELEMENT_MAP_FIELD + "['" + entry.getKey() + "']");

                if (entry.getValue().getOperationalItemMinValue() != null && entry.getValue().getOperationalItemMaxValue() != null) {
                    if (entry.getValue().getOperationalItemMaxValue() < entry.getValue().getOperationalItemMinValue()) {
                        rejectValue(errors, OP_MAX_FIELD, getErrorMessageRoot() + ELEMENT_MAP_OP_MAX_FIELD + MSG_LESS_THAN_MIN,
                                entry.getValue().getOperationalItemMinValue(), entry.getValue().getOperationalItemMaxValue());
                    }
                }

                if (entry.getValue().getFieldTestItemMinValue() != null && entry.getValue().getFieldTestItemMaxValue() != null) {
                    if (entry.getValue().getFieldTestItemMaxValue() < entry.getValue().getFieldTestItemMinValue()) {
                        rejectValue(errors, FT_MAX_FIELD, getErrorMessageRoot() + ELEMENT_MAP_FT_MAX_FIELD + MSG_LESS_THAN_MIN,
                                entry.getValue().getFieldTestItemMinValue(), entry.getValue().getFieldTestItemMaxValue());
                    }
                }

                errors.popNestedPath();
            }
        }

        // validate item selection parameters
        if (affinityGroup.getAffinityGroupValueMap() != null) {
            for (final Entry<String, AffinityGroupValue> entry : affinityGroup.getAffinityGroupValueMap().entrySet()) {
                try {
                    errors.pushNestedPath(ELEMENT_MAP_FIELD + "['" + entry.getKey() + "']");

                    final Segment segment = this.segmentService.getSegment(entry.getKey());
                    if (segment != null) {
                        final ItemSelectionAlgorithm algorithm = segment.getItemSelectionAlgorithm();

                        if (algorithm.getBlueprintParameters().size() != entry.getValue().getItemSelectionParameterCount()) {
                            rejectValue(errors, PARAMETERS_FIELD, getErrorMessageRoot() + ELEMENT_MAP_PARAMETERS_FIELDS + MSG_COUNT, algorithm.getBlueprintParameters().size());
                        } else {
                            for (final ItemSelectionAlgorithmParameter requiredParameter : algorithm.getBlueprintParameters()) {
                                final String paramVal = entry.getValue().getItemSelectionParameters() == null ? null :
                                        entry.getValue().getItemSelectionParameters().get(requiredParameter.getParameterName());

                                try {
                                    errors.pushNestedPath(PARAMETERS_FIELD + "['" + requiredParameter.getParameterName() + "']");
                                    validateParameterValue(paramVal, ELEMENT_MAP_PARAMETERS_FIELDS, requiredParameter, errors);
                                    if (!errors.hasErrors()) {
                                        entry.getValue().trimItemSelectionValues(algorithm);
                                    }
                                } finally {
                                    errors.popNestedPath();
                                }
                            }
                        }
                    }
                } finally {
                    errors.popNestedPath();
                }
            }
        }
    }

    private static final boolean isReadyForSegmentValidation(final AffinityGroup affinityGroup) {
        return StringUtils.isNotBlank(affinityGroup.getAssessmentId()) &&
                (!CollectionUtils.isEmpty(affinityGroup.getAffinityGroupValueMap()) || StringUtils.isNotBlank(affinityGroup.getId()));
    }

    @Override
    protected String getErrorMessageRoot() {
        return ERROR_MSG_ROOT;
    }
}
