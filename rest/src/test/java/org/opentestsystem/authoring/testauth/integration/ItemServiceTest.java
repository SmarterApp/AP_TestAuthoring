/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.integration;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.Assert.fail;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.Test;
import org.opentestsystem.authoring.testauth.domain.AffinityGroup;
import org.opentestsystem.authoring.testauth.domain.Assessment;
import org.opentestsystem.authoring.testauth.domain.BlueprintElement;
import org.opentestsystem.authoring.testauth.domain.DomainFactory;
import org.opentestsystem.authoring.testauth.domain.Item;
import org.opentestsystem.authoring.testauth.domain.ItemCountSummary;
import org.opentestsystem.authoring.testauth.domain.ItemGroup;
import org.opentestsystem.authoring.testauth.domain.Segment;
import org.opentestsystem.authoring.testauth.domain.ValidationResult;
import org.opentestsystem.authoring.testauth.domain.search.ItemSearchRequest;
import org.opentestsystem.authoring.testauth.service.BlueprintElementService;
import org.opentestsystem.authoring.testauth.service.PublishingRecordService;
import org.opentestsystem.shared.exception.LocalizedException;
import org.opentestsystem.shared.progman.client.ProgManClient;
import org.opentestsystem.shared.search.domain.SearchResponse;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Lists;

public class ItemServiceTest extends AbstractAssessmentServiceTest {

    @Autowired
    private BlueprintElementService blueprintElementService;

    @Autowired
    private PublishingRecordService publishingRecordService;

    @Autowired
    private ProgManClient progManClient; // mocked client

    @Test
    public void getItemsBySegmentId() {
        final Item itemToSave = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        itemToSave.setAssessmentId(this.savedAssessment.getId());
        itemToSave.setItemLocation(null);
        addAdaptiveLocation(itemToSave, this.savedAdaptiveSegment.getId(), Item.NO_GROUP_KEY);
        addAdaptiveLocation(itemToSave, this.savedAdaptiveSegment2.getId(), Item.NO_GROUP_KEY);

        final Item savedItem = this.itemService.saveItem(itemToSave);
        assertThat(savedItem, is(not(nullValue())));

        final Item itemToSave2 = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        itemToSave2.setAssessmentId(this.savedAssessment.getId());
        itemToSave2.setItemLocation(null);
        addAdaptiveLocation(itemToSave2, this.savedAdaptiveSegment.getId(), Item.NO_GROUP_KEY);
        final Item savedItem2 = this.itemService.saveItem(itemToSave2);
        assertThat(savedItem2, is(not(nullValue())));

        assertThat(this.itemService.getItemsBySegmentId(this.savedAdaptiveSegment.getId()).size(), is(2));
        assertThat(this.itemService.getItemsBySegmentId(this.savedAdaptiveSegment2.getId()).size(), is(1));
        assertThat(this.itemService.getItemsBySegmentId("invalid-id").size(), is(0));
    }

    @Test
    public void getItemsByFormPartitionId() {
        final Item itemToSave = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        itemToSave.setAssessmentId(this.savedAssessment.getId());
        itemToSave.setItemLocation(null);
        addFixedFormLocation(itemToSave, "12345", Item.NO_GROUP_KEY);
        addFixedFormLocation(itemToSave, "6543", Item.NO_GROUP_KEY);

        final Item savedItem = this.itemService.saveItem(itemToSave);
        assertThat(savedItem, is(not(nullValue())));

        final Item itemToSave2 = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        itemToSave2.setAssessmentId(this.savedAssessment.getId());
        itemToSave2.setItemLocation(null);
        addFixedFormLocation(itemToSave2, "12345", Item.NO_GROUP_KEY);

        final Item savedItem2 = this.itemService.saveItem(itemToSave2);
        assertThat(savedItem2, is(not(nullValue())));

        assertThat(this.itemService.getItemsByFormPartitionId("12345").size(), is(2));
        assertThat(this.itemService.getItemsByFormPartitionId("6543").size(), is(1));
        assertThat(this.itemService.getItemsByFormPartitionId("invalid-id").size(), is(0));
    }

    @Test
    public void getSegmentItemCounts() {
        final List<BlueprintElement> blueprintElements = new ArrayList<BlueprintElement>();

        final List<Segment> segmentList = segmentService.findSegmentListByAssessmentId(savedAssessment.getId());
        this.segmentService.loadReferenceData(segmentList);
        final BlueprintElement bpElement1 = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), segmentList);
        this.blueprintElementService.saveBlueprintElement(bpElement1.getId(), bpElement1);
        blueprintElements.add(bpElement1);
        assertThat(bpElement1, is(not(nullValue())));

        final BlueprintElement bpElement2 = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), segmentList);
        this.blueprintElementService.saveBlueprintElement(bpElement2.getId(), bpElement2);
        blueprintElements.add(bpElement2);
        assertThat(bpElement2, is(not(nullValue())));

        final BlueprintElement bpElement3 = DomainFactory.manufactureValidBlueprintElement(this.savedAssessment.getId(), segmentList);
        this.blueprintElementService.saveBlueprintElement(bpElement3.getId(), bpElement3);
        blueprintElements.add(bpElement3);
        assertThat(bpElement3, is(not(nullValue())));

        final Map<String, Map<String, ItemCountSummary>> itemCountsMap = this.itemService.getSegmentItemCounts(this.savedAdaptiveSegment.getId());
        assertThat(itemCountsMap.size(), is(3));
        assertThat(itemCountsMap.get(bpElement1.getStandardKey()), is(not(nullValue())));
        assertThat(itemCountsMap.get(bpElement1.getStandardKey()).get(bpElement1.getGrade()).getOpCount(), is(0));
    }

    @Test
    public void getAffinityGroupItemCounts() {
        // create affinity groups
        final AffinityGroup groupA = this.addAffinityGroup(savedAssessment, "group A");
        final AffinityGroup groupB = this.addAffinityGroup(savedAssessment, "group B");
        final AffinityGroup groupC = this.addAffinityGroup(savedAssessment, "group C");

        // create items and attach to affinity groups
        final Item item1 = this.addAdaptiveItem(this.savedAdaptiveSegment.getId(), "item_id_001", "groupX");
        this.addAdaptiveLocation(item1, savedAdaptiveSegment2.getId(), "groupX");
        final Item item2 = this.addAdaptiveItem(this.savedAdaptiveSegment.getId(), "item_id_002", "groupX");
        final Item item3 = this.addAdaptiveItem(this.savedAdaptiveSegment.getId(), "item_id_003", "groupX");
        final Item item4 = this.addAdaptiveItem(this.savedAdaptiveSegment.getId(), "item_id_004", "groupX");
        item1.setStatus("OP");
        item2.setStatus("OP");
        item3.setStatus("FT");
        item4.setStatus("OP");

        this.addAffinityGroupLocation(item1, groupA.getId()); // OP
        this.addAffinityGroupLocation(item1, groupB.getId()); // OP
        this.addAffinityGroupLocation(item2, groupA.getId()); // OP
        this.addAffinityGroupLocation(item3, groupA.getId()); // FT
        itemService.saveItemList(ImmutableList.of(item1, item2, item3, item4));

        // get and validate item counts
        final Map<String, ItemCountSummary> itemCountsMap = this.itemService.getAffinityGroupItemCounts(this.savedAssessment.getId());
        assertThat(itemCountsMap.size(), is(3));
        assertThat(itemCountsMap.get(groupA.getId()).getOpCount(), is(2));
        assertThat(itemCountsMap.get(groupA.getId()).getFtCount(), is(1));

        assertThat(itemCountsMap.get(groupB.getId()).getOpCount(), is(1));
        assertThat(itemCountsMap.get(groupB.getId()).getFtCount(), is(0));

        assertThat(itemCountsMap.get(groupC.getId()).getOpCount(), is(0));
        assertThat(itemCountsMap.get(groupC.getId()).getFtCount(), is(0));
    }

    @Test
    public void getItemsByGroupId() {
        final Item itemToSave = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        itemToSave.setAssessmentId(this.savedAssessment.getId());
        itemToSave.setItemLocation(null);
        addAdaptiveLocation(itemToSave, this.savedAdaptiveSegment.getId(), "1234");
        addAdaptiveLocation(itemToSave, this.savedAdaptiveSegment.getId(), "4567");
        addAdaptiveLocation(itemToSave, this.savedAdaptiveSegment2.getId(), Item.NO_GROUP_KEY);

        final Item savedItem = this.itemService.saveItem(itemToSave);
        assertThat(savedItem, is(not(nullValue())));

        final Item itemToSave2 = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        itemToSave2.setAssessmentId(this.savedAssessment.getId());
        itemToSave2.setItemLocation(null);
        addAdaptiveLocation(itemToSave2, this.savedAdaptiveSegment.getId(), Item.NO_GROUP_KEY);
        addAdaptiveLocation(itemToSave2, this.savedAdaptiveSegment.getId(), "1234");
        final Item savedItem2 = this.itemService.saveItem(itemToSave2);
        assertThat(savedItem2, is(not(nullValue())));

        assertThat(this.itemService.getItemsByItemGroupId("1234").size(), is(2));
        assertThat(this.itemService.getItemsByItemGroupId("4567").size(), is(1));
        assertThat(this.itemService.getItemsByItemGroupId("invalid-id").size(), is(0));
    }

    @Test
    public void saveItem() {
        final Item itemToSave = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        itemToSave.setAssessmentId(this.savedAssessment.getId());
        itemToSave.setItemLocation(null);
        addAdaptiveLocation(itemToSave, this.savedAdaptiveSegment.getId(), Item.NO_GROUP_KEY);

        final Item savedItem = this.itemService.saveItem(itemToSave);
        assertThat(savedItem, is(notNullValue()));
        final Item retrievedItem = this.itemService.getItem(savedItem.getId());
        assertThat(retrievedItem, is(notNullValue()));
    }

    @Test
    public void saveExistingItemTest() {
        final Item itemToSave = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        itemToSave.setItemLocation(null);
        addAdaptiveLocation(itemToSave, this.savedAdaptiveSegment.getId(), Item.NO_GROUP_KEY);

        final Item savedItem = this.itemService.saveItem(itemToSave);
        assertThat(savedItem, is(notNullValue()));
        final Item retrievedItem = this.itemService.getItem(savedItem.getId());
        assertThat(retrievedItem, is(notNullValue()));
        retrievedItem.setPrimaryStandard("new description");
        final Item resavedItem = this.itemService.saveItem(retrievedItem);
        assertThat(resavedItem, is(notNullValue()));
        assertThat(resavedItem.getPrimaryStandard(), is(equalTo(("new description"))));
    }

    @Test
    public void saveExistingItemLockedAssessmentTest() {
        final Item itemToSave = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        itemToSave.setAssessmentId(this.savedAssessment.getId());
        addAdaptiveLocation(itemToSave, this.savedAdaptiveSegment.getId(), Item.NO_GROUP_KEY);

        final Item savedItem = this.itemService.saveItem(itemToSave);
        assertThat(savedItem, is(notNullValue()));

        final Assessment retrievedAssessment = this.assessmentRepository.findOne(this.savedAssessment.getId());
        retrievedAssessment.setLocked(true);
        final Assessment reSavedAssessment = this.assessmentRepository.save(retrievedAssessment);
        assertThat(reSavedAssessment.isLocked(), is(true));

        final Item retrievedItem = this.itemService.getItem(savedItem.getId());
        assertThat(retrievedItem, is(notNullValue()));
        retrievedItem.setPrimaryStandard("new standard");
        try {
            this.itemService.saveItem(retrievedItem);
            fail("exception should be thrown when trying to save item data for an already locked assessment");
        } catch (final LocalizedException e) {
            assertThat(e.getMessage(), is("cannot.be.altered.assessment.locked"));
        }
    }

    @Test
    public void deleteItemTest() {
        final Item itemToSave = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        addAdaptiveLocation(itemToSave, this.savedAdaptiveSegment.getId(), Item.NO_GROUP_KEY);

        final Item savedItem = this.itemService.saveItem(itemToSave);
        assertThat(savedItem, is(notNullValue()));
        final Item retrievedItem = this.itemService.getItem(savedItem.getId());
        assertThat(retrievedItem, is(notNullValue()));

        this.itemService.removeItem(retrievedItem.getId());
        final Item reRetrievedItem = this.itemService.getItem(savedItem.getId());
        assertThat(reRetrievedItem, is(nullValue()));
    }

    @Test
    public void deleteItemLockedAssessmentTest() {
        final Item itemToSave = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        itemToSave.setAssessmentId(this.savedAssessment.getId());
        final Item savedItem = this.itemService.saveItem(itemToSave);
        assertThat(savedItem, is(notNullValue()));

        final List<Segment> segments = segmentService.findSegmentListByAssessmentId(savedAssessment.getId());
        segmentService.loadReferenceData(segments);
        final BlueprintElement blueprintElementToSave = DomainFactory.manufactureValidBlueprintElement(savedAssessment.getId(), segments);
        blueprintElementToSave.setGrade("1");
        blueprintElementToSave.setLevel("1");
        blueprintElementToSave.setStandardKey("CC-ELA-v1");
        blueprintElementToSave.setTextDescription("textDescription");
        blueprintElementToSave.setActive(true);
        final BlueprintElement savedBlueprintElement = this.blueprintElementService.saveBlueprintElement(null, blueprintElementToSave);
        assertThat(savedBlueprintElement, is(notNullValue()));

        final Assessment retrievedAssessment = this.assessmentRepository.findOne(this.savedAssessment.getId());
        retrievedAssessment.setLocked(true);
        final Assessment reSavedAssessment = this.assessmentRepository.save(retrievedAssessment);
        assertThat(reSavedAssessment.isLocked(), is(true));

        final Item retrievedItem = this.itemService.getItem(savedItem.getId());
        assertThat(retrievedItem, is(notNullValue()));
        try {
            this.itemService.removeItem(retrievedItem.getId());
            fail("exception should be thrown when trying to save item data for an already locked assessment");
        } catch (final LocalizedException e) {
            assertThat(e.getMessage(), is("cannot.be.altered.assessment.locked"));
        }
    }

    @Test
    public void removeItemByAssessmentIdTest() {
        final Item itemToSave = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        itemToSave.setId(null);
        final Item savedItem = this.itemService.saveItem(itemToSave);
        assertThat(savedItem, is(notNullValue()));

        final Item itemToSave2 = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        itemToSave2.setId(null);
        itemToSave2.setAssessmentId(savedItem.getAssessmentId());
        final Item savedItem2 = this.itemService.saveItem(itemToSave2);
        assertThat(savedItem2, is(notNullValue()));

        this.itemService.removeByAssessmentId(savedItem.getAssessmentId());

        final Item retrievedItem = this.itemService.getItem(savedItem.getId());
        assertThat(retrievedItem, is(nullValue()));

        final Item retrievedItem2 = this.itemService.getItem(savedItem2.getId());
        assertThat(retrievedItem2, is(nullValue()));
    }

    @Test
    public void removeItemBySegmentIdTest() {
        final ItemGroup group1 = addAdaptiveItemGroup(this.savedAssessment, this.savedAdaptiveSegment, "group");

        final Item itemToSave = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        itemToSave.setId(null);
        addAdaptiveLocation(itemToSave, this.savedAdaptiveSegment.getId(), Item.NO_GROUP_KEY);

        final Item savedItem = this.itemService.saveItem(itemToSave);
        assertThat(savedItem, is(notNullValue()));

        final Item itemToSave2 = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        itemToSave2.setId(null);
        addAdaptiveLocation(itemToSave2, this.savedAdaptiveSegment.getId(), Item.NO_GROUP_KEY);
        addAdaptiveLocation(itemToSave2, this.savedAdaptiveSegment.getId(), group1.getId());
        this.itemService.saveItem(itemToSave2);

        assertNumberOfItemsInSegment(this.savedAdaptiveSegment, 2);

        this.itemService.removeBySegmentId(this.savedAdaptiveSegment.getId());

        assertNumberOfItemsInSegment(this.savedAdaptiveSegment, 0);
    }

    @Test
    public void removeItemBySegmentIdDoesNotWipeAllTest() {
        final Item itemToSave = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        itemToSave.setId(null);
        addAdaptiveLocation(itemToSave, this.savedAdaptiveSegment.getId(), Item.NO_GROUP_KEY);
        addAdaptiveLocation(itemToSave, this.savedAdaptiveSegment2.getId(), Item.NO_GROUP_KEY);

        final Item savedItem = this.itemService.saveItem(itemToSave);
        assertThat(savedItem, is(notNullValue()));

        this.itemService.removeBySegmentId(this.savedAdaptiveSegment.getId());

        assertNumberOfItemsInSegment(this.savedAdaptiveSegment, 0);

        assertNumberOfItemsInSegment(this.savedAdaptiveSegment2, 1);

    }

    @Test
    public void removeItemByAssessmentIdLockedAssessmentTest() {
        final Item itemToSave = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        itemToSave.setAssessmentId(this.savedAssessment.getId());
        final Item savedItem = this.itemService.saveItem(itemToSave);
        assertThat(savedItem, is(notNullValue()));

        final Assessment retrievedAssessment = this.assessmentRepository.findOne(this.savedAssessment.getId());
        retrievedAssessment.setLocked(true);
        final Assessment reSavedAssessment = this.assessmentRepository.save(retrievedAssessment);
        assertThat(reSavedAssessment.isLocked(), is(true));

        final Item retrievedItem = this.itemService.getItem(savedItem.getId());
        assertThat(retrievedItem, is(notNullValue()));
        retrievedItem.setPrimaryStandard("new standard");
        try {
            this.itemService.removeByAssessmentId(retrievedItem.getAssessmentId());
            fail("exception should be thrown when trying to save item data for an already locked assessment");
        } catch (final LocalizedException e) {
            assertThat(e.getMessage(), is("cannot.be.altered.assessment.locked"));
        }
    }

    @Test
    public void searchItems() {
        final Item itemToSave = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        itemToSave.setItemLocation(null);
        addAdaptiveLocation(itemToSave, this.savedAdaptiveSegment.getId(), Item.NO_GROUP_KEY);

        final Item savedItem = this.itemService.saveItem(itemToSave);
        assertThat(savedItem, is(not(nullValue())));

        final Item itemToSave2 = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        itemToSave2.setItemLocation(null);
        addAdaptiveLocation(itemToSave2, this.savedAdaptiveSegment2.getId(), Item.NO_GROUP_KEY);

        final Item savedItem2 = this.itemService.saveItem(itemToSave2);
        assertThat(savedItem2, is(not(nullValue())));

        final Map<String, String[]> params = ImmutableMap.of("segmentId", new String[] { this.savedAdaptiveSegment.getId() });
        final SearchResponse<Item> searchResponse = this.itemService.searchItems(new ItemSearchRequest(params));
        assertThat(searchResponse.getReturnCount(), is(1));
        assertThat(searchResponse.getSearchResults().size(), is(1));

        final SearchResponse<Item> searchResponse2 = this.itemService.searchItems(new ItemSearchRequest(new HashMap<String, String[]>()));
        assertThat(searchResponse2.getReturnCount(), is(2));
        assertThat(searchResponse2.getSearchResults().size(), is(2));
    }

    @Test
    public void searchItemsByGroupId() {
        final ItemGroup group1 = addAdaptiveItemGroup(this.savedAssessment, this.savedAdaptiveSegment, "GroupA");
        final ItemGroup group2 = addAdaptiveItemGroup(this.savedAssessment, this.savedAdaptiveSegment, "GroupB");

        final Item itemToSave = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        itemToSave.setItemLocation(null);
        addAdaptiveLocation(itemToSave, this.savedAdaptiveSegment.getId(), group1.getId());

        final Item savedItem = this.itemService.saveItem(itemToSave);
        assertThat(savedItem, is(not(nullValue())));

        final Item itemToSave2 = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        itemToSave2.setItemLocation(null);
        addAdaptiveLocation(itemToSave2, this.savedAdaptiveSegment.getId(), group2.getId());

        final Item savedItem2 = this.itemService.saveItem(itemToSave2);
        assertThat(savedItem2, is(not(nullValue())));

        final Map<String, String[]> params = ImmutableMap.of("itemGroupId", new String[] { group2.getId() });
        final SearchResponse<Item> searchResponse = this.itemService.searchItems(new ItemSearchRequest(params));
        assertThat(searchResponse.getReturnCount(), is(1));
        assertThat(searchResponse.getSearchResults().size(), is(1));

        final SearchResponse<Item> searchResponse2 = this.itemService.searchItems(new ItemSearchRequest(new HashMap<String, String[]>()));
        assertThat(searchResponse2.getReturnCount(), is(2));
        assertThat(searchResponse2.getSearchResults().size(), is(2));

    }

    @Test
    public void getItems() {
        Item item = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        item.setId(null);
        item.setAssessmentId(this.savedAssessment.getId());
        item = this.itemService.saveItem(item);
        assertThat(item, is(not(nullValue())));

        Item anotherItem = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        anotherItem.setId(null);
        anotherItem.setAssessmentId(this.savedAssessment.getId());
        anotherItem = this.itemService.saveItem(anotherItem);
        assertThat(anotherItem, is(not(nullValue())));

        final List<Item> items = this.itemService.getItems();
        assertThat(items, is(not(nullValue())));
        assertThat(items.size(), is(2));
    }

    @Test
    public void getItem() {
        Item item = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        item.setId(null);
        item.setAssessmentId(this.savedAssessment.getId());
        item = this.itemService.saveItem(item);
        assertThat(item, is(not(nullValue())));

        final Item foundItem = this.itemService.getItem(item.getId());
        assertThat(foundItem, is(not(nullValue())));
        assertThat(foundItem.getId(), is(item.getId()));
    }

    public void validateItemPoolsWithNoErrors() {
        // setup data
        final Item itemToSave = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        itemToSave.setItemLocation(null);
        addAdaptiveLocation(itemToSave, this.savedFieldTestSegment.getId(), Item.NO_GROUP_KEY);
        addAdaptiveLocation(itemToSave, this.savedFieldTestSegment2.getId(), Item.NO_GROUP_KEY);
        itemToSave.getItemLocation().get(0).setFieldTestItem(true);
        itemToSave.getItemLocation().get(1).setFieldTestItem(true);
        this.itemService.saveItem(itemToSave);

        final Item itemToSave2 = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        itemToSave2.setItemLocation(null);
        addAdaptiveLocation(itemToSave2, this.savedFieldTestSegment.getId(), Item.NO_GROUP_KEY);
        addAdaptiveLocation(itemToSave2, this.savedFieldTestSegment2.getId(), Item.NO_GROUP_KEY);
        itemToSave2.getItemLocation().get(0).setFieldTestItem(true);
        itemToSave2.getItemLocation().get(1).setFieldTestItem(true);
        this.itemService.saveItem(itemToSave2);

        final Item itemToSave3 = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        itemToSave3.setItemLocation(null);
        addAdaptiveLocation(itemToSave3, this.savedFieldTestSegment.getId(), Item.NO_GROUP_KEY);
        itemToSave3.getItemLocation().get(0).setFieldTestItem(true);
        this.itemService.saveItem(itemToSave3);

        final Item itemToSave4 = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        itemToSave4.setItemLocation(null);
        addAdaptiveLocation(itemToSave4, this.savedAdaptiveSegment.getId(), Item.NO_GROUP_KEY);
        itemToSave4.getItemLocation().get(0).setFieldTestItem(false);
        this.itemService.saveItem(itemToSave4);

        // execute tests
        final List<ValidationResult<Segment>> errors = this.itemService.validateItemPools(this.savedAssessment.getId());
        assertThat(errors.size(), is(0));
    }

    @Test
    public void validateItemPoolsWith1SegmentErrors() {
        // setup data
        final Item itemToSave = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        itemToSave.setItemLocation(null);
        addAdaptiveLocation(itemToSave, this.savedFieldTestSegment.getId(), Item.NO_GROUP_KEY);
        addAdaptiveLocation(itemToSave, this.savedFieldTestSegment2.getId(), Item.NO_GROUP_KEY);
        itemToSave.getItemLocation().get(0).setFieldTestItem(true);
        itemToSave.getItemLocation().get(1).setFieldTestItem(true);
        this.itemService.saveItem(itemToSave);

        final Item itemToSave2 = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        itemToSave2.setItemLocation(null);
        addAdaptiveLocation(itemToSave2, this.savedFieldTestSegment.getId(), Item.NO_GROUP_KEY);
        addAdaptiveLocation(itemToSave2, this.savedFieldTestSegment2.getId(), Item.NO_GROUP_KEY);
        itemToSave2.getItemLocation().get(0).setFieldTestItem(true);
        itemToSave2.getItemLocation().get(1).setFieldTestItem(false);
        this.itemService.saveItem(itemToSave2);

        final Item itemToSave3 = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        itemToSave3.setItemLocation(null);
        addAdaptiveLocation(itemToSave3, this.savedFieldTestSegment.getId(), Item.NO_GROUP_KEY);
        itemToSave3.getItemLocation().get(0).setFieldTestItem(true);
        this.itemService.saveItem(itemToSave3);

        // execute tests
        final List<ValidationResult<Segment>> errors = this.itemService.validateItemPools(this.savedAssessment.getId());
        assertThat(errors.size(), is(1));

        assertThat(findResultsForSegmentId(errors, this.savedFieldTestSegment.getId()).size(), is(0));
        assertThat(findResultsForSegmentId(errors, this.savedFieldTestSegment2.getId()).size(), is(1));

        final ValidationResult<Segment> segment2Error1 = findResultsForSegmentId(errors, this.savedFieldTestSegment2.getId()).get(0);
        assertThat(segment2Error1.getValidatedObject().getId(), is(this.savedFieldTestSegment2.getId()));
        assertThat(segment2Error1.getMessage(), is("Segment: " + this.savedFieldTestSegment2.getLabel() + " is a field test (FT) segment but contains non-FT items."));
    }

    @Test
    public void validateItemPoolsWithMultipleSegmentErrors() {
        // setup data
        final Item itemToSave = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        itemToSave.setItemLocation(null);
        addAdaptiveLocation(itemToSave, this.savedFieldTestSegment.getId(), Item.NO_GROUP_KEY);
        addAdaptiveLocation(itemToSave, this.savedFieldTestSegment2.getId(), Item.NO_GROUP_KEY);
        itemToSave.getItemLocation().get(0).setFieldTestItem(true);
        itemToSave.getItemLocation().get(1).setFieldTestItem(true);
        this.itemService.saveItem(itemToSave);

        final Item itemToSave2 = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        itemToSave2.setItemLocation(null);
        addAdaptiveLocation(itemToSave2, this.savedFieldTestSegment.getId(), Item.NO_GROUP_KEY);
        addAdaptiveLocation(itemToSave2, this.savedFieldTestSegment2.getId(), Item.NO_GROUP_KEY);
        itemToSave2.getItemLocation().get(0).setFieldTestItem(true);
        itemToSave2.getItemLocation().get(1).setFieldTestItem(false);
        this.itemService.saveItem(itemToSave2);

        final Item itemToSave3 = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        itemToSave3.setItemLocation(null);
        addAdaptiveLocation(itemToSave3, this.savedFieldTestSegment.getId(), Item.NO_GROUP_KEY);
        itemToSave3.getItemLocation().get(0).setFieldTestItem(false);
        this.itemService.saveItem(itemToSave3);

        // execute tests
        final List<ValidationResult<Segment>> errors = this.itemService.validateItemPools(this.savedAssessment.getId());
        assertThat(errors.size(), is(2));

        assertThat(findResultsForSegmentId(errors, this.savedFieldTestSegment.getId()).size(), is(1));
        assertThat(findResultsForSegmentId(errors, this.savedFieldTestSegment2.getId()).size(), is(1));

        final ValidationResult<Segment> segment1Error1 = findResultsForSegmentId(errors, this.savedFieldTestSegment.getId()).get(0);
        assertThat(segment1Error1.getValidatedObject().getId(), is(this.savedFieldTestSegment.getId()));
        assertThat(segment1Error1.getMessage(), is("Segment: " + this.savedFieldTestSegment.getLabel() + " is a field test (FT) segment but contains non-FT items."));

        final ValidationResult<Segment> segment2Error1 = findResultsForSegmentId(errors, this.savedFieldTestSegment.getId()).get(0);
        assertThat(segment2Error1.getValidatedObject().getId(), is(this.savedFieldTestSegment.getId()));
        assertThat(segment2Error1.getMessage(), is("Segment: " + this.savedFieldTestSegment.getLabel() + " is a field test (FT) segment but contains non-FT items."));
    }

    @Test
    public void validateItemPoolsWithBlueprintStandardCountErrors() {
        // setup blueprints
        final BlueprintElement bpElement = DomainFactory.manufactureValidBlueprintElement(savedAssessment.getId(),
                ImmutableList.of(savedAdaptiveSegment, savedAdaptiveSegment2, savedFixedSegment, savedFixedSegment2, savedFieldTestSegment, savedFieldTestSegment2));
        final BlueprintElement bpElement2 = DomainFactory.manufactureValidBlueprintElement(savedAssessment.getId(),
                ImmutableList.of(savedAdaptiveSegment, savedAdaptiveSegment2, savedFixedSegment, savedFixedSegment2, savedFieldTestSegment, savedFieldTestSegment2));
        final BlueprintElement bpElement3 = DomainFactory.manufactureValidBlueprintElement(savedAssessment.getId(),
                ImmutableList.of(savedAdaptiveSegment, savedAdaptiveSegment2, savedFixedSegment, savedFixedSegment2, savedFieldTestSegment, savedFieldTestSegment2));
        bpElement.setGrade("5");
        bpElement.setStandardKey("key1");
        bpElement.getBlueprintElementValueMap().get(savedAdaptiveSegment.getId()).setOperationalItemMinValue(1);
        bpElement.getBlueprintElementValueMap().get(savedAdaptiveSegment.getId()).setOperationalItemMaxValue(1);
        bpElement2.setGrade("5");
        bpElement2.setStandardKey("key1|abc");
        bpElement2.getBlueprintElementValueMap().get(savedAdaptiveSegment.getId()).setOperationalItemMinValue(1);
        bpElement2.getBlueprintElementValueMap().get(savedAdaptiveSegment.getId()).setOperationalItemMaxValue(1);
        bpElement3.setGrade("5");
        bpElement3.setStandardKey("key1|abc|xyz");
        bpElement3.getBlueprintElementValueMap().get(savedAdaptiveSegment.getId()).setOperationalItemMinValue(1);
        bpElement3.getBlueprintElementValueMap().get(savedAdaptiveSegment.getId()).setOperationalItemMaxValue(1);
        this.blueprintElementService.saveBlueprintElementList(ImmutableList.of(bpElement, bpElement2, bpElement3));

        // setup data
        final Item itemToSave = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        itemToSave.setIntendedGrade("5");
        itemToSave.setPrimaryStandard("key1|abc");
        itemToSave.setItemLocation(null);
        addAdaptiveLocation(itemToSave, this.savedAdaptiveSegment.getId(), Item.NO_GROUP_KEY);
        itemToSave.getItemLocation().get(0).setFieldTestItem(false);
        this.itemService.saveItem(itemToSave);

        final Item itemToSave2 = DomainFactory.manufactureValidItem(this.savedAssessment.getId());
        itemToSave2.setIntendedGrade("5");
        itemToSave2.setPrimaryStandard("key1|abc");
        itemToSave2.setItemLocation(null);
        addAdaptiveLocation(itemToSave2, this.savedAdaptiveSegment.getId(), Item.NO_GROUP_KEY);
        itemToSave2.getItemLocation().get(0).setFieldTestItem(false);
        this.itemService.saveItem(itemToSave2);

        // execute tests
        final List<ValidationResult<Segment>> errors = this.itemService.validateItemPools(this.savedAssessment.getId());
        assertThat(errors.size(), is(1));
        assertThat(findResultsForSegmentId(errors, this.savedAdaptiveSegment.getId()).size(), is(1));

        final ValidationResult<Segment> segment1Error1 = findResultsForSegmentId(errors, this.savedAdaptiveSegment.getId()).get(0);
        assertThat(segment1Error1.getValidatedObject().getId(), is(this.savedAdaptiveSegment.getId()));
        assertThat(segment1Error1.getMessage(), is("Segment: " + savedAdaptiveSegment.getLabel()
                + " contains too few OP items (0) for standard key1|abc|xyz (grade 5).  The minimum defined by the blueprint is 1."));
        assertThat(segment1Error1.getValidationLevel(), is(ValidationResult.ERROR_LEVEL));

    }

    private static List<ValidationResult<Segment>> findResultsForSegmentId(final List<ValidationResult<Segment>> results, final String segmentId) {
        final List<ValidationResult<Segment>> foundResults = Lists.newArrayList();
        for (final ValidationResult<Segment> result : results) {
            if (result.getValidatedObject().getId().equals(segmentId)) {
                foundResults.add(result);
            }
        }
        return foundResults;
    }

}
