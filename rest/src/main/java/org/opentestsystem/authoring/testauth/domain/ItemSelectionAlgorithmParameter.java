/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.authoring.testauth.domain;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.List;

import javax.validation.Valid;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;
import org.hibernate.validator.constraints.NotBlank;
import org.opentestsystem.authoring.testauth.validation.AbstractDomainValidator;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.google.common.collect.Ordering;

@JsonIgnoreProperties(ignoreUnknown = true)
public class ItemSelectionAlgorithmParameter implements Serializable {
    private static final long serialVersionUID = 1693202958911228485L;

    public static final Ordering<ItemSelectionAlgorithmParameter> BY_POSITION_ORDERING = new Ordering<ItemSelectionAlgorithmParameter>() {
        @Override
        public int compare(final ItemSelectionAlgorithmParameter param1, final ItemSelectionAlgorithmParameter param2) {
            return Integer.compare(param1.getPosition(), param2.getPosition());
        }
    };

    private static final int PARAM_NAME_LEN = 30;
    private static final int PARAM_DESC_LEN = 2000;

    @NotBlank(message = "itemSelectionAlgorithm.parameters.parameterName.required")
    @Size(max = PARAM_NAME_LEN, message = "itemSelectionAlgorithm.parameters.parameterName.length")
    private String parameterName;

    @NotNull(message = "itemSelectionAlgorithm.parameters.itemSelectionPurpose.required")
    private ItemSelectionPurpose itemSelectionPurpose;

    @NotNull(message = "itemSelectionAlgorithm.parameters.itemSelectionType.required")
    private ItemSelectionType itemSelectionType;

    @Size(max = PARAM_DESC_LEN, message = "itemSelectionAlgorithm.parameters.description.length")
    private String description;

    @NotBlank(message = "itemSelectionAlgorithm.parameters.defaultValue.required")
    private String defaultValue;
    @Size(max = AbstractDomainValidator.MAX_PARSEABLE_LENGTH, message = "itemSelectionAlgorithm.parameters.minimumValue.length")
    private String minimumValue;
    @Size(max = AbstractDomainValidator.MAX_PARSEABLE_LENGTH, message = "itemSelectionAlgorithm.parameters.maximumValue.length")
    private String maximumValue;

    @Valid
    private List<ItemSelectionParameterElement> itemSelectionList;

    @Min(value = 1, message = "itemSelectionAlgorithm.parameters.position.min")
    private int position;

    public String getParameterName() {
        return this.parameterName;
    }

    public void setParameterName(final String aParameterName) {
        this.parameterName = aParameterName;
    }

    public ItemSelectionPurpose getItemSelectionPurpose() {
        return this.itemSelectionPurpose;
    }

    public void setItemSelectionPurpose(final ItemSelectionPurpose aItemSelectionPurpose) {
        this.itemSelectionPurpose = aItemSelectionPurpose;
    }

    public ItemSelectionType getItemSelectionType() {
        return this.itemSelectionType;
    }

    public void setItemSelectionType(final ItemSelectionType aItemSelectionType) {
        this.itemSelectionType = aItemSelectionType;
    }

    public String getDescription() {
        return this.description;
    }

    public void setDescription(final String aDescription) {
        this.description = aDescription;
    }

    public String getDefaultValue() {
        return this.defaultValue;
    }

    public void setDefaultValue(final String aDefaultValue) {
        this.defaultValue = aDefaultValue;
    }

    public String getMinimumValue() {
        return this.minimumValue;
    }

    public void setMinimumValue(final String aMinimumValue) {
        this.minimumValue = aMinimumValue;
    }

    public String getMaximumValue() {
        return this.maximumValue;
    }

    public void setMaximumValue(final String aMaximumValue) {
        this.maximumValue = aMaximumValue;
    }

    public List<ItemSelectionParameterElement> getItemSelectionList() {
        return this.itemSelectionList;
    }

    public void setItemSelectionList(final List<ItemSelectionParameterElement> aItemSelectionList) {
        this.itemSelectionList = aItemSelectionList == null ? null : ItemSelectionParameterElement.BY_POSITION_ORDERING.sortedCopy(aItemSelectionList);
    }

    public int getPosition() {
        return this.position;
    }

    public void setPosition(final int aPosition) {
        this.position = aPosition;
    }

    /**
     * Trims the default, min, and max values of leading and trailing zeroes when parameter is of type FLOAT or INTEGER. Should only be called after validation is successful.
     */
    public void trimValues() {
        if (ItemSelectionType.FLOAT == this.itemSelectionType || ItemSelectionType.INTEGER == this.itemSelectionType) {
            this.defaultValue = StringUtils.isNotBlank(this.defaultValue) ? new BigDecimal(this.defaultValue).stripTrailingZeros().toPlainString() : null;
            this.minimumValue = StringUtils.isNotBlank(this.minimumValue) ? new BigDecimal(this.minimumValue).stripTrailingZeros().toPlainString() : null;
            this.maximumValue = StringUtils.isNotBlank(this.maximumValue) ? new BigDecimal(this.maximumValue).stripTrailingZeros().toPlainString() : null;
        }
    }

    @Override
    public boolean equals(final Object obj) {
        return EqualsBuilder.reflectionEquals(this, obj);
    }

    @Override
    public String toString() {
        return ToStringBuilder.reflectionToString(this, ToStringStyle.SHORT_PREFIX_STYLE);
    }

    @Override
    public int hashCode() {
        return HashCodeBuilder.reflectionHashCode(this);
    }
}
